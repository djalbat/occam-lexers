'use strict';

var unicode_letter = '\\u{c0}-\\u{ff}\\u{180}-\\u{24f}\\u{391}-\\u{3ff}\\u{400}-\\u{4ff}\\u{2100}-\\u{214f}\\u{2070}-\\u{2079}\\u{2080}-\\u{2089}',
    unicode_id_part = '',
    ///
first_letter = '[a-zA-Z_' + unicode_letter + ']',
    subsequent_letter = '[a-zA-Z_0-9_\u2019' + unicode_letter + unicode_id_part + ']',
    ident = '' + first_letter + subsequent_letter + '*';

'use strict';

var grammar = [{ string: /"[^"]*"/ }, { keyword: /_|as|at|cofix|else|end|exists|exists2|fix|forall|for|fun|if|IF|in|let|match|mod|Prop|return|Set|then|Type|using|where|with|Axiom|Conjecture|Parameter|Parameters|Variable|Variables|Hypothesis|Hypotheses|Local|Definition|Let|Inductive|CoInductive|Fixpoint|CoFixpoint|Theorem|Lemma|Remark|Fact|Corollary|Proposition|Definition|Example/ }, { ident: new RegExp('' + ident, 'u') }, { access_ident: new RegExp('\\.' + ident, 'u') }, { special: /!|%|&&|&|@|~|\(\)|\(|\)|\*|\+\+|\+|,|\.|\.\(|\.\.|\\\/|\/\\|\/|::|:<|:=|:>|:|;|<->|>->|<-|->|-|<:|<=|<>|<|=>|=_D|=|>=|>|\?|\?=|\[|\]|\^|\{|\}|\|\||\|-|'/ }, { num: /[0-9]+/ }];

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9nYWxsaW5hL2dyYW1tYXIuanMiXSwibmFtZXMiOlsidW5pY29kZV9sZXR0ZXIiLCJ1bmljb2RlX2lkX3BhcnQiLCJmaXJzdF9sZXR0ZXIiLCJzdWJzZXF1ZW50X2xldHRlciIsImlkZW50IiwiZ3JhbW1hciIsInN0cmluZyIsImtleXdvcmQiLCJSZWdFeHAiLCJhY2Nlc3NfaWRlbnQiLCJzcGVjaWFsIiwibnVtIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsOElBQUo7QUFBQSxJQUNJQyxvQkFESjtBQUFBLElBQzBCO0FBQ3RCQyw0QkFBMEJGLGNBQTFCLE1BRko7QUFBQSxJQUdJRywyQ0FBb0NILGNBQXBDLEdBQXFEQyxlQUFyRCxNQUhKO0FBQUEsSUFJSUcsYUFBV0YsWUFBWCxHQUEwQkMsaUJBQTFCLE1BSko7O0FBTUE7O0FBRUEsSUFBSUUsVUFBVSxDQUVaLEVBQUVDLFFBQWdCLFNBQWxCLEVBRlksRUFJWixFQUFFQyxTQUFnQiw2VUFBbEIsRUFKWSxFQU1aLEVBQUVILE9BQWdCLElBQUlJLE1BQUosTUFBY0osS0FBZCxFQUF1QixHQUF2QixDQUFsQixFQU5ZLEVBUVosRUFBRUssY0FBZ0IsSUFBSUQsTUFBSixTQUFpQkosS0FBakIsRUFBMEIsR0FBMUIsQ0FBbEIsRUFSWSxFQVVaLEVBQUVNLFNBQWdCLDBKQUFsQixFQVZZLEVBWVosRUFBRUMsS0FBZ0IsUUFBbEIsRUFaWSxDQUFkOztBQWdCQUMsT0FBT0MsT0FBUCxHQUFpQlIsT0FBakIiLCJmaWxlIjoiZ3JhbW1hci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciB1bmljb2RlX2xldHRlciA9IGBcXFxcdXtjMH0tXFxcXHV7ZmZ9XFxcXHV7MTgwfS1cXFxcdXsyNGZ9XFxcXHV7MzkxfS1cXFxcdXszZmZ9XFxcXHV7NDAwfS1cXFxcdXs0ZmZ9XFxcXHV7MjEwMH0tXFxcXHV7MjE0Zn1cXFxcdXsyMDcwfS1cXFxcdXsyMDc5fVxcXFx1ezIwODB9LVxcXFx1ezIwODl9YCxcclxuICAgIHVuaWNvZGVfaWRfcGFydCA9IGBgLCAvLy9cclxuICAgIGZpcnN0X2xldHRlciA9IGBbYS16QS1aXyR7dW5pY29kZV9sZXR0ZXJ9XWAsXHJcbiAgICBzdWJzZXF1ZW50X2xldHRlciA9IGBbYS16QS1aXzAtOV/igJkke3VuaWNvZGVfbGV0dGVyfSR7dW5pY29kZV9pZF9wYXJ0fV1gLFxyXG4gICAgaWRlbnQgPSBgJHtmaXJzdF9sZXR0ZXJ9JHtzdWJzZXF1ZW50X2xldHRlcn0qYDtcclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBncmFtbWFyID0gW1xyXG5cclxuICB7IHN0cmluZyAgICAgICAgOiAvXCJbXlwiXSpcIi8gfSxcclxuXHJcbiAgeyBrZXl3b3JkICAgICAgIDogL198YXN8YXR8Y29maXh8ZWxzZXxlbmR8ZXhpc3RzfGV4aXN0czJ8Zml4fGZvcmFsbHxmb3J8ZnVufGlmfElGfGlufGxldHxtYXRjaHxtb2R8UHJvcHxyZXR1cm58U2V0fHRoZW58VHlwZXx1c2luZ3x3aGVyZXx3aXRofEF4aW9tfENvbmplY3R1cmV8UGFyYW1ldGVyfFBhcmFtZXRlcnN8VmFyaWFibGV8VmFyaWFibGVzfEh5cG90aGVzaXN8SHlwb3RoZXNlc3xMb2NhbHxEZWZpbml0aW9ufExldHxJbmR1Y3RpdmV8Q29JbmR1Y3RpdmV8Rml4cG9pbnR8Q29GaXhwb2ludHxUaGVvcmVtfExlbW1hfFJlbWFya3xGYWN0fENvcm9sbGFyeXxQcm9wb3NpdGlvbnxEZWZpbml0aW9ufEV4YW1wbGUvIH0sXHJcblxyXG4gIHsgaWRlbnQgICAgICAgICA6IG5ldyBSZWdFeHAoYCR7aWRlbnR9YCwgJ3UnKSB9LFxyXG5cclxuICB7IGFjY2Vzc19pZGVudCAgOiBuZXcgUmVnRXhwKGBcXFxcLiR7aWRlbnR9YCwgJ3UnKSB9LFxyXG5cclxuICB7IHNwZWNpYWwgICAgICAgOiAvIXwlfCYmfCZ8QHx+fFxcKFxcKXxcXCh8XFwpfFxcKnxcXCtcXCt8XFwrfCx8XFwufFxcLlxcKHxcXC5cXC58XFxcXFxcL3xcXC9cXFxcfFxcL3w6Onw6PHw6PXw6Pnw6fDt8PC0+fD4tPnw8LXwtPnwtfDw6fDw9fDw+fDx8PT58PV9EfD18Pj18PnxcXD98XFw/PXxcXFt8XFxdfFxcXnxcXHt8XFx9fFxcfFxcfHxcXHwtfCcvIH0sXHJcblxyXG4gIHsgbnVtICAgICAgICAgICA6IC9bMC05XSsvIH1cclxuXHJcbl07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGdyYW1tYXI7XHJcbiJdfQ==