'use strict';

var tokens = require('../tokens');

var processByCallback = tokens.processByCallback;


function process(tokensOrContents, rules) {
  processByCallback(tokensOrContents, function (content) {
    return significantTokensFromWithinContent(content, rules);
  });
}

module.exports = {
  process: process
};

function significantTokensFromWithinContent(content, rules) {
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  var significantTokens = [];

  if (content !== '') {
    var rule = rules.getRule(depth);

    if (rule !== null) {
      var nextDepth = depth + 1,
          significantTokenPositionWithinContent = rule.significantTokenPositionWithinContent(content);

      if (significantTokenPositionWithinContent === -1) {
        significantTokens = significantTokensFromWithinContent(content, rules, nextDepth);
      } else {
        var significantToken = rule.significantTokenFromWithinContent(content),
            significantTokenContentLength = significantToken.getContentLength(),
            left = significantTokenPositionWithinContent,
            ///
        right = significantTokenPositionWithinContent + significantTokenContentLength,
            ///
        leftContent = content.substring(0, left),
            rightContent = content.substring(right),
            leftSignificantTokens = significantTokensFromWithinContent(leftContent, rules, nextDepth),
            rightSignificantTokens = significantTokensFromWithinContent(rightContent, rules, depth);

        significantTokens = [].concat(leftSignificantTokens).concat(significantToken).concat(rightSignificantTokens);
      }
    } else {
      throw new Error('There is no rule to parse \'' + content + '\'.');
    }
  }

  return significantTokens;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9jb21tb24vdG9rZW5zL3NpZ25pZmljYW50LmpzIl0sIm5hbWVzIjpbInRva2VucyIsInJlcXVpcmUiLCJwcm9jZXNzQnlDYWxsYmFjayIsInByb2Nlc3MiLCJ0b2tlbnNPckNvbnRlbnRzIiwicnVsZXMiLCJjb250ZW50Iiwic2lnbmlmaWNhbnRUb2tlbnNGcm9tV2l0aGluQ29udGVudCIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZXB0aCIsInNpZ25pZmljYW50VG9rZW5zIiwicnVsZSIsImdldFJ1bGUiLCJuZXh0RGVwdGgiLCJzaWduaWZpY2FudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50Iiwic2lnbmlmaWNhbnRUb2tlbiIsInNpZ25pZmljYW50VG9rZW5Gcm9tV2l0aGluQ29udGVudCIsInNpZ25pZmljYW50VG9rZW5Db250ZW50TGVuZ3RoIiwiZ2V0Q29udGVudExlbmd0aCIsImxlZnQiLCJyaWdodCIsImxlZnRDb250ZW50Iiwic3Vic3RyaW5nIiwicmlnaHRDb250ZW50IiwibGVmdFNpZ25pZmljYW50VG9rZW5zIiwicmlnaHRTaWduaWZpY2FudFRva2VucyIsImNvbmNhdCIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxTQUFTQyxRQUFRLFdBQVIsQ0FBZjs7SUFFUUMsaUIsR0FBc0JGLE0sQ0FBdEJFLGlCOzs7QUFFUixTQUFTQyxPQUFULENBQWlCQyxnQkFBakIsRUFBbUNDLEtBQW5DLEVBQTBDO0FBQ3hDSCxvQkFBa0JFLGdCQUFsQixFQUFvQyxVQUFTRSxPQUFULEVBQWtCO0FBQUUsV0FBT0MsbUNBQW1DRCxPQUFuQyxFQUE0Q0QsS0FBNUMsQ0FBUDtBQUE0RCxHQUFwSDtBQUNEOztBQUVERyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZOLFdBQVNBO0FBRE0sQ0FBakI7O0FBSUEsU0FBU0ksa0NBQVQsQ0FBNENELE9BQTVDLEVBQXFERCxLQUFyRCxFQUF1RTtBQUFBLE1BQVhLLEtBQVcsdUVBQUgsQ0FBRzs7QUFDckUsTUFBSUMsb0JBQW9CLEVBQXhCOztBQUVBLE1BQUlMLFlBQVksRUFBaEIsRUFBb0I7QUFDbEIsUUFBTU0sT0FBT1AsTUFBTVEsT0FBTixDQUFjSCxLQUFkLENBQWI7O0FBRUEsUUFBSUUsU0FBUyxJQUFiLEVBQW1CO0FBQ2pCLFVBQU1FLFlBQVlKLFFBQVEsQ0FBMUI7QUFBQSxVQUNNSyx3Q0FBd0NILEtBQUtHLHFDQUFMLENBQTJDVCxPQUEzQyxDQUQ5Qzs7QUFHQSxVQUFJUywwQ0FBMEMsQ0FBQyxDQUEvQyxFQUFrRDtBQUNoREosNEJBQW9CSixtQ0FBbUNELE9BQW5DLEVBQTRDRCxLQUE1QyxFQUFtRFMsU0FBbkQsQ0FBcEI7QUFDRCxPQUZELE1BRU87QUFDTCxZQUFNRSxtQkFBbUJKLEtBQUtLLGlDQUFMLENBQXVDWCxPQUF2QyxDQUF6QjtBQUFBLFlBQ01ZLGdDQUFnQ0YsaUJBQWlCRyxnQkFBakIsRUFEdEM7QUFBQSxZQUVNQyxPQUFPTCxxQ0FGYjtBQUFBLFlBRXFEO0FBQy9DTSxnQkFBUU4sd0NBQXdDRyw2QkFIdEQ7QUFBQSxZQUdzRjtBQUNoRkksc0JBQWNoQixRQUFRaUIsU0FBUixDQUFrQixDQUFsQixFQUFxQkgsSUFBckIsQ0FKcEI7QUFBQSxZQUtNSSxlQUFlbEIsUUFBUWlCLFNBQVIsQ0FBa0JGLEtBQWxCLENBTHJCO0FBQUEsWUFNTUksd0JBQXdCbEIsbUNBQW1DZSxXQUFuQyxFQUFnRGpCLEtBQWhELEVBQXVEUyxTQUF2RCxDQU45QjtBQUFBLFlBT01ZLHlCQUF5Qm5CLG1DQUFtQ2lCLFlBQW5DLEVBQWlEbkIsS0FBakQsRUFBd0RLLEtBQXhELENBUC9COztBQVNBQyw0QkFBb0IsR0FBR2dCLE1BQUgsQ0FBVUYscUJBQVYsRUFBaUNFLE1BQWpDLENBQXdDWCxnQkFBeEMsRUFBMERXLE1BQTFELENBQWlFRCxzQkFBakUsQ0FBcEI7QUFDRDtBQUNGLEtBbEJELE1Ba0JPO0FBQ0wsWUFBTSxJQUFJRSxLQUFKLGtDQUF3Q3RCLE9BQXhDLFNBQU47QUFDRDtBQUNGOztBQUVELFNBQU9LLGlCQUFQO0FBQ0QiLCJmaWxlIjoic2lnbmlmaWNhbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5jb25zdCB0b2tlbnMgPSByZXF1aXJlKCcuLi90b2tlbnMnKTtcclxuXHJcbmNvbnN0IHsgcHJvY2Vzc0J5Q2FsbGJhY2sgfSA9IHRva2VucztcclxuXHJcbmZ1bmN0aW9uIHByb2Nlc3ModG9rZW5zT3JDb250ZW50cywgcnVsZXMpIHtcclxuICBwcm9jZXNzQnlDYWxsYmFjayh0b2tlbnNPckNvbnRlbnRzLCBmdW5jdGlvbihjb250ZW50KSB7IHJldHVybiBzaWduaWZpY2FudFRva2Vuc0Zyb21XaXRoaW5Db250ZW50KGNvbnRlbnQsIHJ1bGVzKTsgfSk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIHByb2Nlc3M6IHByb2Nlc3NcclxufTtcclxuXHJcbmZ1bmN0aW9uIHNpZ25pZmljYW50VG9rZW5zRnJvbVdpdGhpbkNvbnRlbnQoY29udGVudCwgcnVsZXMsIGRlcHRoID0gMCkge1xyXG4gIGxldCBzaWduaWZpY2FudFRva2VucyA9IFtdO1xyXG5cclxuICBpZiAoY29udGVudCAhPT0gJycpIHtcclxuICAgIGNvbnN0IHJ1bGUgPSBydWxlcy5nZXRSdWxlKGRlcHRoKTtcclxuXHJcbiAgICBpZiAocnVsZSAhPT0gbnVsbCkge1xyXG4gICAgICBjb25zdCBuZXh0RGVwdGggPSBkZXB0aCArIDEsXHJcbiAgICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQgPSBydWxlLnNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQoY29udGVudCk7XHJcblxyXG4gICAgICBpZiAoc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudCA9PT0gLTEpIHtcclxuICAgICAgICBzaWduaWZpY2FudFRva2VucyA9IHNpZ25pZmljYW50VG9rZW5zRnJvbVdpdGhpbkNvbnRlbnQoY29udGVudCwgcnVsZXMsIG5leHREZXB0aCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3Qgc2lnbmlmaWNhbnRUb2tlbiA9IHJ1bGUuc2lnbmlmaWNhbnRUb2tlbkZyb21XaXRoaW5Db250ZW50KGNvbnRlbnQpLFxyXG4gICAgICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5Db250ZW50TGVuZ3RoID0gc2lnbmlmaWNhbnRUb2tlbi5nZXRDb250ZW50TGVuZ3RoKCksXHJcbiAgICAgICAgICAgICAgbGVmdCA9IHNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQsICAvLy9cclxuICAgICAgICAgICAgICByaWdodCA9IHNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQgKyBzaWduaWZpY2FudFRva2VuQ29udGVudExlbmd0aCwgIC8vL1xyXG4gICAgICAgICAgICAgIGxlZnRDb250ZW50ID0gY29udGVudC5zdWJzdHJpbmcoMCwgbGVmdCksXHJcbiAgICAgICAgICAgICAgcmlnaHRDb250ZW50ID0gY29udGVudC5zdWJzdHJpbmcocmlnaHQpLFxyXG4gICAgICAgICAgICAgIGxlZnRTaWduaWZpY2FudFRva2VucyA9IHNpZ25pZmljYW50VG9rZW5zRnJvbVdpdGhpbkNvbnRlbnQobGVmdENvbnRlbnQsIHJ1bGVzLCBuZXh0RGVwdGgpLFxyXG4gICAgICAgICAgICAgIHJpZ2h0U2lnbmlmaWNhbnRUb2tlbnMgPSBzaWduaWZpY2FudFRva2Vuc0Zyb21XaXRoaW5Db250ZW50KHJpZ2h0Q29udGVudCwgcnVsZXMsIGRlcHRoKTtcclxuXHJcbiAgICAgICAgc2lnbmlmaWNhbnRUb2tlbnMgPSBbXS5jb25jYXQobGVmdFNpZ25pZmljYW50VG9rZW5zKS5jb25jYXQoc2lnbmlmaWNhbnRUb2tlbikuY29uY2F0KHJpZ2h0U2lnbmlmaWNhbnRUb2tlbnMpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZXJlIGlzIG5vIHJ1bGUgdG8gcGFyc2UgJyR7Y29udGVudH0nLmApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHNpZ25pZmljYW50VG9rZW5zO1xyXG59XHJcbiJdfQ==