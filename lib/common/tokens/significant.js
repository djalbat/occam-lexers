'use strict';

var tokens = require('../tokens');

var processByCallback = tokens.processByCallback;


function process(tokensOrContents, rules) {
  processByCallback(tokensOrContents, function (tokenOrContent) {
    var tokensOrRemainingContents = void 0;

    var tokenOrContentContent = typeof tokenOrContent === 'string';

    if (tokenOrContentContent) {
      var content = tokenOrContent,
          ///
      depth = 0,
          significantTokens = significantTokensFromContent(content, rules, depth);

      tokensOrRemainingContents = significantTokens; ///
    } else {
      var token = tokenOrContent; ///

      tokensOrRemainingContents = [token];
    }

    return tokensOrRemainingContents;
  });
}

module.exports = {
  process: process
};

function significantTokensFromContent(content, rules, depth) {
  var significantTokens = [];

  if (content !== '') {
    var rule = rules.getRule(depth);

    if (rule !== null) {
      var nextDepth = depth + 1,
          significantTokenPositionWithinContent = rule.significantTokenPositionWithinContent(content);

      if (significantTokenPositionWithinContent === -1) {
        significantTokens = significantTokensFromContent(content, rules, nextDepth);
      } else {
        var significantToken = rule.significantTokenFromWithinContent(content),
            significantTokenContentLength = significantToken.getContentLength(),
            left = significantTokenPositionWithinContent,
            ///
        right = significantTokenPositionWithinContent + significantTokenContentLength,
            ///
        leftContent = content.substring(0, left),
            rightContent = content.substring(right),
            leftSignificantTokens = significantTokensFromContent(leftContent, rules, nextDepth),
            rightSignificantTokens = significantTokensFromContent(rightContent, rules, depth);

        significantTokens = [].concat(leftSignificantTokens).concat(significantToken).concat(rightSignificantTokens);
      }
    } else {
      throw new Error('There is no rule to parse \'' + content + '\'.');
    }
  }

  return significantTokens;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9jb21tb24vdG9rZW5zL3NpZ25pZmljYW50LmpzIl0sIm5hbWVzIjpbInRva2VucyIsInJlcXVpcmUiLCJwcm9jZXNzQnlDYWxsYmFjayIsInByb2Nlc3MiLCJ0b2tlbnNPckNvbnRlbnRzIiwicnVsZXMiLCJ0b2tlbk9yQ29udGVudCIsInRva2Vuc09yUmVtYWluaW5nQ29udGVudHMiLCJ0b2tlbk9yQ29udGVudENvbnRlbnQiLCJjb250ZW50IiwiZGVwdGgiLCJzaWduaWZpY2FudFRva2VucyIsInNpZ25pZmljYW50VG9rZW5zRnJvbUNvbnRlbnQiLCJ0b2tlbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJydWxlIiwiZ2V0UnVsZSIsIm5leHREZXB0aCIsInNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQiLCJzaWduaWZpY2FudFRva2VuIiwic2lnbmlmaWNhbnRUb2tlbkZyb21XaXRoaW5Db250ZW50Iiwic2lnbmlmaWNhbnRUb2tlbkNvbnRlbnRMZW5ndGgiLCJnZXRDb250ZW50TGVuZ3RoIiwibGVmdCIsInJpZ2h0IiwibGVmdENvbnRlbnQiLCJzdWJzdHJpbmciLCJyaWdodENvbnRlbnQiLCJsZWZ0U2lnbmlmaWNhbnRUb2tlbnMiLCJyaWdodFNpZ25pZmljYW50VG9rZW5zIiwiY29uY2F0IiwiRXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFNBQVNDLFFBQVEsV0FBUixDQUFmOztJQUVRQyxpQixHQUFzQkYsTSxDQUF0QkUsaUI7OztBQUVSLFNBQVNDLE9BQVQsQ0FBaUJDLGdCQUFqQixFQUFtQ0MsS0FBbkMsRUFBMEM7QUFDeENILG9CQUFrQkUsZ0JBQWxCLEVBQW9DLFVBQVNFLGNBQVQsRUFBeUI7QUFDM0QsUUFBSUMsa0NBQUo7O0FBRUEsUUFBTUMsd0JBQXlCLE9BQU9GLGNBQVAsS0FBMEIsUUFBekQ7O0FBRUEsUUFBSUUscUJBQUosRUFBMkI7QUFDekIsVUFBTUMsVUFBVUgsY0FBaEI7QUFBQSxVQUFnQztBQUMxQkksY0FBUSxDQURkO0FBQUEsVUFFTUMsb0JBQW9CQyw2QkFBNkJILE9BQTdCLEVBQXNDSixLQUF0QyxFQUE2Q0ssS0FBN0MsQ0FGMUI7O0FBSUFILGtDQUE0QkksaUJBQTVCLENBTHlCLENBS3NCO0FBQ2hELEtBTkQsTUFNTztBQUNMLFVBQU1FLFFBQVFQLGNBQWQsQ0FESyxDQUMwQjs7QUFFL0JDLGtDQUE0QixDQUFDTSxLQUFELENBQTVCO0FBQ0Q7O0FBRUQsV0FBT04seUJBQVA7QUFDRCxHQWxCRDtBQW1CRDs7QUFFRE8sT0FBT0MsT0FBUCxHQUFpQjtBQUNmWixXQUFTQTtBQURNLENBQWpCOztBQUlBLFNBQVNTLDRCQUFULENBQXNDSCxPQUF0QyxFQUErQ0osS0FBL0MsRUFBc0RLLEtBQXRELEVBQTZEO0FBQzNELE1BQUlDLG9CQUFvQixFQUF4Qjs7QUFFQSxNQUFJRixZQUFZLEVBQWhCLEVBQW9CO0FBQ2xCLFFBQU1PLE9BQU9YLE1BQU1ZLE9BQU4sQ0FBY1AsS0FBZCxDQUFiOztBQUVBLFFBQUlNLFNBQVMsSUFBYixFQUFtQjtBQUNqQixVQUFNRSxZQUFZUixRQUFRLENBQTFCO0FBQUEsVUFDTVMsd0NBQXdDSCxLQUFLRyxxQ0FBTCxDQUEyQ1YsT0FBM0MsQ0FEOUM7O0FBR0EsVUFBSVUsMENBQTBDLENBQUMsQ0FBL0MsRUFBa0Q7QUFDaERSLDRCQUFvQkMsNkJBQTZCSCxPQUE3QixFQUFzQ0osS0FBdEMsRUFBNkNhLFNBQTdDLENBQXBCO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsWUFBTUUsbUJBQW1CSixLQUFLSyxpQ0FBTCxDQUF1Q1osT0FBdkMsQ0FBekI7QUFBQSxZQUNNYSxnQ0FBZ0NGLGlCQUFpQkcsZ0JBQWpCLEVBRHRDO0FBQUEsWUFFTUMsT0FBT0wscUNBRmI7QUFBQSxZQUVxRDtBQUMvQ00sZ0JBQVFOLHdDQUF3Q0csNkJBSHREO0FBQUEsWUFHc0Y7QUFDaEZJLHNCQUFjakIsUUFBUWtCLFNBQVIsQ0FBa0IsQ0FBbEIsRUFBcUJILElBQXJCLENBSnBCO0FBQUEsWUFLTUksZUFBZW5CLFFBQVFrQixTQUFSLENBQWtCRixLQUFsQixDQUxyQjtBQUFBLFlBTU1JLHdCQUF3QmpCLDZCQUE2QmMsV0FBN0IsRUFBMENyQixLQUExQyxFQUFpRGEsU0FBakQsQ0FOOUI7QUFBQSxZQU9NWSx5QkFBeUJsQiw2QkFBNkJnQixZQUE3QixFQUEyQ3ZCLEtBQTNDLEVBQWtESyxLQUFsRCxDQVAvQjs7QUFTQUMsNEJBQW9CLEdBQUdvQixNQUFILENBQVVGLHFCQUFWLEVBQWlDRSxNQUFqQyxDQUF3Q1gsZ0JBQXhDLEVBQTBEVyxNQUExRCxDQUFpRUQsc0JBQWpFLENBQXBCO0FBQ0Q7QUFDRixLQWxCRCxNQWtCTztBQUNMLFlBQU0sSUFBSUUsS0FBSixrQ0FBd0N2QixPQUF4QyxTQUFOO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPRSxpQkFBUDtBQUNEIiwiZmlsZSI6InNpZ25pZmljYW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuY29uc3QgdG9rZW5zID0gcmVxdWlyZSgnLi4vdG9rZW5zJyk7XHJcblxyXG5jb25zdCB7IHByb2Nlc3NCeUNhbGxiYWNrIH0gPSB0b2tlbnM7XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzKHRva2Vuc09yQ29udGVudHMsIHJ1bGVzKSB7XHJcbiAgcHJvY2Vzc0J5Q2FsbGJhY2sodG9rZW5zT3JDb250ZW50cywgZnVuY3Rpb24odG9rZW5PckNvbnRlbnQpIHtcclxuICAgIGxldCB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzO1xyXG5cclxuICAgIGNvbnN0IHRva2VuT3JDb250ZW50Q29udGVudCA9ICh0eXBlb2YgdG9rZW5PckNvbnRlbnQgPT09ICdzdHJpbmcnKTtcclxuXHJcbiAgICBpZiAodG9rZW5PckNvbnRlbnRDb250ZW50KSB7XHJcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSB0b2tlbk9yQ29udGVudCwgLy8vXHJcbiAgICAgICAgICAgIGRlcHRoID0gMCxcclxuICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlbnMgPSBzaWduaWZpY2FudFRva2Vuc0Zyb21Db250ZW50KGNvbnRlbnQsIHJ1bGVzLCBkZXB0aCk7XHJcblxyXG4gICAgICB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzID0gc2lnbmlmaWNhbnRUb2tlbnM7IC8vL1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgdG9rZW4gPSB0b2tlbk9yQ29udGVudDsgIC8vL1xyXG5cclxuICAgICAgdG9rZW5zT3JSZW1haW5pbmdDb250ZW50cyA9IFt0b2tlbl07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRva2Vuc09yUmVtYWluaW5nQ29udGVudHM7XHJcbiAgfSk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIHByb2Nlc3M6IHByb2Nlc3NcclxufTtcclxuXHJcbmZ1bmN0aW9uIHNpZ25pZmljYW50VG9rZW5zRnJvbUNvbnRlbnQoY29udGVudCwgcnVsZXMsIGRlcHRoKSB7XHJcbiAgbGV0IHNpZ25pZmljYW50VG9rZW5zID0gW107XHJcblxyXG4gIGlmIChjb250ZW50ICE9PSAnJykge1xyXG4gICAgY29uc3QgcnVsZSA9IHJ1bGVzLmdldFJ1bGUoZGVwdGgpO1xyXG5cclxuICAgIGlmIChydWxlICE9PSBudWxsKSB7XHJcbiAgICAgIGNvbnN0IG5leHREZXB0aCA9IGRlcHRoICsgMSxcclxuICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudCA9IHJ1bGUuc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudChjb250ZW50KTtcclxuXHJcbiAgICAgIGlmIChzaWduaWZpY2FudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50ID09PSAtMSkge1xyXG4gICAgICAgIHNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnNGcm9tQ29udGVudChjb250ZW50LCBydWxlcywgbmV4dERlcHRoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBzaWduaWZpY2FudFRva2VuID0gcnVsZS5zaWduaWZpY2FudFRva2VuRnJvbVdpdGhpbkNvbnRlbnQoY29udGVudCksXHJcbiAgICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlbkNvbnRlbnRMZW5ndGggPSBzaWduaWZpY2FudFRva2VuLmdldENvbnRlbnRMZW5ndGgoKSxcclxuICAgICAgICAgICAgICBsZWZ0ID0gc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudCwgIC8vL1xyXG4gICAgICAgICAgICAgIHJpZ2h0ID0gc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudCArIHNpZ25pZmljYW50VG9rZW5Db250ZW50TGVuZ3RoLCAgLy8vXHJcbiAgICAgICAgICAgICAgbGVmdENvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZygwLCBsZWZ0KSxcclxuICAgICAgICAgICAgICByaWdodENvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZyhyaWdodCksXHJcbiAgICAgICAgICAgICAgbGVmdFNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnNGcm9tQ29udGVudChsZWZ0Q29udGVudCwgcnVsZXMsIG5leHREZXB0aCksXHJcbiAgICAgICAgICAgICAgcmlnaHRTaWduaWZpY2FudFRva2VucyA9IHNpZ25pZmljYW50VG9rZW5zRnJvbUNvbnRlbnQocmlnaHRDb250ZW50LCBydWxlcywgZGVwdGgpO1xyXG5cclxuICAgICAgICBzaWduaWZpY2FudFRva2VucyA9IFtdLmNvbmNhdChsZWZ0U2lnbmlmaWNhbnRUb2tlbnMpLmNvbmNhdChzaWduaWZpY2FudFRva2VuKS5jb25jYXQocmlnaHRTaWduaWZpY2FudFRva2Vucyk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlcmUgaXMgbm8gcnVsZSB0byBwYXJzZSAnJHtjb250ZW50fScuYCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2lnbmlmaWNhbnRUb2tlbnM7XHJcbn1cclxuIl19