'use strict';

var tokens = require('../tokens');

var tokeniseByCallback = tokens.tokeniseByCallback;


function tokenise(tokensOrContents, rules) {
  tokeniseByCallback(tokensOrContents, function (tokenOrContent) {
    var tokensOrRemainingContents = void 0;

    var tokenOrContentString = typeof tokenOrContent === 'string',
        tokenOrContentContent = tokenOrContentString; ///

    if (tokenOrContentContent) {
      var content = tokenOrContent,
          ///
      depth = 0,
          significantTokens = significantTokensFromContent(content, rules, depth);

      tokensOrRemainingContents = significantTokens; ///
    } else {
      var token = tokenOrContent; ///

      tokensOrRemainingContents = [token];
    }

    return tokensOrRemainingContents;
  });
}

module.exports = {
  tokenise: tokenise
};

function significantTokensFromContent(content, rules, depth) {
  var significantTokens = [];

  if (content !== '') {
    var rule = rules.getRule(depth);

    if (rule !== null) {
      var nextDepth = depth + 1,
          significantTokenPositionWithinContent = rule.significantTokenPositionWithinContent(content);

      if (significantTokenPositionWithinContent === -1) {
        significantTokens = significantTokensFromContent(content, rules, nextDepth);
      } else {
        var significantToken = rule.significantTokenFromWithinContent(content),
            significantTokenContentLength = significantToken.getContentLength(),
            left = significantTokenPositionWithinContent,
            ///
        right = significantTokenPositionWithinContent + significantTokenContentLength,
            ///
        leftContent = content.substring(0, left),
            rightContent = content.substring(right),
            leftSignificantTokens = significantTokensFromContent(leftContent, rules, nextDepth),
            rightSignificantTokens = significantTokensFromContent(rightContent, rules, depth);

        significantTokens = [].concat(leftSignificantTokens).concat(significantToken).concat(rightSignificantTokens);
      }
    } else {
      throw new Error('There is no rule to parse \'' + content + '\'.');
    }
  }

  return significantTokens;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9jb21tb24vdG9rZW5zL3NpZ25pZmljYW50LmpzIl0sIm5hbWVzIjpbInRva2VucyIsInJlcXVpcmUiLCJ0b2tlbmlzZUJ5Q2FsbGJhY2siLCJ0b2tlbmlzZSIsInRva2Vuc09yQ29udGVudHMiLCJydWxlcyIsInRva2VuT3JDb250ZW50IiwidG9rZW5zT3JSZW1haW5pbmdDb250ZW50cyIsInRva2VuT3JDb250ZW50U3RyaW5nIiwidG9rZW5PckNvbnRlbnRDb250ZW50IiwiY29udGVudCIsImRlcHRoIiwic2lnbmlmaWNhbnRUb2tlbnMiLCJzaWduaWZpY2FudFRva2Vuc0Zyb21Db250ZW50IiwidG9rZW4iLCJtb2R1bGUiLCJleHBvcnRzIiwicnVsZSIsImdldFJ1bGUiLCJuZXh0RGVwdGgiLCJzaWduaWZpY2FudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50Iiwic2lnbmlmaWNhbnRUb2tlbiIsInNpZ25pZmljYW50VG9rZW5Gcm9tV2l0aGluQ29udGVudCIsInNpZ25pZmljYW50VG9rZW5Db250ZW50TGVuZ3RoIiwiZ2V0Q29udGVudExlbmd0aCIsImxlZnQiLCJyaWdodCIsImxlZnRDb250ZW50Iiwic3Vic3RyaW5nIiwicmlnaHRDb250ZW50IiwibGVmdFNpZ25pZmljYW50VG9rZW5zIiwicmlnaHRTaWduaWZpY2FudFRva2VucyIsImNvbmNhdCIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxTQUFTQyxRQUFRLFdBQVIsQ0FBZjs7SUFFUUMsa0IsR0FBdUJGLE0sQ0FBdkJFLGtCOzs7QUFFUixTQUFTQyxRQUFULENBQWtCQyxnQkFBbEIsRUFBb0NDLEtBQXBDLEVBQTJDO0FBQ3pDSCxxQkFBbUJFLGdCQUFuQixFQUFxQyxVQUFTRSxjQUFULEVBQXlCO0FBQzVELFFBQUlDLGtDQUFKOztBQUVBLFFBQU1DLHVCQUF3QixPQUFPRixjQUFQLEtBQTBCLFFBQXhEO0FBQUEsUUFDTUcsd0JBQXdCRCxvQkFEOUIsQ0FINEQsQ0FJUjs7QUFFcEQsUUFBSUMscUJBQUosRUFBMkI7QUFDekIsVUFBTUMsVUFBVUosY0FBaEI7QUFBQSxVQUFnQztBQUMxQkssY0FBUSxDQURkO0FBQUEsVUFFTUMsb0JBQW9CQyw2QkFBNkJILE9BQTdCLEVBQXNDTCxLQUF0QyxFQUE2Q00sS0FBN0MsQ0FGMUI7O0FBSUFKLGtDQUE0QkssaUJBQTVCLENBTHlCLENBS3NCO0FBQ2hELEtBTkQsTUFNTztBQUNMLFVBQU1FLFFBQVFSLGNBQWQsQ0FESyxDQUMwQjs7QUFFL0JDLGtDQUE0QixDQUFDTyxLQUFELENBQTVCO0FBQ0Q7O0FBRUQsV0FBT1AseUJBQVA7QUFDRCxHQW5CRDtBQW9CRDs7QUFFRFEsT0FBT0MsT0FBUCxHQUFpQjtBQUNmYjtBQURlLENBQWpCOztBQUlBLFNBQVNVLDRCQUFULENBQXNDSCxPQUF0QyxFQUErQ0wsS0FBL0MsRUFBc0RNLEtBQXRELEVBQTZEO0FBQzNELE1BQUlDLG9CQUFvQixFQUF4Qjs7QUFFQSxNQUFJRixZQUFZLEVBQWhCLEVBQW9CO0FBQ2xCLFFBQU1PLE9BQU9aLE1BQU1hLE9BQU4sQ0FBY1AsS0FBZCxDQUFiOztBQUVBLFFBQUlNLFNBQVMsSUFBYixFQUFtQjtBQUNqQixVQUFNRSxZQUFZUixRQUFRLENBQTFCO0FBQUEsVUFDTVMsd0NBQXdDSCxLQUFLRyxxQ0FBTCxDQUEyQ1YsT0FBM0MsQ0FEOUM7O0FBR0EsVUFBSVUsMENBQTBDLENBQUMsQ0FBL0MsRUFBa0Q7QUFDaERSLDRCQUFvQkMsNkJBQTZCSCxPQUE3QixFQUFzQ0wsS0FBdEMsRUFBNkNjLFNBQTdDLENBQXBCO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsWUFBTUUsbUJBQW1CSixLQUFLSyxpQ0FBTCxDQUF1Q1osT0FBdkMsQ0FBekI7QUFBQSxZQUNNYSxnQ0FBZ0NGLGlCQUFpQkcsZ0JBQWpCLEVBRHRDO0FBQUEsWUFFTUMsT0FBT0wscUNBRmI7QUFBQSxZQUVxRDtBQUMvQ00sZ0JBQVFOLHdDQUF3Q0csNkJBSHREO0FBQUEsWUFHc0Y7QUFDaEZJLHNCQUFjakIsUUFBUWtCLFNBQVIsQ0FBa0IsQ0FBbEIsRUFBcUJILElBQXJCLENBSnBCO0FBQUEsWUFLTUksZUFBZW5CLFFBQVFrQixTQUFSLENBQWtCRixLQUFsQixDQUxyQjtBQUFBLFlBTU1JLHdCQUF3QmpCLDZCQUE2QmMsV0FBN0IsRUFBMEN0QixLQUExQyxFQUFpRGMsU0FBakQsQ0FOOUI7QUFBQSxZQU9NWSx5QkFBeUJsQiw2QkFBNkJnQixZQUE3QixFQUEyQ3hCLEtBQTNDLEVBQWtETSxLQUFsRCxDQVAvQjs7QUFTQUMsNEJBQW9CLEdBQUdvQixNQUFILENBQVVGLHFCQUFWLEVBQWlDRSxNQUFqQyxDQUF3Q1gsZ0JBQXhDLEVBQTBEVyxNQUExRCxDQUFpRUQsc0JBQWpFLENBQXBCO0FBQ0Q7QUFDRixLQWxCRCxNQWtCTztBQUNMLFlBQU0sSUFBSUUsS0FBSixrQ0FBd0N2QixPQUF4QyxTQUFOO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPRSxpQkFBUDtBQUNEIiwiZmlsZSI6InNpZ25pZmljYW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuY29uc3QgdG9rZW5zID0gcmVxdWlyZSgnLi4vdG9rZW5zJyk7XHJcblxyXG5jb25zdCB7IHRva2VuaXNlQnlDYWxsYmFjayB9ID0gdG9rZW5zO1xyXG5cclxuZnVuY3Rpb24gdG9rZW5pc2UodG9rZW5zT3JDb250ZW50cywgcnVsZXMpIHtcclxuICB0b2tlbmlzZUJ5Q2FsbGJhY2sodG9rZW5zT3JDb250ZW50cywgZnVuY3Rpb24odG9rZW5PckNvbnRlbnQpIHtcclxuICAgIGxldCB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzO1xyXG5cclxuICAgIGNvbnN0IHRva2VuT3JDb250ZW50U3RyaW5nID0gKHR5cGVvZiB0b2tlbk9yQ29udGVudCA9PT0gJ3N0cmluZycpLFxyXG4gICAgICAgICAgdG9rZW5PckNvbnRlbnRDb250ZW50ID0gdG9rZW5PckNvbnRlbnRTdHJpbmc7IC8vL1xyXG5cclxuICAgIGlmICh0b2tlbk9yQ29udGVudENvbnRlbnQpIHtcclxuICAgICAgY29uc3QgY29udGVudCA9IHRva2VuT3JDb250ZW50LCAvLy9cclxuICAgICAgICAgICAgZGVwdGggPSAwLFxyXG4gICAgICAgICAgICBzaWduaWZpY2FudFRva2VucyA9IHNpZ25pZmljYW50VG9rZW5zRnJvbUNvbnRlbnQoY29udGVudCwgcnVsZXMsIGRlcHRoKTtcclxuXHJcbiAgICAgIHRva2Vuc09yUmVtYWluaW5nQ29udGVudHMgPSBzaWduaWZpY2FudFRva2VuczsgLy8vXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCB0b2tlbiA9IHRva2VuT3JDb250ZW50OyAgLy8vXHJcblxyXG4gICAgICB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzID0gW3Rva2VuXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdG9rZW5zT3JSZW1haW5pbmdDb250ZW50cztcclxuICB9KTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgdG9rZW5pc2VcclxufTtcclxuXHJcbmZ1bmN0aW9uIHNpZ25pZmljYW50VG9rZW5zRnJvbUNvbnRlbnQoY29udGVudCwgcnVsZXMsIGRlcHRoKSB7XHJcbiAgbGV0IHNpZ25pZmljYW50VG9rZW5zID0gW107XHJcblxyXG4gIGlmIChjb250ZW50ICE9PSAnJykge1xyXG4gICAgY29uc3QgcnVsZSA9IHJ1bGVzLmdldFJ1bGUoZGVwdGgpO1xyXG5cclxuICAgIGlmIChydWxlICE9PSBudWxsKSB7XHJcbiAgICAgIGNvbnN0IG5leHREZXB0aCA9IGRlcHRoICsgMSxcclxuICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudCA9IHJ1bGUuc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudChjb250ZW50KTtcclxuXHJcbiAgICAgIGlmIChzaWduaWZpY2FudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50ID09PSAtMSkge1xyXG4gICAgICAgIHNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnNGcm9tQ29udGVudChjb250ZW50LCBydWxlcywgbmV4dERlcHRoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBzaWduaWZpY2FudFRva2VuID0gcnVsZS5zaWduaWZpY2FudFRva2VuRnJvbVdpdGhpbkNvbnRlbnQoY29udGVudCksXHJcbiAgICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlbkNvbnRlbnRMZW5ndGggPSBzaWduaWZpY2FudFRva2VuLmdldENvbnRlbnRMZW5ndGgoKSxcclxuICAgICAgICAgICAgICBsZWZ0ID0gc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudCwgIC8vL1xyXG4gICAgICAgICAgICAgIHJpZ2h0ID0gc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudCArIHNpZ25pZmljYW50VG9rZW5Db250ZW50TGVuZ3RoLCAgLy8vXHJcbiAgICAgICAgICAgICAgbGVmdENvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZygwLCBsZWZ0KSxcclxuICAgICAgICAgICAgICByaWdodENvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZyhyaWdodCksXHJcbiAgICAgICAgICAgICAgbGVmdFNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnNGcm9tQ29udGVudChsZWZ0Q29udGVudCwgcnVsZXMsIG5leHREZXB0aCksXHJcbiAgICAgICAgICAgICAgcmlnaHRTaWduaWZpY2FudFRva2VucyA9IHNpZ25pZmljYW50VG9rZW5zRnJvbUNvbnRlbnQocmlnaHRDb250ZW50LCBydWxlcywgZGVwdGgpO1xyXG5cclxuICAgICAgICBzaWduaWZpY2FudFRva2VucyA9IFtdLmNvbmNhdChsZWZ0U2lnbmlmaWNhbnRUb2tlbnMpLmNvbmNhdChzaWduaWZpY2FudFRva2VuKS5jb25jYXQocmlnaHRTaWduaWZpY2FudFRva2Vucyk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlcmUgaXMgbm8gcnVsZSB0byBwYXJzZSAnJHtjb250ZW50fScuYCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2lnbmlmaWNhbnRUb2tlbnM7XHJcbn1cclxuIl19