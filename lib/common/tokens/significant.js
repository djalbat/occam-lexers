'use strict';

var tokens = require('../tokens');

var processByCallback = tokens.processByCallback;


function process(tokensOrContents, rules) {
  processByCallback(tokensOrContents, function (tokenOrContent) {
    var tokensOrRemainingContents = void 0;

    var tokenOrContentString = typeof tokenOrContent === 'string',
        tokenOrContentContent = tokenOrContentString; ///

    if (tokenOrContentContent) {
      var content = tokenOrContent,
          ///
      depth = 0,
          significantTokens = significantTokensFromContent(content, rules, depth);

      tokensOrRemainingContents = significantTokens; ///
    } else {
      var token = tokenOrContent; ///

      tokensOrRemainingContents = [token];
    }

    return tokensOrRemainingContents;
  });
}

module.exports = {
  process: process
};

function significantTokensFromContent(content, rules, depth) {
  var significantTokens = [];

  if (content !== '') {
    var rule = rules.getRule(depth);

    if (rule !== null) {
      var nextDepth = depth + 1,
          significantTokenPositionWithinContent = rule.significantTokenPositionWithinContent(content);

      if (significantTokenPositionWithinContent === -1) {
        significantTokens = significantTokensFromContent(content, rules, nextDepth);
      } else {
        var significantToken = rule.significantTokenFromWithinContent(content),
            significantTokenContentLength = significantToken.getContentLength(),
            left = significantTokenPositionWithinContent,
            ///
        right = significantTokenPositionWithinContent + significantTokenContentLength,
            ///
        leftContent = content.substring(0, left),
            rightContent = content.substring(right),
            leftSignificantTokens = significantTokensFromContent(leftContent, rules, nextDepth),
            rightSignificantTokens = significantTokensFromContent(rightContent, rules, depth);

        significantTokens = [].concat(leftSignificantTokens).concat(significantToken).concat(rightSignificantTokens);
      }
    } else {
      throw new Error('There is no rule to parse \'' + content + '\'.');
    }
  }

  return significantTokens;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9jb21tb24vdG9rZW5zL3NpZ25pZmljYW50LmpzIl0sIm5hbWVzIjpbInRva2VucyIsInJlcXVpcmUiLCJwcm9jZXNzQnlDYWxsYmFjayIsInByb2Nlc3MiLCJ0b2tlbnNPckNvbnRlbnRzIiwicnVsZXMiLCJ0b2tlbk9yQ29udGVudCIsInRva2Vuc09yUmVtYWluaW5nQ29udGVudHMiLCJ0b2tlbk9yQ29udGVudFN0cmluZyIsInRva2VuT3JDb250ZW50Q29udGVudCIsImNvbnRlbnQiLCJkZXB0aCIsInNpZ25pZmljYW50VG9rZW5zIiwic2lnbmlmaWNhbnRUb2tlbnNGcm9tQ29udGVudCIsInRva2VuIiwibW9kdWxlIiwiZXhwb3J0cyIsInJ1bGUiLCJnZXRSdWxlIiwibmV4dERlcHRoIiwic2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudCIsInNpZ25pZmljYW50VG9rZW4iLCJzaWduaWZpY2FudFRva2VuRnJvbVdpdGhpbkNvbnRlbnQiLCJzaWduaWZpY2FudFRva2VuQ29udGVudExlbmd0aCIsImdldENvbnRlbnRMZW5ndGgiLCJsZWZ0IiwicmlnaHQiLCJsZWZ0Q29udGVudCIsInN1YnN0cmluZyIsInJpZ2h0Q29udGVudCIsImxlZnRTaWduaWZpY2FudFRva2VucyIsInJpZ2h0U2lnbmlmaWNhbnRUb2tlbnMiLCJjb25jYXQiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsU0FBU0MsUUFBUSxXQUFSLENBQWY7O0lBRVFDLGlCLEdBQXNCRixNLENBQXRCRSxpQjs7O0FBRVIsU0FBU0MsT0FBVCxDQUFpQkMsZ0JBQWpCLEVBQW1DQyxLQUFuQyxFQUEwQztBQUN4Q0gsb0JBQWtCRSxnQkFBbEIsRUFBb0MsVUFBU0UsY0FBVCxFQUF5QjtBQUMzRCxRQUFJQyxrQ0FBSjs7QUFFQSxRQUFNQyx1QkFBd0IsT0FBT0YsY0FBUCxLQUEwQixRQUF4RDtBQUFBLFFBQ01HLHdCQUF3QkQsb0JBRDlCLENBSDJELENBSVA7O0FBRXBELFFBQUlDLHFCQUFKLEVBQTJCO0FBQ3pCLFVBQU1DLFVBQVVKLGNBQWhCO0FBQUEsVUFBZ0M7QUFDMUJLLGNBQVEsQ0FEZDtBQUFBLFVBRU1DLG9CQUFvQkMsNkJBQTZCSCxPQUE3QixFQUFzQ0wsS0FBdEMsRUFBNkNNLEtBQTdDLENBRjFCOztBQUlBSixrQ0FBNEJLLGlCQUE1QixDQUx5QixDQUtzQjtBQUNoRCxLQU5ELE1BTU87QUFDTCxVQUFNRSxRQUFRUixjQUFkLENBREssQ0FDMEI7O0FBRS9CQyxrQ0FBNEIsQ0FBQ08sS0FBRCxDQUE1QjtBQUNEOztBQUVELFdBQU9QLHlCQUFQO0FBQ0QsR0FuQkQ7QUFvQkQ7O0FBRURRLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmI7QUFEZSxDQUFqQjs7QUFJQSxTQUFTVSw0QkFBVCxDQUFzQ0gsT0FBdEMsRUFBK0NMLEtBQS9DLEVBQXNETSxLQUF0RCxFQUE2RDtBQUMzRCxNQUFJQyxvQkFBb0IsRUFBeEI7O0FBRUEsTUFBSUYsWUFBWSxFQUFoQixFQUFvQjtBQUNsQixRQUFNTyxPQUFPWixNQUFNYSxPQUFOLENBQWNQLEtBQWQsQ0FBYjs7QUFFQSxRQUFJTSxTQUFTLElBQWIsRUFBbUI7QUFDakIsVUFBTUUsWUFBWVIsUUFBUSxDQUExQjtBQUFBLFVBQ01TLHdDQUF3Q0gsS0FBS0cscUNBQUwsQ0FBMkNWLE9BQTNDLENBRDlDOztBQUdBLFVBQUlVLDBDQUEwQyxDQUFDLENBQS9DLEVBQWtEO0FBQ2hEUiw0QkFBb0JDLDZCQUE2QkgsT0FBN0IsRUFBc0NMLEtBQXRDLEVBQTZDYyxTQUE3QyxDQUFwQjtBQUNELE9BRkQsTUFFTztBQUNMLFlBQU1FLG1CQUFtQkosS0FBS0ssaUNBQUwsQ0FBdUNaLE9BQXZDLENBQXpCO0FBQUEsWUFDTWEsZ0NBQWdDRixpQkFBaUJHLGdCQUFqQixFQUR0QztBQUFBLFlBRU1DLE9BQU9MLHFDQUZiO0FBQUEsWUFFcUQ7QUFDL0NNLGdCQUFRTix3Q0FBd0NHLDZCQUh0RDtBQUFBLFlBR3NGO0FBQ2hGSSxzQkFBY2pCLFFBQVFrQixTQUFSLENBQWtCLENBQWxCLEVBQXFCSCxJQUFyQixDQUpwQjtBQUFBLFlBS01JLGVBQWVuQixRQUFRa0IsU0FBUixDQUFrQkYsS0FBbEIsQ0FMckI7QUFBQSxZQU1NSSx3QkFBd0JqQiw2QkFBNkJjLFdBQTdCLEVBQTBDdEIsS0FBMUMsRUFBaURjLFNBQWpELENBTjlCO0FBQUEsWUFPTVkseUJBQXlCbEIsNkJBQTZCZ0IsWUFBN0IsRUFBMkN4QixLQUEzQyxFQUFrRE0sS0FBbEQsQ0FQL0I7O0FBU0FDLDRCQUFvQixHQUFHb0IsTUFBSCxDQUFVRixxQkFBVixFQUFpQ0UsTUFBakMsQ0FBd0NYLGdCQUF4QyxFQUEwRFcsTUFBMUQsQ0FBaUVELHNCQUFqRSxDQUFwQjtBQUNEO0FBQ0YsS0FsQkQsTUFrQk87QUFDTCxZQUFNLElBQUlFLEtBQUosa0NBQXdDdkIsT0FBeEMsU0FBTjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0UsaUJBQVA7QUFDRCIsImZpbGUiOiJzaWduaWZpY2FudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IHRva2VucyA9IHJlcXVpcmUoJy4uL3Rva2VucycpO1xyXG5cclxuY29uc3QgeyBwcm9jZXNzQnlDYWxsYmFjayB9ID0gdG9rZW5zO1xyXG5cclxuZnVuY3Rpb24gcHJvY2Vzcyh0b2tlbnNPckNvbnRlbnRzLCBydWxlcykge1xyXG4gIHByb2Nlc3NCeUNhbGxiYWNrKHRva2Vuc09yQ29udGVudHMsIGZ1bmN0aW9uKHRva2VuT3JDb250ZW50KSB7XHJcbiAgICBsZXQgdG9rZW5zT3JSZW1haW5pbmdDb250ZW50cztcclxuXHJcbiAgICBjb25zdCB0b2tlbk9yQ29udGVudFN0cmluZyA9ICh0eXBlb2YgdG9rZW5PckNvbnRlbnQgPT09ICdzdHJpbmcnKSxcclxuICAgICAgICAgIHRva2VuT3JDb250ZW50Q29udGVudCA9IHRva2VuT3JDb250ZW50U3RyaW5nOyAvLy9cclxuXHJcbiAgICBpZiAodG9rZW5PckNvbnRlbnRDb250ZW50KSB7XHJcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSB0b2tlbk9yQ29udGVudCwgLy8vXHJcbiAgICAgICAgICAgIGRlcHRoID0gMCxcclxuICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlbnMgPSBzaWduaWZpY2FudFRva2Vuc0Zyb21Db250ZW50KGNvbnRlbnQsIHJ1bGVzLCBkZXB0aCk7XHJcblxyXG4gICAgICB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzID0gc2lnbmlmaWNhbnRUb2tlbnM7IC8vL1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgdG9rZW4gPSB0b2tlbk9yQ29udGVudDsgIC8vL1xyXG5cclxuICAgICAgdG9rZW5zT3JSZW1haW5pbmdDb250ZW50cyA9IFt0b2tlbl07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRva2Vuc09yUmVtYWluaW5nQ29udGVudHM7XHJcbiAgfSk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIHByb2Nlc3NcclxufTtcclxuXHJcbmZ1bmN0aW9uIHNpZ25pZmljYW50VG9rZW5zRnJvbUNvbnRlbnQoY29udGVudCwgcnVsZXMsIGRlcHRoKSB7XHJcbiAgbGV0IHNpZ25pZmljYW50VG9rZW5zID0gW107XHJcblxyXG4gIGlmIChjb250ZW50ICE9PSAnJykge1xyXG4gICAgY29uc3QgcnVsZSA9IHJ1bGVzLmdldFJ1bGUoZGVwdGgpO1xyXG5cclxuICAgIGlmIChydWxlICE9PSBudWxsKSB7XHJcbiAgICAgIGNvbnN0IG5leHREZXB0aCA9IGRlcHRoICsgMSxcclxuICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudCA9IHJ1bGUuc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudChjb250ZW50KTtcclxuXHJcbiAgICAgIGlmIChzaWduaWZpY2FudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50ID09PSAtMSkge1xyXG4gICAgICAgIHNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnNGcm9tQ29udGVudChjb250ZW50LCBydWxlcywgbmV4dERlcHRoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBzaWduaWZpY2FudFRva2VuID0gcnVsZS5zaWduaWZpY2FudFRva2VuRnJvbVdpdGhpbkNvbnRlbnQoY29udGVudCksXHJcbiAgICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlbkNvbnRlbnRMZW5ndGggPSBzaWduaWZpY2FudFRva2VuLmdldENvbnRlbnRMZW5ndGgoKSxcclxuICAgICAgICAgICAgICBsZWZ0ID0gc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudCwgIC8vL1xyXG4gICAgICAgICAgICAgIHJpZ2h0ID0gc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudCArIHNpZ25pZmljYW50VG9rZW5Db250ZW50TGVuZ3RoLCAgLy8vXHJcbiAgICAgICAgICAgICAgbGVmdENvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZygwLCBsZWZ0KSxcclxuICAgICAgICAgICAgICByaWdodENvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZyhyaWdodCksXHJcbiAgICAgICAgICAgICAgbGVmdFNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnNGcm9tQ29udGVudChsZWZ0Q29udGVudCwgcnVsZXMsIG5leHREZXB0aCksXHJcbiAgICAgICAgICAgICAgcmlnaHRTaWduaWZpY2FudFRva2VucyA9IHNpZ25pZmljYW50VG9rZW5zRnJvbUNvbnRlbnQocmlnaHRDb250ZW50LCBydWxlcywgZGVwdGgpO1xyXG5cclxuICAgICAgICBzaWduaWZpY2FudFRva2VucyA9IFtdLmNvbmNhdChsZWZ0U2lnbmlmaWNhbnRUb2tlbnMpLmNvbmNhdChzaWduaWZpY2FudFRva2VuKS5jb25jYXQocmlnaHRTaWduaWZpY2FudFRva2Vucyk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlcmUgaXMgbm8gcnVsZSB0byBwYXJzZSAnJHtjb250ZW50fScuYCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2lnbmlmaWNhbnRUb2tlbnM7XHJcbn1cclxuIl19