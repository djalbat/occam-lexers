'use strict';

var tokens = require('../tokens');

var passGivenCallback = tokens.passGivenCallback;


function pass(tokensOrContents, rules) {
  passGivenCallback(tokensOrContents, function (content) {
    return significantTokensFromWithinContent(content, rules);
  });
}

module.exports = {
  pass: pass
};

function significantTokensFromWithinContent(content, rules) {
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  var significantTokens = [];

  if (content !== '') {
    var rule = rules.getRule(depth);

    if (rule !== null) {
      var nextDepth = depth + 1,
          significantTokenPositionWithinContent = rule.significantTokenPositionWithinContent(content);

      if (significantTokenPositionWithinContent === -1) {
        significantTokens = significantTokensFromWithinContent(content, rules, nextDepth);
      } else {
        var significantToken = rule.significantTokenFromWithinContent(content),
            significantTokenContentLength = significantToken.getContentLength(),
            left = significantTokenPositionWithinContent,
            ///
        right = significantTokenPositionWithinContent + significantTokenContentLength,
            ///
        leftContent = content.substring(0, left),
            rightContent = content.substring(right),
            leftSignificantTokens = significantTokensFromWithinContent(leftContent, rules, nextDepth),
            rightSignificantTokens = significantTokensFromWithinContent(rightContent, rules, depth);

        significantTokens = [].concat(leftSignificantTokens).concat(significantToken).concat(rightSignificantTokens);
      }
    } else {
      throw new Error('There is no rule to parse \'' + content + '\'.');
    }
  }

  return significantTokens;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9jb21tb24vdG9rZW5zL3NpZ25pZmljYW50LmpzIl0sIm5hbWVzIjpbInRva2VucyIsInJlcXVpcmUiLCJwYXNzR2l2ZW5DYWxsYmFjayIsInBhc3MiLCJ0b2tlbnNPckNvbnRlbnRzIiwicnVsZXMiLCJjb250ZW50Iiwic2lnbmlmaWNhbnRUb2tlbnNGcm9tV2l0aGluQ29udGVudCIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZXB0aCIsInNpZ25pZmljYW50VG9rZW5zIiwicnVsZSIsImdldFJ1bGUiLCJuZXh0RGVwdGgiLCJzaWduaWZpY2FudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50Iiwic2lnbmlmaWNhbnRUb2tlbiIsInNpZ25pZmljYW50VG9rZW5Gcm9tV2l0aGluQ29udGVudCIsInNpZ25pZmljYW50VG9rZW5Db250ZW50TGVuZ3RoIiwiZ2V0Q29udGVudExlbmd0aCIsImxlZnQiLCJyaWdodCIsImxlZnRDb250ZW50Iiwic3Vic3RyaW5nIiwicmlnaHRDb250ZW50IiwibGVmdFNpZ25pZmljYW50VG9rZW5zIiwicmlnaHRTaWduaWZpY2FudFRva2VucyIsImNvbmNhdCIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxTQUFTQyxRQUFRLFdBQVIsQ0FBZjs7SUFFUUMsaUIsR0FBc0JGLE0sQ0FBdEJFLGlCOzs7QUFFUixTQUFTQyxJQUFULENBQWNDLGdCQUFkLEVBQWdDQyxLQUFoQyxFQUF1QztBQUNyQ0gsb0JBQWtCRSxnQkFBbEIsRUFBb0MsVUFBU0UsT0FBVCxFQUFrQjtBQUFFLFdBQU9DLG1DQUFtQ0QsT0FBbkMsRUFBNENELEtBQTVDLENBQVA7QUFBNEQsR0FBcEg7QUFDRDs7QUFFREcsT0FBT0MsT0FBUCxHQUFpQjtBQUNmTixRQUFNQTtBQURTLENBQWpCOztBQUlBLFNBQVNJLGtDQUFULENBQTRDRCxPQUE1QyxFQUFxREQsS0FBckQsRUFBdUU7QUFBQSxNQUFYSyxLQUFXLHVFQUFILENBQUc7O0FBQ3JFLE1BQUlDLG9CQUFvQixFQUF4Qjs7QUFFQSxNQUFJTCxZQUFZLEVBQWhCLEVBQW9CO0FBQ2xCLFFBQU1NLE9BQU9QLE1BQU1RLE9BQU4sQ0FBY0gsS0FBZCxDQUFiOztBQUVBLFFBQUlFLFNBQVMsSUFBYixFQUFtQjtBQUNqQixVQUFNRSxZQUFZSixRQUFRLENBQTFCO0FBQUEsVUFDTUssd0NBQXdDSCxLQUFLRyxxQ0FBTCxDQUEyQ1QsT0FBM0MsQ0FEOUM7O0FBR0EsVUFBSVMsMENBQTBDLENBQUMsQ0FBL0MsRUFBa0Q7QUFDaERKLDRCQUFvQkosbUNBQW1DRCxPQUFuQyxFQUE0Q0QsS0FBNUMsRUFBbURTLFNBQW5ELENBQXBCO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsWUFBTUUsbUJBQW1CSixLQUFLSyxpQ0FBTCxDQUF1Q1gsT0FBdkMsQ0FBekI7QUFBQSxZQUNNWSxnQ0FBZ0NGLGlCQUFpQkcsZ0JBQWpCLEVBRHRDO0FBQUEsWUFFTUMsT0FBT0wscUNBRmI7QUFBQSxZQUVxRDtBQUMvQ00sZ0JBQVFOLHdDQUF3Q0csNkJBSHREO0FBQUEsWUFHc0Y7QUFDaEZJLHNCQUFjaEIsUUFBUWlCLFNBQVIsQ0FBa0IsQ0FBbEIsRUFBcUJILElBQXJCLENBSnBCO0FBQUEsWUFLTUksZUFBZWxCLFFBQVFpQixTQUFSLENBQWtCRixLQUFsQixDQUxyQjtBQUFBLFlBTU1JLHdCQUF3QmxCLG1DQUFtQ2UsV0FBbkMsRUFBZ0RqQixLQUFoRCxFQUF1RFMsU0FBdkQsQ0FOOUI7QUFBQSxZQU9NWSx5QkFBeUJuQixtQ0FBbUNpQixZQUFuQyxFQUFpRG5CLEtBQWpELEVBQXdESyxLQUF4RCxDQVAvQjs7QUFTQUMsNEJBQW9CLEdBQUdnQixNQUFILENBQVVGLHFCQUFWLEVBQWlDRSxNQUFqQyxDQUF3Q1gsZ0JBQXhDLEVBQTBEVyxNQUExRCxDQUFpRUQsc0JBQWpFLENBQXBCO0FBQ0Q7QUFDRixLQWxCRCxNQWtCTztBQUNMLFlBQU0sSUFBSUUsS0FBSixrQ0FBd0N0QixPQUF4QyxTQUFOO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPSyxpQkFBUDtBQUNEIiwiZmlsZSI6InNpZ25pZmljYW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuY29uc3QgdG9rZW5zID0gcmVxdWlyZSgnLi4vdG9rZW5zJyk7XHJcblxyXG5jb25zdCB7IHBhc3NHaXZlbkNhbGxiYWNrIH0gPSB0b2tlbnM7XHJcblxyXG5mdW5jdGlvbiBwYXNzKHRva2Vuc09yQ29udGVudHMsIHJ1bGVzKSB7XHJcbiAgcGFzc0dpdmVuQ2FsbGJhY2sodG9rZW5zT3JDb250ZW50cywgZnVuY3Rpb24oY29udGVudCkgeyByZXR1cm4gc2lnbmlmaWNhbnRUb2tlbnNGcm9tV2l0aGluQ29udGVudChjb250ZW50LCBydWxlcyk7IH0pO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBwYXNzOiBwYXNzXHJcbn07XHJcblxyXG5mdW5jdGlvbiBzaWduaWZpY2FudFRva2Vuc0Zyb21XaXRoaW5Db250ZW50KGNvbnRlbnQsIHJ1bGVzLCBkZXB0aCA9IDApIHtcclxuICBsZXQgc2lnbmlmaWNhbnRUb2tlbnMgPSBbXTtcclxuXHJcbiAgaWYgKGNvbnRlbnQgIT09ICcnKSB7XHJcbiAgICBjb25zdCBydWxlID0gcnVsZXMuZ2V0UnVsZShkZXB0aCk7XHJcblxyXG4gICAgaWYgKHJ1bGUgIT09IG51bGwpIHtcclxuICAgICAgY29uc3QgbmV4dERlcHRoID0gZGVwdGggKyAxLFxyXG4gICAgICAgICAgICBzaWduaWZpY2FudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50ID0gcnVsZS5zaWduaWZpY2FudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50KGNvbnRlbnQpO1xyXG5cclxuICAgICAgaWYgKHNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQgPT09IC0xKSB7XHJcbiAgICAgICAgc2lnbmlmaWNhbnRUb2tlbnMgPSBzaWduaWZpY2FudFRva2Vuc0Zyb21XaXRoaW5Db250ZW50KGNvbnRlbnQsIHJ1bGVzLCBuZXh0RGVwdGgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHNpZ25pZmljYW50VG9rZW4gPSBydWxlLnNpZ25pZmljYW50VG9rZW5Gcm9tV2l0aGluQ29udGVudChjb250ZW50KSxcclxuICAgICAgICAgICAgICBzaWduaWZpY2FudFRva2VuQ29udGVudExlbmd0aCA9IHNpZ25pZmljYW50VG9rZW4uZ2V0Q29udGVudExlbmd0aCgpLFxyXG4gICAgICAgICAgICAgIGxlZnQgPSBzaWduaWZpY2FudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50LCAgLy8vXHJcbiAgICAgICAgICAgICAgcmlnaHQgPSBzaWduaWZpY2FudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50ICsgc2lnbmlmaWNhbnRUb2tlbkNvbnRlbnRMZW5ndGgsICAvLy9cclxuICAgICAgICAgICAgICBsZWZ0Q29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKDAsIGxlZnQpLFxyXG4gICAgICAgICAgICAgIHJpZ2h0Q29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKHJpZ2h0KSxcclxuICAgICAgICAgICAgICBsZWZ0U2lnbmlmaWNhbnRUb2tlbnMgPSBzaWduaWZpY2FudFRva2Vuc0Zyb21XaXRoaW5Db250ZW50KGxlZnRDb250ZW50LCBydWxlcywgbmV4dERlcHRoKSxcclxuICAgICAgICAgICAgICByaWdodFNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnNGcm9tV2l0aGluQ29udGVudChyaWdodENvbnRlbnQsIHJ1bGVzLCBkZXB0aCk7XHJcblxyXG4gICAgICAgIHNpZ25pZmljYW50VG9rZW5zID0gW10uY29uY2F0KGxlZnRTaWduaWZpY2FudFRva2VucykuY29uY2F0KHNpZ25pZmljYW50VG9rZW4pLmNvbmNhdChyaWdodFNpZ25pZmljYW50VG9rZW5zKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGVyZSBpcyBubyBydWxlIHRvIHBhcnNlICcke2NvbnRlbnR9Jy5gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBzaWduaWZpY2FudFRva2VucztcclxufVxyXG4iXX0=