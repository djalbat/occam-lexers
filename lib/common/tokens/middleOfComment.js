'use strict';

var tokens = require('../tokens'),
    MiddleOfMultiLineCommentToken = require('../token/nonSignificant/comment/multiLine/middleOf'),
    MiddleOfSingleLineCommentToken = require('../token/nonSignificant/comment/singleLine/middleOf');

var tokeniseByCallback = tokens.tokeniseByCallback;


function reTokenise(tokensOrContents) {
  tokeniseByCallback(tokensOrContents, function (tokenOrContent) {
    var commentTokensOrRemainingContents = [];

    reTokeniseMiddleOfCommentTokens(commentTokensOrRemainingContents, tokenOrContent);

    var tokensOrRemainingContents = commentTokensOrRemainingContents; ///

    return tokensOrRemainingContents;
  });
}

module.exports = {
  reTokenise: reTokenise
};

function reTokeniseMiddleOfCommentTokens(commentTokensOrRemainingContents, tokenOrContent) {
  var tokenOrContentString = typeof tokenOrContent === 'string',
      tokenOrContentContent = tokenOrContentString; ///

  if (tokenOrContentContent) {
    var remainingContent = tokenOrContent; ///

    commentTokensOrRemainingContents.push(remainingContent);
  } else {
    var token = tokenOrContent,
        ///
    tokenMiddleOfCommentToken = token.isMiddleOfCommentToken();

    if (tokenMiddleOfCommentToken) {
      var middleOfCommentToken = token,
          ///
      middleOfCommentTokenMultiLineCommentToken = middleOfCommentToken.isMultiLineCommentToken(),
          middleOfCommentTokenSingleLineCommentToken = !middleOfCommentTokenMultiLineCommentToken; ///

      if (false) {} else if (middleOfCommentTokenMultiLineCommentToken) {
        commentTokensOrRemainingContents.push(token);
      } else if (middleOfCommentTokenSingleLineCommentToken) {
        commentTokensOrRemainingContents.push(token);
      } else {
        commentTokensOrRemainingContents.push(middleOfCommentToken);
      }
    } else {
      commentTokensOrRemainingContents.push(token);
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9jb21tb24vdG9rZW5zL21pZGRsZU9mQ29tbWVudC5qcyJdLCJuYW1lcyI6WyJ0b2tlbnMiLCJyZXF1aXJlIiwiTWlkZGxlT2ZNdWx0aUxpbmVDb21tZW50VG9rZW4iLCJNaWRkbGVPZlNpbmdsZUxpbmVDb21tZW50VG9rZW4iLCJ0b2tlbmlzZUJ5Q2FsbGJhY2siLCJyZVRva2VuaXNlIiwidG9rZW5zT3JDb250ZW50cyIsInRva2VuT3JDb250ZW50IiwiY29tbWVudFRva2Vuc09yUmVtYWluaW5nQ29udGVudHMiLCJyZVRva2VuaXNlTWlkZGxlT2ZDb21tZW50VG9rZW5zIiwidG9rZW5zT3JSZW1haW5pbmdDb250ZW50cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0b2tlbk9yQ29udGVudFN0cmluZyIsInRva2VuT3JDb250ZW50Q29udGVudCIsInJlbWFpbmluZ0NvbnRlbnQiLCJwdXNoIiwidG9rZW4iLCJ0b2tlbk1pZGRsZU9mQ29tbWVudFRva2VuIiwiaXNNaWRkbGVPZkNvbW1lbnRUb2tlbiIsIm1pZGRsZU9mQ29tbWVudFRva2VuIiwibWlkZGxlT2ZDb21tZW50VG9rZW5NdWx0aUxpbmVDb21tZW50VG9rZW4iLCJpc011bHRpTGluZUNvbW1lbnRUb2tlbiIsIm1pZGRsZU9mQ29tbWVudFRva2VuU2luZ2xlTGluZUNvbW1lbnRUb2tlbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsU0FBU0MsUUFBUSxXQUFSLENBQWY7QUFBQSxJQUNNQyxnQ0FBZ0NELFFBQVEsb0RBQVIsQ0FEdEM7QUFBQSxJQUVNRSxpQ0FBaUNGLFFBQVEscURBQVIsQ0FGdkM7O0lBSVFHLGtCLEdBQXVCSixNLENBQXZCSSxrQjs7O0FBRVIsU0FBU0MsVUFBVCxDQUFvQkMsZ0JBQXBCLEVBQXNDO0FBQ3BDRixxQkFBbUJFLGdCQUFuQixFQUFxQyxVQUFTQyxjQUFULEVBQXlCO0FBQzVELFFBQU1DLG1DQUFtQyxFQUF6Qzs7QUFFQUMsb0NBQWdDRCxnQ0FBaEMsRUFBa0VELGNBQWxFOztBQUVBLFFBQU1HLDRCQUE0QkYsZ0NBQWxDLENBTDRELENBS1E7O0FBRXBFLFdBQU9FLHlCQUFQO0FBQ0QsR0FSRDtBQVNEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZQO0FBRGUsQ0FBakI7O0FBSUEsU0FBU0ksK0JBQVQsQ0FBeUNELGdDQUF6QyxFQUEyRUQsY0FBM0UsRUFBMkY7QUFDekYsTUFBTU0sdUJBQXdCLE9BQU9OLGNBQVAsS0FBMEIsUUFBeEQ7QUFBQSxNQUNNTyx3QkFBd0JELG9CQUQ5QixDQUR5RixDQUVyQzs7QUFFcEQsTUFBSUMscUJBQUosRUFBMkI7QUFDekIsUUFBTUMsbUJBQW1CUixjQUF6QixDQUR5QixDQUNpQjs7QUFFMUNDLHFDQUFpQ1EsSUFBakMsQ0FBc0NELGdCQUF0QztBQUNELEdBSkQsTUFJTztBQUNMLFFBQU1FLFFBQVFWLGNBQWQ7QUFBQSxRQUErQjtBQUN6QlcsZ0NBQTRCRCxNQUFNRSxzQkFBTixFQURsQzs7QUFHQSxRQUFJRCx5QkFBSixFQUErQjtBQUM3QixVQUFNRSx1QkFBdUJILEtBQTdCO0FBQUEsVUFBb0M7QUFDOUJJLGtEQUE0Q0QscUJBQXFCRSx1QkFBckIsRUFEbEQ7QUFBQSxVQUVNQyw2Q0FBNkMsQ0FBQ0YseUNBRnBELENBRDZCLENBR2tFOztBQUUvRixVQUFJLEtBQUosRUFBVyxDQUVWLENBRkQsTUFFTyxJQUFJQSx5Q0FBSixFQUErQztBQUNwRGIseUNBQWlDUSxJQUFqQyxDQUFzQ0MsS0FBdEM7QUFDRCxPQUZNLE1BRUEsSUFBSU0sMENBQUosRUFBZ0Q7QUFDckRmLHlDQUFpQ1EsSUFBakMsQ0FBc0NDLEtBQXRDO0FBQ0QsT0FGTSxNQUVBO0FBQ0xULHlDQUFpQ1EsSUFBakMsQ0FBc0NJLG9CQUF0QztBQUNEO0FBQ0YsS0FkRCxNQWNPO0FBQ0xaLHVDQUFpQ1EsSUFBakMsQ0FBc0NDLEtBQXRDO0FBQ0Q7QUFDRjtBQUNGIiwiZmlsZSI6Im1pZGRsZU9mQ29tbWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IHRva2VucyA9IHJlcXVpcmUoJy4uL3Rva2VucycpLFxyXG4gICAgICBNaWRkbGVPZk11bHRpTGluZUNvbW1lbnRUb2tlbiA9IHJlcXVpcmUoJy4uL3Rva2VuL25vblNpZ25pZmljYW50L2NvbW1lbnQvbXVsdGlMaW5lL21pZGRsZU9mJyksXHJcbiAgICAgIE1pZGRsZU9mU2luZ2xlTGluZUNvbW1lbnRUb2tlbiA9IHJlcXVpcmUoJy4uL3Rva2VuL25vblNpZ25pZmljYW50L2NvbW1lbnQvc2luZ2xlTGluZS9taWRkbGVPZicpO1xyXG5cclxuY29uc3QgeyB0b2tlbmlzZUJ5Q2FsbGJhY2sgfSA9IHRva2VucztcclxuXHJcbmZ1bmN0aW9uIHJlVG9rZW5pc2UodG9rZW5zT3JDb250ZW50cykge1xyXG4gIHRva2VuaXNlQnlDYWxsYmFjayh0b2tlbnNPckNvbnRlbnRzLCBmdW5jdGlvbih0b2tlbk9yQ29udGVudCkge1xyXG4gICAgY29uc3QgY29tbWVudFRva2Vuc09yUmVtYWluaW5nQ29udGVudHMgPSBbXTtcclxuXHJcbiAgICByZVRva2VuaXNlTWlkZGxlT2ZDb21tZW50VG9rZW5zKGNvbW1lbnRUb2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzLCB0b2tlbk9yQ29udGVudCk7XHJcblxyXG4gICAgY29uc3QgdG9rZW5zT3JSZW1haW5pbmdDb250ZW50cyA9IGNvbW1lbnRUb2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzOyAvLy9cclxuXHJcbiAgICByZXR1cm4gdG9rZW5zT3JSZW1haW5pbmdDb250ZW50cztcclxuICB9KTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgcmVUb2tlbmlzZVxyXG59O1xyXG5cclxuZnVuY3Rpb24gcmVUb2tlbmlzZU1pZGRsZU9mQ29tbWVudFRva2Vucyhjb21tZW50VG9rZW5zT3JSZW1haW5pbmdDb250ZW50cywgdG9rZW5PckNvbnRlbnQpIHtcclxuICBjb25zdCB0b2tlbk9yQ29udGVudFN0cmluZyA9ICh0eXBlb2YgdG9rZW5PckNvbnRlbnQgPT09ICdzdHJpbmcnKSxcclxuICAgICAgICB0b2tlbk9yQ29udGVudENvbnRlbnQgPSB0b2tlbk9yQ29udGVudFN0cmluZzsgLy8vXHJcblxyXG4gIGlmICh0b2tlbk9yQ29udGVudENvbnRlbnQpIHtcclxuICAgIGNvbnN0IHJlbWFpbmluZ0NvbnRlbnQgPSB0b2tlbk9yQ29udGVudDsgIC8vL1xyXG5cclxuICAgIGNvbW1lbnRUb2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzLnB1c2gocmVtYWluaW5nQ29udGVudCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnN0IHRva2VuID0gdG9rZW5PckNvbnRlbnQsICAvLy9cclxuICAgICAgICAgIHRva2VuTWlkZGxlT2ZDb21tZW50VG9rZW4gPSB0b2tlbi5pc01pZGRsZU9mQ29tbWVudFRva2VuKCk7XHJcblxyXG4gICAgaWYgKHRva2VuTWlkZGxlT2ZDb21tZW50VG9rZW4pIHtcclxuICAgICAgY29uc3QgbWlkZGxlT2ZDb21tZW50VG9rZW4gPSB0b2tlbiwgLy8vXHJcbiAgICAgICAgICAgIG1pZGRsZU9mQ29tbWVudFRva2VuTXVsdGlMaW5lQ29tbWVudFRva2VuID0gbWlkZGxlT2ZDb21tZW50VG9rZW4uaXNNdWx0aUxpbmVDb21tZW50VG9rZW4oKSxcclxuICAgICAgICAgICAgbWlkZGxlT2ZDb21tZW50VG9rZW5TaW5nbGVMaW5lQ29tbWVudFRva2VuID0gIW1pZGRsZU9mQ29tbWVudFRva2VuTXVsdGlMaW5lQ29tbWVudFRva2VuOyAvLy9cclxuXHJcbiAgICAgIGlmIChmYWxzZSkge1xyXG5cclxuICAgICAgfSBlbHNlIGlmIChtaWRkbGVPZkNvbW1lbnRUb2tlbk11bHRpTGluZUNvbW1lbnRUb2tlbikge1xyXG4gICAgICAgIGNvbW1lbnRUb2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzLnB1c2godG9rZW4pO1xyXG4gICAgICB9IGVsc2UgaWYgKG1pZGRsZU9mQ29tbWVudFRva2VuU2luZ2xlTGluZUNvbW1lbnRUb2tlbikge1xyXG4gICAgICAgIGNvbW1lbnRUb2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzLnB1c2godG9rZW4pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbW1lbnRUb2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzLnB1c2gobWlkZGxlT2ZDb21tZW50VG9rZW4pO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb21tZW50VG9rZW5zT3JSZW1haW5pbmdDb250ZW50cy5wdXNoKHRva2VuKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19