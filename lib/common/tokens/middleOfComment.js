'use strict';

var tokens = require('../tokens'),
    MiddleOfMultiLineCommentToken = require('../token/nonSignificant/comment/multiLine/middleOf'),
    MiddleOfSingleLineCommentToken = require('../token/nonSignificant/comment/singleLine/middleOf'),
    HyperlinkInMultiLineCommentToken = require('../token/nonSignificant/comment/multiLine/hyperlinkIn'),
    HyperlinkInSingleLineCommentToken = require('../token/nonSignificant/comment/singleLine/hyperlinkIn');

var processByCallback = tokens.processByCallback;


function postProcess(tokensOrContents) {
  processByCallback(tokensOrContents, function (tokenOrContent) {
    var commentTokensOrRemainingContents = [];

    postProcessMiddleOfCommentTokens(commentTokensOrRemainingContents, tokenOrContent);

    var tokensOrRemainingContents = commentTokensOrRemainingContents; ///

    return tokensOrRemainingContents;
  });
}

module.exports = {
  postProcess: postProcess
};

function postProcessMiddleOfCommentTokens(commentTokensOrRemainingContents, tokenOrContent) {
  var tokenOrContentString = typeof tokenOrContent === 'string',
      tokenOrContentContent = tokenOrContentString; ///

  if (tokenOrContentContent) {
    var remainingContent = tokenOrContent; ///

    commentTokensOrRemainingContents.push(remainingContent);
  } else {
    var token = tokenOrContent,
        ///
    tokenMiddleOfCommentToken = token.isMiddleOfCommentToken();

    if (tokenMiddleOfCommentToken) {
      var middleOfCommentToken = token,
          ///
      middleOfCommentTokenMultiLineCommentToken = middleOfCommentToken.isMultiLineCommentToken(),
          middleOfCommentTokenSingleLineCommentToken = !middleOfCommentTokenMultiLineCommentToken; ///

      if (false) {} else if (middleOfCommentTokenMultiLineCommentToken) {
        var content = middleOfCommentToken.getContent(),
            ///
        hyperlinkInMultiLineCommentTokenPosition = HyperlinkInMultiLineCommentToken.positionWithinContent(content);

        if (hyperlinkInMultiLineCommentTokenPosition > -1) {
          processHyperlinkInMultiLineCommentToken(commentTokensOrRemainingContents, content);
        } else {
          commentTokensOrRemainingContents.push(token);
        }
      } else if (middleOfCommentTokenSingleLineCommentToken) {
        var _content = middleOfCommentToken.getContent(),
            ///
        hyperlinkInSingleLineCommentTokenPosition = HyperlinkInSingleLineCommentToken.positionWithinContent(_content);

        if (hyperlinkInSingleLineCommentTokenPosition > -1) {
          processHyperlinkInSingleLineCommentToken(commentTokensOrRemainingContents, _content);
        } else {
          commentTokensOrRemainingContents.push(token);
        }
      } else {
        commentTokensOrRemainingContents.push(middleOfCommentToken);
      }
    } else {
      commentTokensOrRemainingContents.push(token);
    }
  }
}

function processHyperlinkInMultiLineCommentToken(commentTokensOrRemainingContents, content) {
  processHyperlinkInCommentToken(HyperlinkInMultiLineCommentToken, MiddleOfMultiLineCommentToken, commentTokensOrRemainingContents, content);
}

function processHyperlinkInSingleLineCommentToken(commentTokensOrRemainingContents, content) {
  processHyperlinkInCommentToken(HyperlinkInSingleLineCommentToken, MiddleOfSingleLineCommentToken, commentTokensOrRemainingContents, content);
}

function processHyperlinkInCommentToken(HyperlinkInCommentToken, MiddleOfCommentToken, commentTokensOrRemainingContents, content) {
  var hyperlinkInCommentToken = HyperlinkInCommentToken.fromWithinContent(content),
      position = HyperlinkInCommentToken.positionWithinContent(content),
      ///
  contentLength = hyperlinkInCommentToken.getContentLength(),
      left = position,
      right = position + contentLength,
      leftContent = content.substring(0, left),
      rightContent = content.substring(right),
      leftContentLength = leftContent.length,
      rightContentLength = rightContent.length;

  if (leftContentLength > 0) {
    var _content2 = leftContent,
        ///
    middleOfCommentToken = MiddleOfCommentToken.fromContent(_content2);

    commentTokensOrRemainingContents.push(middleOfCommentToken);
  }

  commentTokensOrRemainingContents.push(hyperlinkInCommentToken);

  if (rightContentLength > 0) {
    var _content3 = rightContent,
        ///
    _middleOfCommentToken = MiddleOfCommentToken.fromContent(_content3),
        tokenOrContent = _middleOfCommentToken; ///

    postProcessMiddleOfCommentTokens(commentTokensOrRemainingContents, tokenOrContent);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,