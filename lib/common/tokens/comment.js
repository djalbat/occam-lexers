'use strict';

var types = require('../types'),
    tokens = require('../tokens'),
    EndOfMultiLineCommentToken = require('../token/nonSignificant/comment/multiLine/endOf'),
    StartOfMultiLineCommentToken = require('../token/nonSignificant/comment/multiLine/startOf'),
    MiddleOfMultiLineCommentToken = require('../token/nonSignificant/comment/multiLine/middleOf'),
    HyperlinkMultiLineCommentToken = require('../token/nonSignificant/comment/multiLine/hyperlink'),
    StartOfSingleLineCommentToken = require('../token/nonSignificant/comment/singleLine/startOf'),
    MiddleOfSingleLineCommentToken = require('../token/nonSignificant/comment/singleLine/middleOf'),
    HyperlinkSingleLineCommentToken = require('../token/nonSignificant/comment/singleLine/hyperlink');

var multiLineCommentType = types.multiLineCommentType,
    singleLineCommentType = types.singleLineCommentType,
    processByCallback = tokens.processByCallback;


function process(tokensOrContents, commentType) {
  processByCallback(tokensOrContents, function (tokenOrContent) {
    var commentTokensOrRemainingContents = [];

    commentType = commentTokensOrRemainingContentsFromTokenOrContent(commentTokensOrRemainingContents, tokenOrContent, commentType);

    var tokensOrRemainingContents = commentTokensOrRemainingContents; ///

    return tokensOrRemainingContents;
  });

  return commentType;
}

module.exports = {
  process: process
};

function commentTokensOrRemainingContentsFromTokenOrContent(commentTokensOrRemainingContents, tokenOrContent, commentType) {
  var tokenOrContentContent = typeof tokenOrContent === 'string';

  if (tokenOrContentContent) {
    var content = tokenOrContent; ///

    if (false) {} else if (commentType === singleLineCommentType) {
      var hyperlinkSingleLineCommentTokenPosition = HyperlinkSingleLineCommentToken.positionWithinContent(content);

      if (hyperlinkSingleLineCommentTokenPosition > -1) {
        hyperlinkCommentTokenFromContent(HyperlinkSingleLineCommentToken, MiddleOfSingleLineCommentToken, commentTokensOrRemainingContents, commentType, content);
      } else {
        var middleOfSingleLineCommentToken = MiddleOfSingleLineCommentToken.fromContent(content);

        commentTokensOrRemainingContents.push(middleOfSingleLineCommentToken);
      }
    } else if (commentType === multiLineCommentType) {
      var hyperlinkMultiLineCommentTokenPosition = HyperlinkMultiLineCommentToken.positionWithinContent(content);

      if (hyperlinkMultiLineCommentTokenPosition > -1) {
        hyperlinkCommentTokenFromContent(HyperlinkMultiLineCommentToken, MiddleOfMultiLineCommentToken, commentTokensOrRemainingContents, commentType, content);
      } else {
        var endOfMultiLineCommentTokenPosition = EndOfMultiLineCommentToken.positionWithinContent(content);

        if (endOfMultiLineCommentTokenPosition > -1) {
          endOfCommentTokenFromContent(EndOfMultiLineCommentToken, EndOfMultiLineCommentToken, commentTokensOrRemainingContents, content);

          commentType = null; ///
        } else {
          var middleOfMultiLineCommentToken = MiddleOfMultiLineCommentToken.fromContent(content);

          commentTokensOrRemainingContents.push(middleOfMultiLineCommentToken);
        }
      }
    } else {
      var startOfSingleLineCommentTokenPosition = StartOfSingleLineCommentToken.positionWithinContent(content),
          startOfMultiLineCommentTokenPosition = StartOfMultiLineCommentToken.positionWithinContent(content);

      if (startOfSingleLineCommentTokenPosition > -1 && startOfMultiLineCommentTokenPosition > -1) {
        if (false) {} else if (startOfSingleLineCommentTokenPosition < startOfMultiLineCommentTokenPosition) {
          commentType = singleLineCommentType; ///

          startOfCommentTokenFromContent(StartOfSingleLineCommentToken, commentTokensOrRemainingContents, commentType, content);
        } else if (startOfMultiLineCommentTokenPosition < startOfSingleLineCommentTokenPosition) {
          commentType = multiLineCommentType; ///

          startOfCommentTokenFromContent(StartOfMultiLineCommentToken, commentTokensOrRemainingContents, commentType, content);
        }
      } else if (startOfSingleLineCommentTokenPosition > -1) {
        commentType = singleLineCommentType; ///

        startOfCommentTokenFromContent(StartOfSingleLineCommentToken, commentTokensOrRemainingContents, commentType, content);
      } else if (startOfMultiLineCommentTokenPosition > -1) {
        commentType = multiLineCommentType; ///

        startOfCommentTokenFromContent(StartOfMultiLineCommentToken, commentTokensOrRemainingContents, commentType, content);
      } else {
        var remainingContent = content; ///

        commentTokensOrRemainingContents.push(remainingContent);
      }
    }
  } else {
    var token = tokenOrContent,
        ///
    tokenEndOfLineToken = token.isEndOfLineToken();

    if (tokenEndOfLineToken) {
      var commentTypeSingleLineCommentType = commentType === singleLineCommentType;

      if (commentTypeSingleLineCommentType) {
        commentType = null;
      }
    }

    commentTokensOrRemainingContents.push(token);
  }

  return commentType;
}

function startOfCommentTokenFromContent(StartOfCommentToken, commentTokensOrRemainingContents, commentType, content) {
  var startOfSingleLineCommentToken = StartOfCommentToken.fromWithinContent(content),
      position = StartOfCommentToken.positionWithinContent(content),
      ///
  contentLength = startOfSingleLineCommentToken.getContentLength(),
      left = position,
      ///
  right = position + contentLength,
      leftContent = content.substring(0, left),
      rightContent = content.substring(right),
      leftContentLength = leftContent.length,
      rightContentLength = rightContent.length;

  if (leftContentLength > 0) {
    var remainingContent = leftContent; ///

    commentTokensOrRemainingContents.push(remainingContent);
  }

  commentTokensOrRemainingContents.push(startOfSingleLineCommentToken);

  if (rightContentLength > 0) {
    var tokenOrContent = rightContent; ///

    commentTokensOrRemainingContentsFromTokenOrContent(commentTokensOrRemainingContents, tokenOrContent, commentType);
  }
}

function endOfCommentTokenFromContent(EndOfCommentToken, MiddleOfCommentToken, commentTokensOrRemainingContents, content) {
  var endOfMultiLineCommentToken = EndOfCommentToken.fromWithinContent(content),
      position = EndOfCommentToken.positionWithinContent(content),
      contentLength = endOfMultiLineCommentToken.getContentLength(),
      left = position,
      right = position + contentLength,
      leftContent = content.substring(0, left),
      rightContent = content.substring(right),
      leftContentLength = leftContent.length,
      rightContentLength = rightContent.length;

  if (leftContentLength > 0) {
    var _content = leftContent,
        ///
    middleOfMultiLineCommentToken = MiddleOfCommentToken.fromContent(_content);

    commentTokensOrRemainingContents.push(middleOfMultiLineCommentToken);
  }

  commentTokensOrRemainingContents.push(endOfMultiLineCommentToken);

  if (rightContentLength > 0) {
    var tokenOrContent = rightContent,
        ///
    commentType = null; ///

    commentTokensOrRemainingContentsFromTokenOrContent(commentTokensOrRemainingContents, tokenOrContent, commentType);
  }
}

function hyperlinkCommentTokenFromContent(HyperlinkCommentToken, MiddleOfCommentToken, commentTokensOrRemainingContents, commentType, content) {
  var hyperlinkCommentToken = HyperlinkCommentToken.fromWithinContent(content),
      position = HyperlinkCommentToken.positionWithinContent(content),
      ///
  contentLength = hyperlinkCommentToken.getContentLength(),
      left = position,
      right = position + contentLength,
      leftContent = content.substring(0, left),
      rightContent = content.substring(right),
      leftContentLength = leftContent.length,
      rightContentLength = rightContent.length;

  if (leftContentLength > 0) {
    var _content2 = leftContent,
        ///
    middleOfCommentToken = MiddleOfCommentToken.fromContent(_content2);

    commentTokensOrRemainingContents.push(middleOfCommentToken);
  }

  commentTokensOrRemainingContents.push(hyperlinkCommentToken);

  if (rightContentLength > 0) {
    var tokenOrContent = rightContent; ///

    commentTokensOrRemainingContentsFromTokenOrContent(commentTokensOrRemainingContents, tokenOrContent, commentType);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,