'use strict';

var types = require('../types'),
    tokens = require('../tokens'),
    EndOfMultiLineCommentToken = require('../token/nonSignificant/comment/multiLine/endOf'),
    StartOfMultiLineCommentToken = require('../token/nonSignificant/comment/multiLine/startOf'),
    MiddleOfMultiLineCommentToken = require('../token/nonSignificant/comment/multiLine/middleOf'),
    StartOfSingleLineCommentToken = require('../token/nonSignificant/comment/singleLine/startOf'),
    MiddleOfSingleLineCommentToken = require('../token/nonSignificant/comment/singleLine/middleOf');

var stringLiteralType = types.stringLiteralType,
    multiLineType = types.multiLineType,
    singleLineType = types.singleLineType,
    multiLineCommentType = types.multiLineCommentType,
    singleLineCommentType = types.singleLineCommentType,
    tokeniseByCallback = tokens.tokeniseByCallback;


function tokenise(tokensOrContents) {
  var commentType = null;

  tokeniseByCallback(tokensOrContents, function (tokenOrContent) {
    var commentTokensOrRemainingContents = [];

    commentType = tokeniseTokenOrContent(tokenOrContent, commentTokensOrRemainingContents, commentType);

    var tokensOrRemainingContents = commentTokensOrRemainingContents; ///

    return tokensOrRemainingContents;
  });
}

module.exports = {
  tokenise: tokenise
};

function tokeniseTokenOrContent(tokenOrContent, commentTokensOrRemainingContents, commentType) {
  var tokenOrContentContent = isTokenOrContentContent(tokenOrContent);

  if (tokenOrContentContent) {
    var content = tokenOrContent; ///

    commentType = tokeniseContent(content, commentTokensOrRemainingContents, commentType);
  } else {
    var token = tokenOrContent,
        ///
    tokenStringLiteralToken = isTokenStringLiteralToken(token);

    if (false) {
      ///
    } else if (tokenStringLiteralToken) {
      var stringLiteralToken = token; ///

      commentType = tokeniseStringLiteralToken(stringLiteralToken, commentTokensOrRemainingContents, commentType);
    } else {
      commentType = tokeniseToken(token, commentTokensOrRemainingContents, commentType);
    }
  }

  return commentType;
}

function isTokenOrContentContent(tokenOrContent) {
  var tokenOrContentString = typeof tokenOrContent === 'string',
      tokenOrContentContent = tokenOrContentString; ///

  return tokenOrContentContent;
}

function isTokenStringLiteralToken(token) {
  var type = token.getType(),
      typeStringLiteralType = type === stringLiteralType,
      tokenStringLiteralToken = typeStringLiteralType; ///

  return tokenStringLiteralToken;
}

function isCommentTypeSingleLineCommentType(commentType) {
  var commentTypeSingleLineCommentType = false;

  if (commentType !== null) {
    var commentTypeIncludesSingleLineType = commentType.includes(singleLineType);

    commentTypeSingleLineCommentType = commentTypeIncludesSingleLineType;
  }

  return commentTypeSingleLineCommentType;
}

function isCommentTypeMultiLineCommentType(commentType) {
  var commentTypeMultiLineCommentType = false;

  if (commentType !== null) {
    var commentTypeIncludesMultiLineType = commentType.includes(multiLineType);

    commentTypeMultiLineCommentType = commentTypeIncludesMultiLineType;
  }

  return commentTypeMultiLineCommentType;
}

function tokeniseToken(token, commentTokensOrRemainingContents, commentType) {
  var tokenEndOfLineToken = token.isEndOfLineToken();

  if (tokenEndOfLineToken) {
    var commentTypeSingleLineCommentType = isCommentTypeSingleLineCommentType(commentType);

    if (commentTypeSingleLineCommentType) {
      commentType = null;
    }
  }

  commentTokensOrRemainingContents.push(token);

  return commentType;
}

function tokeniseContent(content, commentTokensOrRemainingContents, commentType) {
  var commentTypeSingleLineCommentType = isCommentTypeSingleLineCommentType(commentType),
      commentTypeMultiLineCommentType = isCommentTypeMultiLineCommentType(commentType);

  if (false) {} else if (commentTypeSingleLineCommentType) {
    var middleOfSingleLineCommentToken = MiddleOfSingleLineCommentToken.fromContent(content);

    commentTokensOrRemainingContents.push(middleOfSingleLineCommentToken);
  } else if (commentTypeMultiLineCommentType) {
    var endOfMultiLineCommentTokenPosition = EndOfMultiLineCommentToken.positionWithinContent(content);

    if (endOfMultiLineCommentTokenPosition > -1) {
      commentType = tokeniseEndOfMultiLineCommentToken(commentTokensOrRemainingContents, content);
    } else {
      var middleOfMultiLineCommentToken = MiddleOfMultiLineCommentToken.fromContent(content);

      commentTokensOrRemainingContents.push(middleOfMultiLineCommentToken);
    }
  } else {
    var startOfSingleLineCommentTokenPosition = StartOfSingleLineCommentToken.positionWithinContent(content),
        startOfMultiLineCommentTokenPosition = StartOfMultiLineCommentToken.positionWithinContent(content);

    if (startOfSingleLineCommentTokenPosition > -1 && startOfMultiLineCommentTokenPosition > -1) {
      if (false) {} else if (startOfSingleLineCommentTokenPosition < startOfMultiLineCommentTokenPosition) {
        commentType = tokeniseStartOfSingleLineCommentToken(commentTokensOrRemainingContents, content);
      } else if (startOfMultiLineCommentTokenPosition < startOfSingleLineCommentTokenPosition) {
        commentType = tokeniseStartOfMultiLineCommentToken(commentTokensOrRemainingContents, content);
      }
    } else if (startOfSingleLineCommentTokenPosition > -1) {
      commentType = tokeniseStartOfSingleLineCommentToken(commentTokensOrRemainingContents, content);
    } else if (startOfMultiLineCommentTokenPosition > -1) {
      commentType = tokeniseStartOfMultiLineCommentToken(commentTokensOrRemainingContents, content);
    } else {
      var remainingContent = content; ///

      commentTokensOrRemainingContents.push(remainingContent);
    }
  }

  return commentType;
}

function tokeniseStringLiteralToken(stringLiteralToken, commentTokensOrRemainingContents, commentType) {
  var commentTypeSingleLineCommentType = isCommentTypeSingleLineCommentType(commentType),
      commentTypeMultiLineCommentType = isCommentTypeMultiLineCommentType(commentType);

  if (false) {} else if (commentTypeSingleLineCommentType) {
    var middleOfSingleLineCommentToken = MiddleOfSingleLineCommentToken.fromStringLiteralToken(stringLiteralToken);

    commentTokensOrRemainingContents.push(middleOfSingleLineCommentToken);
  } else if (commentTypeMultiLineCommentType) {
    var content = stringLiteralToken.getContent(),
        endOfMultiLineCommentTokenPosition = EndOfMultiLineCommentToken.positionWithinContent(content);

    if (endOfMultiLineCommentTokenPosition > -1) {
      commentType = tokeniseEndOfMultiLineCommentToken(commentTokensOrRemainingContents, content);
    } else {
      var middleOfMultiLineCommentToken = MiddleOfMultiLineCommentToken.fromContent(content);

      commentTokensOrRemainingContents.push(middleOfMultiLineCommentToken);
    }
  } else {
    commentTokensOrRemainingContents.push(stringLiteralToken);
  }

  return commentType;
}

function tokeniseStartOfSingleLineCommentToken(commentTokensOrRemainingContents, content) {
  var commentType = singleLineCommentType; ///

  commentType = tokeniseStartOfCommentToken(StartOfSingleLineCommentToken, commentTokensOrRemainingContents, content, commentType);

  return commentType;
}

function tokeniseStartOfMultiLineCommentToken(commentTokensOrRemainingContents, content) {
  var commentType = multiLineCommentType; ///

  commentType = tokeniseStartOfCommentToken(StartOfMultiLineCommentToken, commentTokensOrRemainingContents, content, commentType);

  return commentType;
}

function tokeniseEndOfMultiLineCommentToken(commentTokensOrRemainingContents, content) {
  var commentType = null;

  commentType = tokeniseEndOfCommentToken(EndOfMultiLineCommentToken, MiddleOfMultiLineCommentToken, commentTokensOrRemainingContents, content, commentType);

  return commentType;
}

function tokeniseStartOfCommentToken(StartOfCommentToken, commentTokensOrRemainingContents, content, commentType) {
  var startOfSingleLineCommentToken = StartOfCommentToken.fromWithinContent(content),
      position = StartOfCommentToken.positionWithinContent(content),
      ///
  contentLength = startOfSingleLineCommentToken.getContentLength(),
      left = position,
      ///
  right = position + contentLength,
      leftContent = content.substring(0, left),
      rightContent = content.substring(right),
      leftContentLength = leftContent.length,
      rightContentLength = rightContent.length;

  if (leftContentLength > 0) {
    var remainingContent = leftContent; ///

    commentTokensOrRemainingContents.push(remainingContent);
  }

  commentTokensOrRemainingContents.push(startOfSingleLineCommentToken);

  if (rightContentLength > 0) {
    var tokenOrContent = rightContent; ///

    commentType = tokeniseTokenOrContent(tokenOrContent, commentTokensOrRemainingContents, commentType);
  }

  return commentType;
}

function tokeniseEndOfCommentToken(EndOfCommentToken, MiddleOfCommentToken, commentTokensOrRemainingContents, content, commentType) {
  var endOfMultiLineCommentToken = EndOfCommentToken.fromWithinContent(content),
      position = EndOfCommentToken.positionWithinContent(content),
      contentLength = endOfMultiLineCommentToken.getContentLength(),
      left = position,
      right = position + contentLength,
      leftContent = content.substring(0, left),
      rightContent = content.substring(right),
      leftContentLength = leftContent.length,
      rightContentLength = rightContent.length;

  if (leftContentLength > 0) {
    var _content = leftContent,
        ///
    middleOfMultiLineCommentToken = MiddleOfCommentToken.fromContent(_content);

    commentTokensOrRemainingContents.push(middleOfMultiLineCommentToken);
  }

  commentTokensOrRemainingContents.push(endOfMultiLineCommentToken);

  if (rightContentLength > 0) {
    var tokenOrContent = rightContent; ///

    commentType = tokeniseTokenOrContent(tokenOrContent, commentTokensOrRemainingContents, commentType);
  }

  return commentType;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,