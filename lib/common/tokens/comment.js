'use strict';

var EndOfCommentToken = require('../token/nonSignificant/comment/endOf'),
    StartOfCommentToken = require('../token/nonSignificant/comment/startOf'),
    MiddleOfCommentToken = require('../token/nonSignificant/comment/middleOf');

function process(tokensOrContents, inComment) {
  var content = tokensOrContents.pop(),
      commentToken = void 0,
      commentTokenContentLength = void 0;

  while (content !== '') {
    var contentLength = content.length;

    if (inComment) {
      var endOfCommentTokenPositionWithinContent = EndOfCommentToken.positionWithinContent(content);

      if (endOfCommentTokenPositionWithinContent === 0) {
        inComment = false;

        commentToken = EndOfCommentToken.fromWithinContent(content);

        commentTokenContentLength = commentToken.getContentLength();
      } else {
        var middleOfCommentTokenContentLength = minimumBarMinusOne(endOfCommentTokenPositionWithinContent, contentLength);

        commentToken = MiddleOfCommentToken.fromContent(content, middleOfCommentTokenContentLength);

        commentTokenContentLength = middleOfCommentTokenContentLength;
      }

      var previousCommentToken = tokensOrContents.pop();

      commentToken = previousCommentToken === undefined ? commentToken : previousCommentToken.merge(commentToken);

      tokensOrContents.push(commentToken);

      content = content.substring(commentTokenContentLength);
    } else {
      var startOfCommentTokenPositionWithinContent = StartOfCommentToken.positionWithinContent(content);

      if (startOfCommentTokenPositionWithinContent === 0) {
        inComment = true;

        commentToken = StartOfCommentToken.fromWithinContent(content);

        commentTokenContentLength = commentToken.getContentLength();

        tokensOrContents.push(commentToken);

        content = content.substring(commentTokenContentLength);
      } else {
        contentLength = minimumBarMinusOne(startOfCommentTokenPositionWithinContent, contentLength);

        var remainingContent = content.substring(contentLength);

        content = content.substring(0, contentLength);

        tokensOrContents.push(content);

        content = remainingContent;
      }
    }
  }

  return inComment;
}

module.exports = {
  process: process
};

function minimumBarMinusOne() {
  var values = Array.prototype.slice.call(arguments),
      minimumBarMinusOne = values.reduce(function (minimumBarMinusOne, value) {
    if (value > -1) {
      minimumBarMinusOne = minimumBarMinusOne !== null ? Math.min(minimumBarMinusOne, value) : value;
    }

    return minimumBarMinusOne;
  }, null);

  return minimumBarMinusOne;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9jb21tb24vdG9rZW5zL2NvbW1lbnQuanMiXSwibmFtZXMiOlsiRW5kT2ZDb21tZW50VG9rZW4iLCJyZXF1aXJlIiwiU3RhcnRPZkNvbW1lbnRUb2tlbiIsIk1pZGRsZU9mQ29tbWVudFRva2VuIiwicHJvY2VzcyIsInRva2Vuc09yQ29udGVudHMiLCJpbkNvbW1lbnQiLCJjb250ZW50IiwicG9wIiwiY29tbWVudFRva2VuIiwiY29tbWVudFRva2VuQ29udGVudExlbmd0aCIsImNvbnRlbnRMZW5ndGgiLCJsZW5ndGgiLCJlbmRPZkNvbW1lbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudCIsInBvc2l0aW9uV2l0aGluQ29udGVudCIsImZyb21XaXRoaW5Db250ZW50IiwiZ2V0Q29udGVudExlbmd0aCIsIm1pZGRsZU9mQ29tbWVudFRva2VuQ29udGVudExlbmd0aCIsIm1pbmltdW1CYXJNaW51c09uZSIsImZyb21Db250ZW50IiwicHJldmlvdXNDb21tZW50VG9rZW4iLCJ1bmRlZmluZWQiLCJtZXJnZSIsInB1c2giLCJzdWJzdHJpbmciLCJzdGFydE9mQ29tbWVudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50IiwicmVtYWluaW5nQ29udGVudCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2YWx1ZXMiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsImFyZ3VtZW50cyIsInJlZHVjZSIsInZhbHVlIiwiTWF0aCIsIm1pbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsb0JBQW9CQyxRQUFRLHVDQUFSLENBQTFCO0FBQUEsSUFDTUMsc0JBQXNCRCxRQUFRLHlDQUFSLENBRDVCO0FBQUEsSUFFTUUsdUJBQXVCRixRQUFRLDBDQUFSLENBRjdCOztBQUlBLFNBQVNHLE9BQVQsQ0FBaUJDLGdCQUFqQixFQUFtQ0MsU0FBbkMsRUFBOEM7QUFDMUMsTUFBSUMsVUFBVUYsaUJBQWlCRyxHQUFqQixFQUFkO0FBQUEsTUFDSUMscUJBREo7QUFBQSxNQUVJQyxrQ0FGSjs7QUFJQSxTQUFPSCxZQUFZLEVBQW5CLEVBQXVCO0FBQ3JCLFFBQUlJLGdCQUFnQkosUUFBUUssTUFBNUI7O0FBRUEsUUFBSU4sU0FBSixFQUFlO0FBQ2IsVUFBTU8seUNBQXlDYixrQkFBa0JjLHFCQUFsQixDQUF3Q1AsT0FBeEMsQ0FBL0M7O0FBRUEsVUFBSU0sMkNBQTJDLENBQS9DLEVBQWtEO0FBQ2hEUCxvQkFBWSxLQUFaOztBQUVBRyx1QkFBZVQsa0JBQWtCZSxpQkFBbEIsQ0FBb0NSLE9BQXBDLENBQWY7O0FBRUFHLG9DQUE0QkQsYUFBYU8sZ0JBQWIsRUFBNUI7QUFDRCxPQU5ELE1BTU87QUFDTCxZQUFNQyxvQ0FBb0NDLG1CQUFtQkwsc0NBQW5CLEVBQTJERixhQUEzRCxDQUExQzs7QUFFQUYsdUJBQWVOLHFCQUFxQmdCLFdBQXJCLENBQWlDWixPQUFqQyxFQUEwQ1UsaUNBQTFDLENBQWY7O0FBRUFQLG9DQUE0Qk8saUNBQTVCO0FBQ0Q7O0FBRUQsVUFBTUcsdUJBQXVCZixpQkFBaUJHLEdBQWpCLEVBQTdCOztBQUVBQyxxQkFBZ0JXLHlCQUF5QkMsU0FBMUIsR0FDR1osWUFESCxHQUVLVyxxQkFBcUJFLEtBQXJCLENBQTJCYixZQUEzQixDQUZwQjs7QUFJQUosdUJBQWlCa0IsSUFBakIsQ0FBc0JkLFlBQXRCOztBQUVBRixnQkFBVUEsUUFBUWlCLFNBQVIsQ0FBa0JkLHlCQUFsQixDQUFWO0FBQ0QsS0ExQkQsTUEwQk87QUFDTCxVQUFNZSwyQ0FBMkN2QixvQkFBb0JZLHFCQUFwQixDQUEwQ1AsT0FBMUMsQ0FBakQ7O0FBRUEsVUFBSWtCLDZDQUE2QyxDQUFqRCxFQUFvRDtBQUNsRG5CLG9CQUFZLElBQVo7O0FBRUFHLHVCQUFlUCxvQkFBb0JhLGlCQUFwQixDQUFzQ1IsT0FBdEMsQ0FBZjs7QUFFQUcsb0NBQTRCRCxhQUFhTyxnQkFBYixFQUE1Qjs7QUFFQVgseUJBQWlCa0IsSUFBakIsQ0FBc0JkLFlBQXRCOztBQUVBRixrQkFBVUEsUUFBUWlCLFNBQVIsQ0FBa0JkLHlCQUFsQixDQUFWO0FBQ0QsT0FWRCxNQVVPO0FBQ0xDLHdCQUFnQk8sbUJBQW1CTyx3Q0FBbkIsRUFBNkRkLGFBQTdELENBQWhCOztBQUVBLFlBQU1lLG1CQUFtQm5CLFFBQVFpQixTQUFSLENBQWtCYixhQUFsQixDQUF6Qjs7QUFFQUosa0JBQVVBLFFBQVFpQixTQUFSLENBQWtCLENBQWxCLEVBQXFCYixhQUFyQixDQUFWOztBQUVBTix5QkFBaUJrQixJQUFqQixDQUFzQmhCLE9BQXRCOztBQUVBQSxrQkFBVW1CLGdCQUFWO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFNBQU9wQixTQUFQO0FBQ0Q7O0FBRUhxQixPQUFPQyxPQUFQLEdBQWlCO0FBQ2Z4QixXQUFTQTtBQURNLENBQWpCOztBQUlBLFNBQVNjLGtCQUFULEdBQThCO0FBQzVCLE1BQU1XLFNBQVNDLE1BQU1DLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQkMsU0FBM0IsQ0FBZjtBQUFBLE1BQ01oQixxQkFBcUJXLE9BQU9NLE1BQVAsQ0FBYyxVQUFTakIsa0JBQVQsRUFBNkJrQixLQUE3QixFQUFvQztBQUNyRSxRQUFJQSxRQUFRLENBQUMsQ0FBYixFQUFnQjtBQUNkbEIsMkJBQXNCQSx1QkFBdUIsSUFBeEIsR0FDRW1CLEtBQUtDLEdBQUwsQ0FBU3BCLGtCQUFULEVBQTZCa0IsS0FBN0IsQ0FERixHQUVJQSxLQUZ6QjtBQUdEOztBQUVELFdBQU9sQixrQkFBUDtBQUNELEdBUm9CLEVBUWxCLElBUmtCLENBRDNCOztBQVdBLFNBQU9BLGtCQUFQO0FBQ0QiLCJmaWxlIjoiY29tbWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IEVuZE9mQ29tbWVudFRva2VuID0gcmVxdWlyZSgnLi4vdG9rZW4vbm9uU2lnbmlmaWNhbnQvY29tbWVudC9lbmRPZicpLFxyXG4gICAgICBTdGFydE9mQ29tbWVudFRva2VuID0gcmVxdWlyZSgnLi4vdG9rZW4vbm9uU2lnbmlmaWNhbnQvY29tbWVudC9zdGFydE9mJyksXHJcbiAgICAgIE1pZGRsZU9mQ29tbWVudFRva2VuID0gcmVxdWlyZSgnLi4vdG9rZW4vbm9uU2lnbmlmaWNhbnQvY29tbWVudC9taWRkbGVPZicpO1xyXG5cclxuZnVuY3Rpb24gcHJvY2Vzcyh0b2tlbnNPckNvbnRlbnRzLCBpbkNvbW1lbnQpIHtcclxuICAgIGxldCBjb250ZW50ID0gdG9rZW5zT3JDb250ZW50cy5wb3AoKSxcclxuICAgICAgICBjb21tZW50VG9rZW4sXHJcbiAgICAgICAgY29tbWVudFRva2VuQ29udGVudExlbmd0aDtcclxuXHJcbiAgICB3aGlsZSAoY29udGVudCAhPT0gJycpIHtcclxuICAgICAgbGV0IGNvbnRlbnRMZW5ndGggPSBjb250ZW50Lmxlbmd0aDtcclxuXHJcbiAgICAgIGlmIChpbkNvbW1lbnQpIHtcclxuICAgICAgICBjb25zdCBlbmRPZkNvbW1lbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudCA9IEVuZE9mQ29tbWVudFRva2VuLnBvc2l0aW9uV2l0aGluQ29udGVudChjb250ZW50KTtcclxuXHJcbiAgICAgICAgaWYgKGVuZE9mQ29tbWVudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50ID09PSAwKSB7XHJcbiAgICAgICAgICBpbkNvbW1lbnQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICBjb21tZW50VG9rZW4gPSBFbmRPZkNvbW1lbnRUb2tlbi5mcm9tV2l0aGluQ29udGVudChjb250ZW50KTtcclxuXHJcbiAgICAgICAgICBjb21tZW50VG9rZW5Db250ZW50TGVuZ3RoID0gY29tbWVudFRva2VuLmdldENvbnRlbnRMZW5ndGgoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3QgbWlkZGxlT2ZDb21tZW50VG9rZW5Db250ZW50TGVuZ3RoID0gbWluaW11bUJhck1pbnVzT25lKGVuZE9mQ29tbWVudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50LCBjb250ZW50TGVuZ3RoKTtcclxuXHJcbiAgICAgICAgICBjb21tZW50VG9rZW4gPSBNaWRkbGVPZkNvbW1lbnRUb2tlbi5mcm9tQ29udGVudChjb250ZW50LCBtaWRkbGVPZkNvbW1lbnRUb2tlbkNvbnRlbnRMZW5ndGgpO1xyXG5cclxuICAgICAgICAgIGNvbW1lbnRUb2tlbkNvbnRlbnRMZW5ndGggPSBtaWRkbGVPZkNvbW1lbnRUb2tlbkNvbnRlbnRMZW5ndGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwcmV2aW91c0NvbW1lbnRUb2tlbiA9IHRva2Vuc09yQ29udGVudHMucG9wKCk7XHJcblxyXG4gICAgICAgIGNvbW1lbnRUb2tlbiA9IChwcmV2aW91c0NvbW1lbnRUb2tlbiA9PT0gdW5kZWZpbmVkKSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudFRva2VuIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQ29tbWVudFRva2VuLm1lcmdlKGNvbW1lbnRUb2tlbik7XHJcblxyXG4gICAgICAgIHRva2Vuc09yQ29udGVudHMucHVzaChjb21tZW50VG9rZW4pO1xyXG5cclxuICAgICAgICBjb250ZW50ID0gY29udGVudC5zdWJzdHJpbmcoY29tbWVudFRva2VuQ29udGVudExlbmd0aCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnRPZkNvbW1lbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudCA9IFN0YXJ0T2ZDb21tZW50VG9rZW4ucG9zaXRpb25XaXRoaW5Db250ZW50KGNvbnRlbnQpO1xyXG5cclxuICAgICAgICBpZiAoc3RhcnRPZkNvbW1lbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudCA9PT0gMCkge1xyXG4gICAgICAgICAgaW5Db21tZW50ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICBjb21tZW50VG9rZW4gPSBTdGFydE9mQ29tbWVudFRva2VuLmZyb21XaXRoaW5Db250ZW50KGNvbnRlbnQpO1xyXG5cclxuICAgICAgICAgIGNvbW1lbnRUb2tlbkNvbnRlbnRMZW5ndGggPSBjb21tZW50VG9rZW4uZ2V0Q29udGVudExlbmd0aCgpO1xyXG5cclxuICAgICAgICAgIHRva2Vuc09yQ29udGVudHMucHVzaChjb21tZW50VG9rZW4pO1xyXG5cclxuICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZyhjb21tZW50VG9rZW5Db250ZW50TGVuZ3RoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29udGVudExlbmd0aCA9IG1pbmltdW1CYXJNaW51c09uZShzdGFydE9mQ29tbWVudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50LCBjb250ZW50TGVuZ3RoKTtcclxuXHJcbiAgICAgICAgICBjb25zdCByZW1haW5pbmdDb250ZW50ID0gY29udGVudC5zdWJzdHJpbmcoY29udGVudExlbmd0aCk7XHJcblxyXG4gICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKDAsIGNvbnRlbnRMZW5ndGgpO1xyXG5cclxuICAgICAgICAgIHRva2Vuc09yQ29udGVudHMucHVzaChjb250ZW50KTtcclxuXHJcbiAgICAgICAgICBjb250ZW50ID0gcmVtYWluaW5nQ29udGVudDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5Db21tZW50O1xyXG4gIH1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIHByb2Nlc3M6IHByb2Nlc3NcclxufTtcclxuXHJcbmZ1bmN0aW9uIG1pbmltdW1CYXJNaW51c09uZSgpIHtcclxuICBjb25zdCB2YWx1ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLFxyXG4gICAgICAgIG1pbmltdW1CYXJNaW51c09uZSA9IHZhbHVlcy5yZWR1Y2UoZnVuY3Rpb24obWluaW11bUJhck1pbnVzT25lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgaWYgKHZhbHVlID4gLTEpIHtcclxuICAgICAgICAgICAgbWluaW11bUJhck1pbnVzT25lID0gKG1pbmltdW1CYXJNaW51c09uZSAhPT0gbnVsbCkgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWluKG1pbmltdW1CYXJNaW51c09uZSwgdmFsdWUpIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlO1xyXG4gICAgICAgICAgfVxyXG4gIFxyXG4gICAgICAgICAgcmV0dXJuIG1pbmltdW1CYXJNaW51c09uZTtcclxuICAgICAgICB9LCBudWxsKTtcclxuXHJcbiAgcmV0dXJuIG1pbmltdW1CYXJNaW51c09uZTtcclxufVxyXG4iXX0=