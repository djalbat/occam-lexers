'use strict';

var types = require('../types'),
    tokens = require('../tokens'),
    StringLiteralToken = require('../token/significant/stringLiteral'),
    EndOfMultiLineCommentToken = require('../token/nonSignificant/comment/multiLine/endOf'),
    StartOfMultiLineCommentToken = require('../token/nonSignificant/comment/multiLine/startOf'),
    MiddleOfMultiLineCommentToken = require('../token/nonSignificant/comment/multiLine/middleOf'),
    StartOfSingleLineCommentToken = require('../token/nonSignificant/comment/singleLine/startOf'),
    MiddleOfSingleLineCommentToken = require('../token/nonSignificant/comment/singleLine/middleOf');

var multiLineType = types.multiLineType,
    singleLineType = types.singleLineType,
    multiLineCommentType = types.multiLineCommentType,
    singleLineCommentType = types.singleLineCommentType,
    tokeniseByCallback = tokens.tokeniseByCallback;


function tokenise(tokensOrContents, commentType) {
  tokeniseByCallback(tokensOrContents, function (tokenOrContent) {
    var commentTokensOrRemainingContents = [];

    commentType = tokeniseCommentTokens(commentTokensOrRemainingContents, tokenOrContent, commentType);

    var tokensOrRemainingContents = commentTokensOrRemainingContents; ///

    return tokensOrRemainingContents;
  });

  return commentType;
}

module.exports = {
  tokenise: tokenise
};

function tokeniseCommentTokens(commentTokensOrRemainingContents, tokenOrContent, commentType) {
  var tokenOrContentContent = isTokenOrContentContent(tokenOrContent),
      tokenOrContentStringLiteralToken = isTokenOrContentStringLiteralToken(tokenOrContent),
      commentTypeSingleLineCommentType = isCommentTypeSingleLineCommentType(commentType),
      commentTypeMultiLineCommentType = isCommentTypeMultiLineCommentType(commentType);

  if (false) {} else if (tokenOrContentContent) {
    var content = tokenOrContent; ///

    if (false) {} else if (commentTypeSingleLineCommentType) {
      var middleOfSingleLineCommentToken = MiddleOfSingleLineCommentToken.fromContent(content);

      commentTokensOrRemainingContents.push(middleOfSingleLineCommentToken);
    } else if (commentTypeMultiLineCommentType) {
      var endOfMultiLineCommentTokenPosition = EndOfMultiLineCommentToken.positionWithinContent(content);

      if (endOfMultiLineCommentTokenPosition > -1) {
        commentType = tokeniseEndOfMultiLineCommentToken(commentTokensOrRemainingContents, content);
      } else {
        var middleOfMultiLineCommentToken = MiddleOfMultiLineCommentToken.fromContent(content);

        commentTokensOrRemainingContents.push(middleOfMultiLineCommentToken);
      }
    } else {
      var startOfSingleLineCommentTokenPosition = StartOfSingleLineCommentToken.positionWithinContent(content),
          startOfMultiLineCommentTokenPosition = StartOfMultiLineCommentToken.positionWithinContent(content);

      if (startOfSingleLineCommentTokenPosition > -1 && startOfMultiLineCommentTokenPosition > -1) {
        if (false) {} else if (startOfSingleLineCommentTokenPosition < startOfMultiLineCommentTokenPosition) {
          commentType = tokeniseStartOfSingleLineCommentToken(commentTokensOrRemainingContents, content);
        } else if (startOfMultiLineCommentTokenPosition < startOfSingleLineCommentTokenPosition) {
          commentType = tokeniseStartOfMultiLineCommentToken(commentTokensOrRemainingContents, content);
        }
      } else if (startOfSingleLineCommentTokenPosition > -1) {
        commentType = tokeniseStartOfSingleLineCommentToken(commentTokensOrRemainingContents, content);
      } else if (startOfMultiLineCommentTokenPosition > -1) {
        commentType = tokeniseStartOfMultiLineCommentToken(commentTokensOrRemainingContents, content);
      } else {
        var remainingContent = content; ///

        commentTokensOrRemainingContents.push(remainingContent);
      }
    }
  } else if (tokenOrContentStringLiteralToken) {
    var stringLiteralToken = tokenOrContent; ///

    if (false) {} else if (commentTypeSingleLineCommentType) {
      var _middleOfSingleLineCommentToken = MiddleOfSingleLineCommentToken.fromStringLiteralToken(stringLiteralToken);

      commentTokensOrRemainingContents.push(_middleOfSingleLineCommentToken);
    } else if (commentTypeMultiLineCommentType) {
      var _content = stringLiteralToken.getContent(),
          _endOfMultiLineCommentTokenPosition = EndOfMultiLineCommentToken.positionWithinContent(_content);

      if (_endOfMultiLineCommentTokenPosition > -1) {
        commentType = tokeniseEndOfMultiLineCommentToken(commentTokensOrRemainingContents, _content);
      } else {
        var _middleOfMultiLineCommentToken = MiddleOfMultiLineCommentToken.fromContent(_content);

        commentTokensOrRemainingContents.push(_middleOfMultiLineCommentToken);
      }
    } else {
      commentTokensOrRemainingContents.push(stringLiteralToken);
    }
  } else {
    var token = tokenOrContent,
        ///
    tokenEndOfLineToken = token.isEndOfLineToken();

    if (tokenEndOfLineToken) {
      var _commentTypeSingleLineCommentType = isCommentTypeSingleLineCommentType(commentType);

      if (_commentTypeSingleLineCommentType) {
        commentType = null;
      }
    }

    commentTokensOrRemainingContents.push(token);
  }

  return commentType;
}

function isTokenOrContentContent(tokenOrContent) {
  var tokenOrContentString = typeof tokenOrContent === 'string',
      tokenOrContentContent = tokenOrContentString; ///

  return tokenOrContentContent;
}

function isTokenOrContentStringLiteralToken(tokenOrContent) {
  var tokenOrContentStringLiteralToken = false;

  var tokenOrContentString = typeof tokenOrContent === 'string',
      tokenOrContentContent = tokenOrContentString,
      ///
  tokenOrContentToken = !tokenOrContentContent;

  if (tokenOrContentToken) {
    var token = tokenOrContent,
        tokenStringLiteralToken = token instanceof StringLiteralToken;

    tokenOrContentStringLiteralToken = tokenStringLiteralToken; ///
  }

  return tokenOrContentStringLiteralToken;
}

function isCommentTypeSingleLineCommentType(commentType) {
  var commentTypeSingleLineCommentType = false;

  if (commentType !== null) {
    var commentTypeIncludesSingleLineType = commentType.includes(singleLineType);

    commentTypeSingleLineCommentType = commentTypeIncludesSingleLineType;
  }

  return commentTypeSingleLineCommentType;
}

function isCommentTypeMultiLineCommentType(commentType) {
  var commentTypeMultiLineCommentType = false;

  if (commentType !== null) {
    var commentTypeIncludesMultiLineType = commentType.includes(multiLineType);

    commentTypeMultiLineCommentType = commentTypeIncludesMultiLineType;
  }

  return commentTypeMultiLineCommentType;
}

function tokeniseStartOfSingleLineCommentToken(commentTokensOrRemainingContents, content) {
  var commentType = singleLineCommentType; ///

  commentType = tokeniseStartOfCommentToken(StartOfSingleLineCommentToken, commentTokensOrRemainingContents, content, commentType);

  return commentType;
}

function tokeniseStartOfMultiLineCommentToken(commentTokensOrRemainingContents, content) {
  var commentType = multiLineCommentType; ///

  commentType = tokeniseStartOfCommentToken(StartOfMultiLineCommentToken, commentTokensOrRemainingContents, content, commentType);

  return commentType;
}

function tokeniseEndOfMultiLineCommentToken(commentTokensOrRemainingContents, content) {
  var commentType = null;

  commentType = tokeniseEndOfCommentToken(EndOfMultiLineCommentToken, MiddleOfMultiLineCommentToken, commentTokensOrRemainingContents, content, commentType);

  return commentType;
}

function tokeniseStartOfCommentToken(StartOfCommentToken, commentTokensOrRemainingContents, content, commentType) {
  var startOfSingleLineCommentToken = StartOfCommentToken.fromWithinContent(content),
      position = StartOfCommentToken.positionWithinContent(content),
      ///
  contentLength = startOfSingleLineCommentToken.getContentLength(),
      left = position,
      ///
  right = position + contentLength,
      leftContent = content.substring(0, left),
      rightContent = content.substring(right),
      leftContentLength = leftContent.length,
      rightContentLength = rightContent.length;

  if (leftContentLength > 0) {
    var remainingContent = leftContent; ///

    commentTokensOrRemainingContents.push(remainingContent);
  }

  commentTokensOrRemainingContents.push(startOfSingleLineCommentToken);

  if (rightContentLength > 0) {
    var tokenOrContent = rightContent; ///

    commentType = tokeniseCommentTokens(commentTokensOrRemainingContents, tokenOrContent, commentType);
  }

  return commentType;
}

function tokeniseEndOfCommentToken(EndOfCommentToken, MiddleOfCommentToken, commentTokensOrRemainingContents, content, commentType) {
  var endOfMultiLineCommentToken = EndOfCommentToken.fromWithinContent(content),
      position = EndOfCommentToken.positionWithinContent(content),
      contentLength = endOfMultiLineCommentToken.getContentLength(),
      left = position,
      right = position + contentLength,
      leftContent = content.substring(0, left),
      rightContent = content.substring(right),
      leftContentLength = leftContent.length,
      rightContentLength = rightContent.length;

  if (leftContentLength > 0) {
    var _content2 = leftContent,
        ///
    middleOfMultiLineCommentToken = MiddleOfCommentToken.fromContent(_content2);

    commentTokensOrRemainingContents.push(middleOfMultiLineCommentToken);
  }

  commentTokensOrRemainingContents.push(endOfMultiLineCommentToken);

  if (rightContentLength > 0) {
    var tokenOrContent = rightContent; ///

    commentType = tokeniseCommentTokens(commentTokensOrRemainingContents, tokenOrContent, commentType);
  }

  return commentType;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,