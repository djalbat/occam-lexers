'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EndOfCommentToken = require('../token/nonSignificant/comment/endOf'),
    StartOfCommentToken = require('../token/nonSignificant/comment/startOf'),
    MiddleOfCommentToken = require('../token/nonSignificant/comment/middleOf');

var CommentTokens = function () {
  function CommentTokens() {
    _classCallCheck(this, CommentTokens);
  }

  _createClass(CommentTokens, null, [{
    key: 'pass',
    value: function pass(tokensOrContents, inComment) {
      var content = tokensOrContents.pop(),
          commentToken = void 0,
          commentTokenContentLength = void 0;

      while (content !== '') {
        var contentLength = content.length;

        if (inComment) {
          var endOfCommentTokenPositionWithinContent = EndOfCommentToken.positionWithinContent(content);

          if (endOfCommentTokenPositionWithinContent === 0) {
            inComment = false;

            commentToken = EndOfCommentToken.fromWithinContent(content);

            commentTokenContentLength = commentToken.getContentLength();
          } else {
            var middleOfCommentTokenContentLength = minimumBarMinusOne(endOfCommentTokenPositionWithinContent, contentLength);

            commentToken = MiddleOfCommentToken.fromContent(content, middleOfCommentTokenContentLength);

            commentTokenContentLength = middleOfCommentTokenContentLength;
          }

          var previousCommentToken = tokensOrContents.pop();

          commentToken = previousCommentToken === undefined ? commentToken : previousCommentToken.merge(commentToken);

          tokensOrContents.push(commentToken);

          content = content.substring(commentTokenContentLength);
        } else {
          var startOfCommentTokenPositionWithinContent = StartOfCommentToken.positionWithinContent(content);

          if (startOfCommentTokenPositionWithinContent === 0) {
            inComment = true;

            commentToken = StartOfCommentToken.fromWithinContent(content);

            commentTokenContentLength = commentToken.getContentLength();

            tokensOrContents.push(commentToken);

            content = content.substring(commentTokenContentLength);
          } else {
            contentLength = minimumBarMinusOne(startOfCommentTokenPositionWithinContent, contentLength);

            var remainingContent = content.substring(contentLength);

            content = content.substring(0, contentLength);

            tokensOrContents.push(content);

            content = remainingContent;
          }
        }
      }

      return inComment;
    }
  }]);

  return CommentTokens;
}();

module.exports = CommentTokens;

function minimumBarMinusOne() {
  var values = Array.prototype.slice.call(arguments),
      minimumBarMinusOne = values.reduce(function (minimumBarMinusOne, value) {
    if (value > -1) {
      minimumBarMinusOne = minimumBarMinusOne !== null ? Math.min(minimumBarMinusOne, value) : value;
    }

    return minimumBarMinusOne;
  }, null);

  return minimumBarMinusOne;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9jb21tb24vdG9rZW5zL2NvbW1lbnQuanMiXSwibmFtZXMiOlsiRW5kT2ZDb21tZW50VG9rZW4iLCJyZXF1aXJlIiwiU3RhcnRPZkNvbW1lbnRUb2tlbiIsIk1pZGRsZU9mQ29tbWVudFRva2VuIiwiQ29tbWVudFRva2VucyIsInRva2Vuc09yQ29udGVudHMiLCJpbkNvbW1lbnQiLCJjb250ZW50IiwicG9wIiwiY29tbWVudFRva2VuIiwiY29tbWVudFRva2VuQ29udGVudExlbmd0aCIsImNvbnRlbnRMZW5ndGgiLCJsZW5ndGgiLCJlbmRPZkNvbW1lbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudCIsInBvc2l0aW9uV2l0aGluQ29udGVudCIsImZyb21XaXRoaW5Db250ZW50IiwiZ2V0Q29udGVudExlbmd0aCIsIm1pZGRsZU9mQ29tbWVudFRva2VuQ29udGVudExlbmd0aCIsIm1pbmltdW1CYXJNaW51c09uZSIsImZyb21Db250ZW50IiwicHJldmlvdXNDb21tZW50VG9rZW4iLCJ1bmRlZmluZWQiLCJtZXJnZSIsInB1c2giLCJzdWJzdHJpbmciLCJzdGFydE9mQ29tbWVudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50IiwicmVtYWluaW5nQ29udGVudCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2YWx1ZXMiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsImFyZ3VtZW50cyIsInJlZHVjZSIsInZhbHVlIiwiTWF0aCIsIm1pbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLG9CQUFvQkMsUUFBUSx1Q0FBUixDQUExQjtBQUFBLElBQ01DLHNCQUFzQkQsUUFBUSx5Q0FBUixDQUQ1QjtBQUFBLElBRU1FLHVCQUF1QkYsUUFBUSwwQ0FBUixDQUY3Qjs7SUFJTUcsYTs7Ozs7Ozt5QkFDUUMsZ0IsRUFBa0JDLFMsRUFBVztBQUN2QyxVQUFJQyxVQUFVRixpQkFBaUJHLEdBQWpCLEVBQWQ7QUFBQSxVQUNJQyxxQkFESjtBQUFBLFVBRUlDLGtDQUZKOztBQUlBLGFBQU9ILFlBQVksRUFBbkIsRUFBdUI7QUFDckIsWUFBSUksZ0JBQWdCSixRQUFRSyxNQUE1Qjs7QUFFQSxZQUFJTixTQUFKLEVBQWU7QUFDYixjQUFNTyx5Q0FBeUNiLGtCQUFrQmMscUJBQWxCLENBQXdDUCxPQUF4QyxDQUEvQzs7QUFFQSxjQUFJTSwyQ0FBMkMsQ0FBL0MsRUFBa0Q7QUFDaERQLHdCQUFZLEtBQVo7O0FBRUFHLDJCQUFlVCxrQkFBa0JlLGlCQUFsQixDQUFvQ1IsT0FBcEMsQ0FBZjs7QUFFQUcsd0NBQTRCRCxhQUFhTyxnQkFBYixFQUE1QjtBQUNELFdBTkQsTUFNTztBQUNMLGdCQUFNQyxvQ0FBb0NDLG1CQUFtQkwsc0NBQW5CLEVBQTJERixhQUEzRCxDQUExQzs7QUFFQUYsMkJBQWVOLHFCQUFxQmdCLFdBQXJCLENBQWlDWixPQUFqQyxFQUEwQ1UsaUNBQTFDLENBQWY7O0FBRUFQLHdDQUE0Qk8saUNBQTVCO0FBQ0Q7O0FBRUQsY0FBTUcsdUJBQXVCZixpQkFBaUJHLEdBQWpCLEVBQTdCOztBQUVBQyx5QkFBZ0JXLHlCQUF5QkMsU0FBMUIsR0FDR1osWUFESCxHQUVLVyxxQkFBcUJFLEtBQXJCLENBQTJCYixZQUEzQixDQUZwQjs7QUFJQUosMkJBQWlCa0IsSUFBakIsQ0FBc0JkLFlBQXRCOztBQUVBRixvQkFBVUEsUUFBUWlCLFNBQVIsQ0FBa0JkLHlCQUFsQixDQUFWO0FBQ0QsU0ExQkQsTUEwQk87QUFDTCxjQUFNZSwyQ0FBMkN2QixvQkFBb0JZLHFCQUFwQixDQUEwQ1AsT0FBMUMsQ0FBakQ7O0FBRUEsY0FBSWtCLDZDQUE2QyxDQUFqRCxFQUFvRDtBQUNsRG5CLHdCQUFZLElBQVo7O0FBRUFHLDJCQUFlUCxvQkFBb0JhLGlCQUFwQixDQUFzQ1IsT0FBdEMsQ0FBZjs7QUFFQUcsd0NBQTRCRCxhQUFhTyxnQkFBYixFQUE1Qjs7QUFFQVgsNkJBQWlCa0IsSUFBakIsQ0FBc0JkLFlBQXRCOztBQUVBRixzQkFBVUEsUUFBUWlCLFNBQVIsQ0FBa0JkLHlCQUFsQixDQUFWO0FBQ0QsV0FWRCxNQVVPO0FBQ0xDLDRCQUFnQk8sbUJBQW1CTyx3Q0FBbkIsRUFBNkRkLGFBQTdELENBQWhCOztBQUVBLGdCQUFNZSxtQkFBbUJuQixRQUFRaUIsU0FBUixDQUFrQmIsYUFBbEIsQ0FBekI7O0FBRUFKLHNCQUFVQSxRQUFRaUIsU0FBUixDQUFrQixDQUFsQixFQUFxQmIsYUFBckIsQ0FBVjs7QUFFQU4sNkJBQWlCa0IsSUFBakIsQ0FBc0JoQixPQUF0Qjs7QUFFQUEsc0JBQVVtQixnQkFBVjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxhQUFPcEIsU0FBUDtBQUNEOzs7Ozs7QUFHSHFCLE9BQU9DLE9BQVAsR0FBaUJ4QixhQUFqQjs7QUFFQSxTQUFTYyxrQkFBVCxHQUE4QjtBQUM1QixNQUFNVyxTQUFTQyxNQUFNQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkJDLFNBQTNCLENBQWY7QUFBQSxNQUNNaEIscUJBQXFCVyxPQUFPTSxNQUFQLENBQWMsVUFBU2pCLGtCQUFULEVBQTZCa0IsS0FBN0IsRUFBb0M7QUFDckUsUUFBSUEsUUFBUSxDQUFDLENBQWIsRUFBZ0I7QUFDZGxCLDJCQUFzQkEsdUJBQXVCLElBQXhCLEdBQ0VtQixLQUFLQyxHQUFMLENBQVNwQixrQkFBVCxFQUE2QmtCLEtBQTdCLENBREYsR0FFSUEsS0FGekI7QUFHRDs7QUFFRCxXQUFPbEIsa0JBQVA7QUFDRCxHQVJvQixFQVFsQixJQVJrQixDQUQzQjs7QUFXQSxTQUFPQSxrQkFBUDtBQUNEIiwiZmlsZSI6ImNvbW1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5jb25zdCBFbmRPZkNvbW1lbnRUb2tlbiA9IHJlcXVpcmUoJy4uL3Rva2VuL25vblNpZ25pZmljYW50L2NvbW1lbnQvZW5kT2YnKSxcclxuICAgICAgU3RhcnRPZkNvbW1lbnRUb2tlbiA9IHJlcXVpcmUoJy4uL3Rva2VuL25vblNpZ25pZmljYW50L2NvbW1lbnQvc3RhcnRPZicpLFxyXG4gICAgICBNaWRkbGVPZkNvbW1lbnRUb2tlbiA9IHJlcXVpcmUoJy4uL3Rva2VuL25vblNpZ25pZmljYW50L2NvbW1lbnQvbWlkZGxlT2YnKTtcclxuXHJcbmNsYXNzIENvbW1lbnRUb2tlbnMge1xyXG4gIHN0YXRpYyBwYXNzKHRva2Vuc09yQ29udGVudHMsIGluQ29tbWVudCkge1xyXG4gICAgbGV0IGNvbnRlbnQgPSB0b2tlbnNPckNvbnRlbnRzLnBvcCgpLFxyXG4gICAgICAgIGNvbW1lbnRUb2tlbixcclxuICAgICAgICBjb21tZW50VG9rZW5Db250ZW50TGVuZ3RoO1xyXG5cclxuICAgIHdoaWxlIChjb250ZW50ICE9PSAnJykge1xyXG4gICAgICBsZXQgY29udGVudExlbmd0aCA9IGNvbnRlbnQubGVuZ3RoO1xyXG5cclxuICAgICAgaWYgKGluQ29tbWVudCkge1xyXG4gICAgICAgIGNvbnN0IGVuZE9mQ29tbWVudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50ID0gRW5kT2ZDb21tZW50VG9rZW4ucG9zaXRpb25XaXRoaW5Db250ZW50KGNvbnRlbnQpO1xyXG5cclxuICAgICAgICBpZiAoZW5kT2ZDb21tZW50VG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQgPT09IDApIHtcclxuICAgICAgICAgIGluQ29tbWVudCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgIGNvbW1lbnRUb2tlbiA9IEVuZE9mQ29tbWVudFRva2VuLmZyb21XaXRoaW5Db250ZW50KGNvbnRlbnQpO1xyXG5cclxuICAgICAgICAgIGNvbW1lbnRUb2tlbkNvbnRlbnRMZW5ndGggPSBjb21tZW50VG9rZW4uZ2V0Q29udGVudExlbmd0aCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCBtaWRkbGVPZkNvbW1lbnRUb2tlbkNvbnRlbnRMZW5ndGggPSBtaW5pbXVtQmFyTWludXNPbmUoZW5kT2ZDb21tZW50VG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQsIGNvbnRlbnRMZW5ndGgpO1xyXG5cclxuICAgICAgICAgIGNvbW1lbnRUb2tlbiA9IE1pZGRsZU9mQ29tbWVudFRva2VuLmZyb21Db250ZW50KGNvbnRlbnQsIG1pZGRsZU9mQ29tbWVudFRva2VuQ29udGVudExlbmd0aCk7XHJcblxyXG4gICAgICAgICAgY29tbWVudFRva2VuQ29udGVudExlbmd0aCA9IG1pZGRsZU9mQ29tbWVudFRva2VuQ29udGVudExlbmd0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHByZXZpb3VzQ29tbWVudFRva2VuID0gdG9rZW5zT3JDb250ZW50cy5wb3AoKTtcclxuXHJcbiAgICAgICAgY29tbWVudFRva2VuID0gKHByZXZpb3VzQ29tbWVudFRva2VuID09PSB1bmRlZmluZWQpID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50VG9rZW4gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21tZW50VG9rZW4ubWVyZ2UoY29tbWVudFRva2VuKTtcclxuXHJcbiAgICAgICAgdG9rZW5zT3JDb250ZW50cy5wdXNoKGNvbW1lbnRUb2tlbik7XHJcblxyXG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZyhjb21tZW50VG9rZW5Db250ZW50TGVuZ3RoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBzdGFydE9mQ29tbWVudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50ID0gU3RhcnRPZkNvbW1lbnRUb2tlbi5wb3NpdGlvbldpdGhpbkNvbnRlbnQoY29udGVudCk7XHJcblxyXG4gICAgICAgIGlmIChzdGFydE9mQ29tbWVudFRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50ID09PSAwKSB7XHJcbiAgICAgICAgICBpbkNvbW1lbnQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgIGNvbW1lbnRUb2tlbiA9IFN0YXJ0T2ZDb21tZW50VG9rZW4uZnJvbVdpdGhpbkNvbnRlbnQoY29udGVudCk7XHJcblxyXG4gICAgICAgICAgY29tbWVudFRva2VuQ29udGVudExlbmd0aCA9IGNvbW1lbnRUb2tlbi5nZXRDb250ZW50TGVuZ3RoKCk7XHJcblxyXG4gICAgICAgICAgdG9rZW5zT3JDb250ZW50cy5wdXNoKGNvbW1lbnRUb2tlbik7XHJcblxyXG4gICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKGNvbW1lbnRUb2tlbkNvbnRlbnRMZW5ndGgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb250ZW50TGVuZ3RoID0gbWluaW11bUJhck1pbnVzT25lKHN0YXJ0T2ZDb21tZW50VG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQsIGNvbnRlbnRMZW5ndGgpO1xyXG5cclxuICAgICAgICAgIGNvbnN0IHJlbWFpbmluZ0NvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZyhjb250ZW50TGVuZ3RoKTtcclxuXHJcbiAgICAgICAgICBjb250ZW50ID0gY29udGVudC5zdWJzdHJpbmcoMCwgY29udGVudExlbmd0aCk7XHJcblxyXG4gICAgICAgICAgdG9rZW5zT3JDb250ZW50cy5wdXNoKGNvbnRlbnQpO1xyXG5cclxuICAgICAgICAgIGNvbnRlbnQgPSByZW1haW5pbmdDb250ZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpbkNvbW1lbnQ7XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IENvbW1lbnRUb2tlbnM7XHJcblxyXG5mdW5jdGlvbiBtaW5pbXVtQmFyTWludXNPbmUoKSB7XHJcbiAgY29uc3QgdmFsdWVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxcclxuICAgICAgICBtaW5pbXVtQmFyTWludXNPbmUgPSB2YWx1ZXMucmVkdWNlKGZ1bmN0aW9uKG1pbmltdW1CYXJNaW51c09uZSwgdmFsdWUpIHtcclxuICAgICAgICAgIGlmICh2YWx1ZSA+IC0xKSB7XHJcbiAgICAgICAgICAgIG1pbmltdW1CYXJNaW51c09uZSA9IChtaW5pbXVtQmFyTWludXNPbmUgIT09IG51bGwpID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1pbihtaW5pbXVtQmFyTWludXNPbmUsIHZhbHVlKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTtcclxuICAgICAgICAgIH1cclxuICBcclxuICAgICAgICAgIHJldHVybiBtaW5pbXVtQmFyTWludXNPbmU7XHJcbiAgICAgICAgfSwgbnVsbCk7XHJcblxyXG4gIHJldHVybiBtaW5pbXVtQmFyTWludXNPbmU7XHJcbn1cclxuIl19