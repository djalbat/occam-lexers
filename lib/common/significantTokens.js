'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ErrorToken = require('../common/token/error');

var SignificantTokens = function () {
  function SignificantTokens() {
    _classCallCheck(this, SignificantTokens);
  }

  _createClass(SignificantTokens, null, [{
    key: 'pass',
    value: function pass(nonSignificantTokenOrSignificantContents, line, rules) {
      var tokens = nonSignificantTokenOrSignificantContents.reduce(function (tokens, nonSignificantTokenOrSignificantContent) {
        if (typeof nonSignificantTokenOrSignificantContent === 'string') {
          var significantContent = nonSignificantTokenOrSignificantContent,
              ///
          content = significantContent,
              ///
          depth = 0,
              significantTokens = significantTokensFromContent(content, line, rules, depth);

          tokens = tokens.concat(significantTokens);
        } else {
          var nonSignificantToken = nonSignificantTokenOrSignificantContent; ///

          tokens.push(nonSignificantToken);
        }

        return tokens;
      }, []);

      return tokens;
    }
  }]);

  return SignificantTokens;
}();

module.exports = SignificantTokens;

function significantTokensFromContent(content, line, rules, depth) {
  var significantTokens,
      rule = rules.getRule(depth);

  if (content === '') {
    significantTokens = [];
  } else if (rule === undefined) {
    var errorToken = ErrorToken.fromContent(content);

    significantTokens = [errorToken]; ///
  } else {
    var nextDepth = depth + 1,
        significantTokenPosition = rule.significantTokenPosition(content);

    if (significantTokenPosition === -1) {
      significantTokens = significantTokensFromContent(content, line, rules, nextDepth);
    } else {
      var significantToken = rule.significantTokenFromContent(content, line),
          significantTokenLength = significantToken.getLength(),
          left = significantTokenPosition,
          ///
      right = significantTokenPosition + significantTokenLength,
          ///
      leftContent = content.substr(0, left),
          rightContent = content.substr(right),
          leftSignificantTokens = significantTokensFromContent(leftContent, line, rules, nextDepth),
          rightSignificantTokens = significantTokensFromContent(rightContent, line, rules, depth);

      significantTokens = [].concat(leftSignificantTokens).concat(significantToken).concat(rightSignificantTokens);
    }
  }

  return significantTokens;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9jb21tb24vc2lnbmlmaWNhbnRUb2tlbnMuanMiXSwibmFtZXMiOlsiRXJyb3JUb2tlbiIsInJlcXVpcmUiLCJTaWduaWZpY2FudFRva2VucyIsIm5vblNpZ25pZmljYW50VG9rZW5PclNpZ25pZmljYW50Q29udGVudHMiLCJsaW5lIiwicnVsZXMiLCJ0b2tlbnMiLCJyZWR1Y2UiLCJub25TaWduaWZpY2FudFRva2VuT3JTaWduaWZpY2FudENvbnRlbnQiLCJzaWduaWZpY2FudENvbnRlbnQiLCJjb250ZW50IiwiZGVwdGgiLCJzaWduaWZpY2FudFRva2VucyIsInNpZ25pZmljYW50VG9rZW5zRnJvbUNvbnRlbnQiLCJjb25jYXQiLCJub25TaWduaWZpY2FudFRva2VuIiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiLCJydWxlIiwiZ2V0UnVsZSIsInVuZGVmaW5lZCIsImVycm9yVG9rZW4iLCJmcm9tQ29udGVudCIsIm5leHREZXB0aCIsInNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbiIsInNpZ25pZmljYW50VG9rZW4iLCJzaWduaWZpY2FudFRva2VuRnJvbUNvbnRlbnQiLCJzaWduaWZpY2FudFRva2VuTGVuZ3RoIiwiZ2V0TGVuZ3RoIiwibGVmdCIsInJpZ2h0IiwibGVmdENvbnRlbnQiLCJzdWJzdHIiLCJyaWdodENvbnRlbnQiLCJsZWZ0U2lnbmlmaWNhbnRUb2tlbnMiLCJyaWdodFNpZ25pZmljYW50VG9rZW5zIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBSUEsYUFBYUMsUUFBUSx1QkFBUixDQUFqQjs7SUFFTUMsaUI7Ozs7Ozs7eUJBQ1FDLHdDLEVBQTBDQyxJLEVBQU1DLEssRUFBTztBQUNqRSxVQUFJQyxTQUFTSCx5Q0FBeUNJLE1BQXpDLENBQWdELFVBQVNELE1BQVQsRUFBaUJFLHVDQUFqQixFQUEwRDtBQUNySCxZQUFJLE9BQU9BLHVDQUFQLEtBQW1ELFFBQXZELEVBQWlFO0FBQy9ELGNBQUlDLHFCQUFxQkQsdUNBQXpCO0FBQUEsY0FBbUU7QUFDL0RFLG9CQUFVRCxrQkFEZDtBQUFBLGNBQ2tDO0FBQzlCRSxrQkFBUSxDQUZaO0FBQUEsY0FHSUMsb0JBQW9CQyw2QkFBNkJILE9BQTdCLEVBQXNDTixJQUF0QyxFQUE0Q0MsS0FBNUMsRUFBbURNLEtBQW5ELENBSHhCOztBQUtBTCxtQkFBU0EsT0FBT1EsTUFBUCxDQUFjRixpQkFBZCxDQUFUO0FBQ0QsU0FQRCxNQU9PO0FBQ0wsY0FBSUcsc0JBQXNCUCx1Q0FBMUIsQ0FESyxDQUMrRDs7QUFFcEVGLGlCQUFPVSxJQUFQLENBQVlELG1CQUFaO0FBQ0Q7O0FBRUQsZUFBT1QsTUFBUDtBQUNELE9BZlksRUFlVixFQWZVLENBQWI7O0FBaUJBLGFBQU9BLE1BQVA7QUFDRDs7Ozs7O0FBR0hXLE9BQU9DLE9BQVAsR0FBaUJoQixpQkFBakI7O0FBRUEsU0FBU1csNEJBQVQsQ0FBc0NILE9BQXRDLEVBQStDTixJQUEvQyxFQUFxREMsS0FBckQsRUFBNERNLEtBQTVELEVBQW1FO0FBQ2pFLE1BQUlDLGlCQUFKO0FBQUEsTUFDSU8sT0FBT2QsTUFBTWUsT0FBTixDQUFjVCxLQUFkLENBRFg7O0FBR0EsTUFBSUQsWUFBWSxFQUFoQixFQUFvQjtBQUNsQkUsd0JBQW9CLEVBQXBCO0FBQ0QsR0FGRCxNQUVPLElBQUlPLFNBQVNFLFNBQWIsRUFBd0I7QUFDN0IsUUFBSUMsYUFBYXRCLFdBQVd1QixXQUFYLENBQXVCYixPQUF2QixDQUFqQjs7QUFFQUUsd0JBQW9CLENBQUNVLFVBQUQsQ0FBcEIsQ0FINkIsQ0FHSztBQUNuQyxHQUpNLE1BSUE7QUFDTCxRQUFJRSxZQUFZYixRQUFRLENBQXhCO0FBQUEsUUFDSWMsMkJBQTJCTixLQUFLTSx3QkFBTCxDQUE4QmYsT0FBOUIsQ0FEL0I7O0FBR0EsUUFBSWUsNkJBQTZCLENBQUMsQ0FBbEMsRUFBcUM7QUFDbkNiLDBCQUFvQkMsNkJBQTZCSCxPQUE3QixFQUFzQ04sSUFBdEMsRUFBNENDLEtBQTVDLEVBQW1EbUIsU0FBbkQsQ0FBcEI7QUFDRCxLQUZELE1BRU87QUFDTCxVQUFJRSxtQkFBbUJQLEtBQUtRLDJCQUFMLENBQWlDakIsT0FBakMsRUFBMENOLElBQTFDLENBQXZCO0FBQUEsVUFDSXdCLHlCQUF5QkYsaUJBQWlCRyxTQUFqQixFQUQ3QjtBQUFBLFVBRUlDLE9BQU9MLHdCQUZYO0FBQUEsVUFFc0M7QUFDbENNLGNBQVFOLDJCQUEyQkcsc0JBSHZDO0FBQUEsVUFHZ0U7QUFDNURJLG9CQUFjdEIsUUFBUXVCLE1BQVIsQ0FBZSxDQUFmLEVBQWtCSCxJQUFsQixDQUpsQjtBQUFBLFVBS0lJLGVBQWV4QixRQUFRdUIsTUFBUixDQUFlRixLQUFmLENBTG5CO0FBQUEsVUFNSUksd0JBQXdCdEIsNkJBQTZCbUIsV0FBN0IsRUFBMEM1QixJQUExQyxFQUFnREMsS0FBaEQsRUFBdURtQixTQUF2RCxDQU41QjtBQUFBLFVBT0lZLHlCQUF5QnZCLDZCQUE2QnFCLFlBQTdCLEVBQTJDOUIsSUFBM0MsRUFBaURDLEtBQWpELEVBQXdETSxLQUF4RCxDQVA3Qjs7QUFTQUMsMEJBQW9CLEdBQUdFLE1BQUgsQ0FBVXFCLHFCQUFWLEVBQWlDckIsTUFBakMsQ0FBd0NZLGdCQUF4QyxFQUEwRFosTUFBMUQsQ0FBaUVzQixzQkFBakUsQ0FBcEI7QUFDRDtBQUNGOztBQUVELFNBQU94QixpQkFBUDtBQUNEIiwiZmlsZSI6InNpZ25pZmljYW50VG9rZW5zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIEVycm9yVG9rZW4gPSByZXF1aXJlKCcuLi9jb21tb24vdG9rZW4vZXJyb3InKTtcclxuXHJcbmNsYXNzIFNpZ25pZmljYW50VG9rZW5zIHtcclxuICBzdGF0aWMgcGFzcyhub25TaWduaWZpY2FudFRva2VuT3JTaWduaWZpY2FudENvbnRlbnRzLCBsaW5lLCBydWxlcykge1xyXG4gICAgdmFyIHRva2VucyA9IG5vblNpZ25pZmljYW50VG9rZW5PclNpZ25pZmljYW50Q29udGVudHMucmVkdWNlKGZ1bmN0aW9uKHRva2Vucywgbm9uU2lnbmlmaWNhbnRUb2tlbk9yU2lnbmlmaWNhbnRDb250ZW50KSB7XHJcbiAgICAgIGlmICh0eXBlb2Ygbm9uU2lnbmlmaWNhbnRUb2tlbk9yU2lnbmlmaWNhbnRDb250ZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHZhciBzaWduaWZpY2FudENvbnRlbnQgPSBub25TaWduaWZpY2FudFRva2VuT3JTaWduaWZpY2FudENvbnRlbnQsICAvLy9cclxuICAgICAgICAgICAgY29udGVudCA9IHNpZ25pZmljYW50Q29udGVudCwgLy8vXHJcbiAgICAgICAgICAgIGRlcHRoID0gMCxcclxuICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlbnMgPSBzaWduaWZpY2FudFRva2Vuc0Zyb21Db250ZW50KGNvbnRlbnQsIGxpbmUsIHJ1bGVzLCBkZXB0aCk7XHJcblxyXG4gICAgICAgIHRva2VucyA9IHRva2Vucy5jb25jYXQoc2lnbmlmaWNhbnRUb2tlbnMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBub25TaWduaWZpY2FudFRva2VuID0gbm9uU2lnbmlmaWNhbnRUb2tlbk9yU2lnbmlmaWNhbnRDb250ZW50OyAgLy8vXHJcbiAgICAgICAgXHJcbiAgICAgICAgdG9rZW5zLnB1c2gobm9uU2lnbmlmaWNhbnRUb2tlbik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0b2tlbnM7XHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgcmV0dXJuIHRva2VucztcclxuICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU2lnbmlmaWNhbnRUb2tlbnM7XHJcblxyXG5mdW5jdGlvbiBzaWduaWZpY2FudFRva2Vuc0Zyb21Db250ZW50KGNvbnRlbnQsIGxpbmUsIHJ1bGVzLCBkZXB0aCkge1xyXG4gIHZhciBzaWduaWZpY2FudFRva2VucyxcclxuICAgICAgcnVsZSA9IHJ1bGVzLmdldFJ1bGUoZGVwdGgpO1xyXG5cclxuICBpZiAoY29udGVudCA9PT0gJycpIHtcclxuICAgIHNpZ25pZmljYW50VG9rZW5zID0gW107XHJcbiAgfSBlbHNlIGlmIChydWxlID09PSB1bmRlZmluZWQpIHtcclxuICAgIHZhciBlcnJvclRva2VuID0gRXJyb3JUb2tlbi5mcm9tQ29udGVudChjb250ZW50KTtcclxuXHJcbiAgICBzaWduaWZpY2FudFRva2VucyA9IFtlcnJvclRva2VuXTsgLy8vXHJcbiAgfSBlbHNlIHtcclxuICAgIHZhciBuZXh0RGVwdGggPSBkZXB0aCArIDEsXHJcbiAgICAgICAgc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uID0gcnVsZS5zaWduaWZpY2FudFRva2VuUG9zaXRpb24oY29udGVudCk7XHJcblxyXG4gICAgaWYgKHNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbiA9PT0gLTEpIHtcclxuICAgICAgc2lnbmlmaWNhbnRUb2tlbnMgPSBzaWduaWZpY2FudFRva2Vuc0Zyb21Db250ZW50KGNvbnRlbnQsIGxpbmUsIHJ1bGVzLCBuZXh0RGVwdGgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIHNpZ25pZmljYW50VG9rZW4gPSBydWxlLnNpZ25pZmljYW50VG9rZW5Gcm9tQ29udGVudChjb250ZW50LCBsaW5lKSxcclxuICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5MZW5ndGggPSBzaWduaWZpY2FudFRva2VuLmdldExlbmd0aCgpLFxyXG4gICAgICAgICAgbGVmdCA9IHNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbiwgIC8vL1xyXG4gICAgICAgICAgcmlnaHQgPSBzaWduaWZpY2FudFRva2VuUG9zaXRpb24gKyBzaWduaWZpY2FudFRva2VuTGVuZ3RoLCAgLy8vXHJcbiAgICAgICAgICBsZWZ0Q29udGVudCA9IGNvbnRlbnQuc3Vic3RyKDAsIGxlZnQpLFxyXG4gICAgICAgICAgcmlnaHRDb250ZW50ID0gY29udGVudC5zdWJzdHIocmlnaHQpLFxyXG4gICAgICAgICAgbGVmdFNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnNGcm9tQ29udGVudChsZWZ0Q29udGVudCwgbGluZSwgcnVsZXMsIG5leHREZXB0aCksXHJcbiAgICAgICAgICByaWdodFNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnNGcm9tQ29udGVudChyaWdodENvbnRlbnQsIGxpbmUsIHJ1bGVzLCBkZXB0aCk7XHJcblxyXG4gICAgICBzaWduaWZpY2FudFRva2VucyA9IFtdLmNvbmNhdChsZWZ0U2lnbmlmaWNhbnRUb2tlbnMpLmNvbmNhdChzaWduaWZpY2FudFRva2VuKS5jb25jYXQocmlnaHRTaWduaWZpY2FudFRva2Vucyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2lnbmlmaWNhbnRUb2tlbnM7XHJcbn1cclxuIl19