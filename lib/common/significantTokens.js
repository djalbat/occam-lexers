'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ErrorToken = require('../common/token/error');

var SignificantTokens = function () {
  function SignificantTokens() {
    _classCallCheck(this, SignificantTokens);
  }

  _createClass(SignificantTokens, null, [{
    key: 'pass',
    value: function pass(nonSignificantTokenOrSignificantContents, line, rules) {
      var tokens = nonSignificantTokenOrSignificantContents.reduce(function (tokens, nonSignificantTokenOrSignificantContent) {
        if (typeof nonSignificantTokenOrSignificantContent === 'string') {
          var significantContent = nonSignificantTokenOrSignificantContent,
              ///
          content = significantContent,
              ///
          depth = 0,
              significantTokens = significantTokensFromContent(content, line, rules, depth);

          tokens = tokens.concat(significantTokens);
        } else {
          var nonSignificantToken = nonSignificantTokenOrSignificantContent; ///

          tokens.push(nonSignificantToken);
        }

        return tokens;
      }, []);

      return tokens;
    }
  }]);

  return SignificantTokens;
}();

module.exports = SignificantTokens;

var RULE_IS_UNDEFINED_MESSAGE = 'There are no rules to parse this content.';

function significantTokensFromContent(content, line, rules, depth) {
  var significantTokens,
      rule = rules.getRule(depth),
      ruleIsUndefined = rule === undefined;

  if (content === '') {
    significantTokens = [];
  } else if (ruleIsUndefined) {
    var errorToken = ErrorToken.fromContent(content, line, RULE_IS_UNDEFINED_MESSAGE);

    significantTokens = [errorToken]; ///
  } else {
    var nextDepth = depth + 1,
        significantTokenPosition = rule.significantTokenPosition(content);

    if (significantTokenPosition === -1) {
      significantTokens = significantTokensFromContent(content, line, rules, nextDepth);
    } else {
      var significantToken = rule.significantTokenFromContent(content, line),
          significantTokenLength = significantToken.getLength(),
          left = significantTokenPosition,
          ///
      right = significantTokenPosition + significantTokenLength,
          ///
      leftContent = content.substr(0, left),
          rightContent = content.substr(right),
          leftSignificantTokens = significantTokensFromContent(leftContent, line, rules, nextDepth),
          rightSignificantTokens = significantTokensFromContent(rightContent, line, rules, depth);

      significantTokens = [].concat(leftSignificantTokens).concat(significantToken).concat(rightSignificantTokens);
    }
  }

  return significantTokens;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9jb21tb24vc2lnbmlmaWNhbnRUb2tlbnMuanMiXSwibmFtZXMiOlsiRXJyb3JUb2tlbiIsInJlcXVpcmUiLCJTaWduaWZpY2FudFRva2VucyIsIm5vblNpZ25pZmljYW50VG9rZW5PclNpZ25pZmljYW50Q29udGVudHMiLCJsaW5lIiwicnVsZXMiLCJ0b2tlbnMiLCJyZWR1Y2UiLCJub25TaWduaWZpY2FudFRva2VuT3JTaWduaWZpY2FudENvbnRlbnQiLCJzaWduaWZpY2FudENvbnRlbnQiLCJjb250ZW50IiwiZGVwdGgiLCJzaWduaWZpY2FudFRva2VucyIsInNpZ25pZmljYW50VG9rZW5zRnJvbUNvbnRlbnQiLCJjb25jYXQiLCJub25TaWduaWZpY2FudFRva2VuIiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiLCJSVUxFX0lTX1VOREVGSU5FRF9NRVNTQUdFIiwicnVsZSIsImdldFJ1bGUiLCJydWxlSXNVbmRlZmluZWQiLCJ1bmRlZmluZWQiLCJlcnJvclRva2VuIiwiZnJvbUNvbnRlbnQiLCJuZXh0RGVwdGgiLCJzaWduaWZpY2FudFRva2VuUG9zaXRpb24iLCJzaWduaWZpY2FudFRva2VuIiwic2lnbmlmaWNhbnRUb2tlbkZyb21Db250ZW50Iiwic2lnbmlmaWNhbnRUb2tlbkxlbmd0aCIsImdldExlbmd0aCIsImxlZnQiLCJyaWdodCIsImxlZnRDb250ZW50Iiwic3Vic3RyIiwicmlnaHRDb250ZW50IiwibGVmdFNpZ25pZmljYW50VG9rZW5zIiwicmlnaHRTaWduaWZpY2FudFRva2VucyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQUlBLGFBQWFDLFFBQVEsdUJBQVIsQ0FBakI7O0lBRU1DLGlCOzs7Ozs7O3lCQUNRQyx3QyxFQUEwQ0MsSSxFQUFNQyxLLEVBQU87QUFDakUsVUFBSUMsU0FBU0gseUNBQXlDSSxNQUF6QyxDQUFnRCxVQUFTRCxNQUFULEVBQWlCRSx1Q0FBakIsRUFBMEQ7QUFDckgsWUFBSSxPQUFPQSx1Q0FBUCxLQUFtRCxRQUF2RCxFQUFpRTtBQUMvRCxjQUFJQyxxQkFBcUJELHVDQUF6QjtBQUFBLGNBQW1FO0FBQy9ERSxvQkFBVUQsa0JBRGQ7QUFBQSxjQUNrQztBQUM5QkUsa0JBQVEsQ0FGWjtBQUFBLGNBR0lDLG9CQUFvQkMsNkJBQTZCSCxPQUE3QixFQUFzQ04sSUFBdEMsRUFBNENDLEtBQTVDLEVBQW1ETSxLQUFuRCxDQUh4Qjs7QUFLQUwsbUJBQVNBLE9BQU9RLE1BQVAsQ0FBY0YsaUJBQWQsQ0FBVDtBQUNELFNBUEQsTUFPTztBQUNMLGNBQUlHLHNCQUFzQlAsdUNBQTFCLENBREssQ0FDK0Q7O0FBRXBFRixpQkFBT1UsSUFBUCxDQUFZRCxtQkFBWjtBQUNEOztBQUVELGVBQU9ULE1BQVA7QUFDRCxPQWZZLEVBZVYsRUFmVSxDQUFiOztBQWlCQSxhQUFPQSxNQUFQO0FBQ0Q7Ozs7OztBQUdIVyxPQUFPQyxPQUFQLEdBQWlCaEIsaUJBQWpCOztBQUVBLElBQU1pQiw0QkFBNEIsMkNBQWxDOztBQUVBLFNBQVNOLDRCQUFULENBQXNDSCxPQUF0QyxFQUErQ04sSUFBL0MsRUFBcURDLEtBQXJELEVBQTRETSxLQUE1RCxFQUFtRTtBQUNqRSxNQUFJQyxpQkFBSjtBQUFBLE1BQ0lRLE9BQU9mLE1BQU1nQixPQUFOLENBQWNWLEtBQWQsQ0FEWDtBQUFBLE1BRUlXLGtCQUFtQkYsU0FBU0csU0FGaEM7O0FBSUEsTUFBSWIsWUFBWSxFQUFoQixFQUFvQjtBQUNsQkUsd0JBQW9CLEVBQXBCO0FBQ0QsR0FGRCxNQUVPLElBQUlVLGVBQUosRUFBcUI7QUFDMUIsUUFBSUUsYUFBYXhCLFdBQVd5QixXQUFYLENBQXVCZixPQUF2QixFQUFnQ04sSUFBaEMsRUFBc0NlLHlCQUF0QyxDQUFqQjs7QUFFQVAsd0JBQW9CLENBQUNZLFVBQUQsQ0FBcEIsQ0FIMEIsQ0FHUTtBQUNuQyxHQUpNLE1BSUE7QUFDTCxRQUFJRSxZQUFZZixRQUFRLENBQXhCO0FBQUEsUUFDSWdCLDJCQUEyQlAsS0FBS08sd0JBQUwsQ0FBOEJqQixPQUE5QixDQUQvQjs7QUFHQSxRQUFJaUIsNkJBQTZCLENBQUMsQ0FBbEMsRUFBcUM7QUFDbkNmLDBCQUFvQkMsNkJBQTZCSCxPQUE3QixFQUFzQ04sSUFBdEMsRUFBNENDLEtBQTVDLEVBQW1EcUIsU0FBbkQsQ0FBcEI7QUFDRCxLQUZELE1BRU87QUFDTCxVQUFJRSxtQkFBbUJSLEtBQUtTLDJCQUFMLENBQWlDbkIsT0FBakMsRUFBMENOLElBQTFDLENBQXZCO0FBQUEsVUFDSTBCLHlCQUF5QkYsaUJBQWlCRyxTQUFqQixFQUQ3QjtBQUFBLFVBRUlDLE9BQU9MLHdCQUZYO0FBQUEsVUFFc0M7QUFDbENNLGNBQVFOLDJCQUEyQkcsc0JBSHZDO0FBQUEsVUFHZ0U7QUFDNURJLG9CQUFjeEIsUUFBUXlCLE1BQVIsQ0FBZSxDQUFmLEVBQWtCSCxJQUFsQixDQUpsQjtBQUFBLFVBS0lJLGVBQWUxQixRQUFReUIsTUFBUixDQUFlRixLQUFmLENBTG5CO0FBQUEsVUFNSUksd0JBQXdCeEIsNkJBQTZCcUIsV0FBN0IsRUFBMEM5QixJQUExQyxFQUFnREMsS0FBaEQsRUFBdURxQixTQUF2RCxDQU41QjtBQUFBLFVBT0lZLHlCQUF5QnpCLDZCQUE2QnVCLFlBQTdCLEVBQTJDaEMsSUFBM0MsRUFBaURDLEtBQWpELEVBQXdETSxLQUF4RCxDQVA3Qjs7QUFTQUMsMEJBQW9CLEdBQUdFLE1BQUgsQ0FBVXVCLHFCQUFWLEVBQWlDdkIsTUFBakMsQ0FBd0NjLGdCQUF4QyxFQUEwRGQsTUFBMUQsQ0FBaUV3QixzQkFBakUsQ0FBcEI7QUFDRDtBQUNGOztBQUVELFNBQU8xQixpQkFBUDtBQUNEIiwiZmlsZSI6InNpZ25pZmljYW50VG9rZW5zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIEVycm9yVG9rZW4gPSByZXF1aXJlKCcuLi9jb21tb24vdG9rZW4vZXJyb3InKTtcclxuXHJcbmNsYXNzIFNpZ25pZmljYW50VG9rZW5zIHtcclxuICBzdGF0aWMgcGFzcyhub25TaWduaWZpY2FudFRva2VuT3JTaWduaWZpY2FudENvbnRlbnRzLCBsaW5lLCBydWxlcykge1xyXG4gICAgdmFyIHRva2VucyA9IG5vblNpZ25pZmljYW50VG9rZW5PclNpZ25pZmljYW50Q29udGVudHMucmVkdWNlKGZ1bmN0aW9uKHRva2Vucywgbm9uU2lnbmlmaWNhbnRUb2tlbk9yU2lnbmlmaWNhbnRDb250ZW50KSB7XHJcbiAgICAgIGlmICh0eXBlb2Ygbm9uU2lnbmlmaWNhbnRUb2tlbk9yU2lnbmlmaWNhbnRDb250ZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHZhciBzaWduaWZpY2FudENvbnRlbnQgPSBub25TaWduaWZpY2FudFRva2VuT3JTaWduaWZpY2FudENvbnRlbnQsICAvLy9cclxuICAgICAgICAgICAgY29udGVudCA9IHNpZ25pZmljYW50Q29udGVudCwgLy8vXHJcbiAgICAgICAgICAgIGRlcHRoID0gMCxcclxuICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlbnMgPSBzaWduaWZpY2FudFRva2Vuc0Zyb21Db250ZW50KGNvbnRlbnQsIGxpbmUsIHJ1bGVzLCBkZXB0aCk7XHJcblxyXG4gICAgICAgIHRva2VucyA9IHRva2Vucy5jb25jYXQoc2lnbmlmaWNhbnRUb2tlbnMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBub25TaWduaWZpY2FudFRva2VuID0gbm9uU2lnbmlmaWNhbnRUb2tlbk9yU2lnbmlmaWNhbnRDb250ZW50OyAgLy8vXHJcbiAgICAgICAgXHJcbiAgICAgICAgdG9rZW5zLnB1c2gobm9uU2lnbmlmaWNhbnRUb2tlbik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0b2tlbnM7XHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgcmV0dXJuIHRva2VucztcclxuICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gU2lnbmlmaWNhbnRUb2tlbnM7XHJcblxyXG5jb25zdCBSVUxFX0lTX1VOREVGSU5FRF9NRVNTQUdFID0gJ1RoZXJlIGFyZSBubyBydWxlcyB0byBwYXJzZSB0aGlzIGNvbnRlbnQuJztcclxuXHJcbmZ1bmN0aW9uIHNpZ25pZmljYW50VG9rZW5zRnJvbUNvbnRlbnQoY29udGVudCwgbGluZSwgcnVsZXMsIGRlcHRoKSB7XHJcbiAgdmFyIHNpZ25pZmljYW50VG9rZW5zLFxyXG4gICAgICBydWxlID0gcnVsZXMuZ2V0UnVsZShkZXB0aCksXHJcbiAgICAgIHJ1bGVJc1VuZGVmaW5lZCA9IChydWxlID09PSB1bmRlZmluZWQpO1xyXG5cclxuICBpZiAoY29udGVudCA9PT0gJycpIHtcclxuICAgIHNpZ25pZmljYW50VG9rZW5zID0gW107XHJcbiAgfSBlbHNlIGlmIChydWxlSXNVbmRlZmluZWQpIHtcclxuICAgIHZhciBlcnJvclRva2VuID0gRXJyb3JUb2tlbi5mcm9tQ29udGVudChjb250ZW50LCBsaW5lLCBSVUxFX0lTX1VOREVGSU5FRF9NRVNTQUdFKTtcclxuXHJcbiAgICBzaWduaWZpY2FudFRva2VucyA9IFtlcnJvclRva2VuXTsgLy8vXHJcbiAgfSBlbHNlIHtcclxuICAgIHZhciBuZXh0RGVwdGggPSBkZXB0aCArIDEsXHJcbiAgICAgICAgc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uID0gcnVsZS5zaWduaWZpY2FudFRva2VuUG9zaXRpb24oY29udGVudCk7XHJcblxyXG4gICAgaWYgKHNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbiA9PT0gLTEpIHtcclxuICAgICAgc2lnbmlmaWNhbnRUb2tlbnMgPSBzaWduaWZpY2FudFRva2Vuc0Zyb21Db250ZW50KGNvbnRlbnQsIGxpbmUsIHJ1bGVzLCBuZXh0RGVwdGgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIHNpZ25pZmljYW50VG9rZW4gPSBydWxlLnNpZ25pZmljYW50VG9rZW5Gcm9tQ29udGVudChjb250ZW50LCBsaW5lKSxcclxuICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5MZW5ndGggPSBzaWduaWZpY2FudFRva2VuLmdldExlbmd0aCgpLFxyXG4gICAgICAgICAgbGVmdCA9IHNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbiwgIC8vL1xyXG4gICAgICAgICAgcmlnaHQgPSBzaWduaWZpY2FudFRva2VuUG9zaXRpb24gKyBzaWduaWZpY2FudFRva2VuTGVuZ3RoLCAgLy8vXHJcbiAgICAgICAgICBsZWZ0Q29udGVudCA9IGNvbnRlbnQuc3Vic3RyKDAsIGxlZnQpLFxyXG4gICAgICAgICAgcmlnaHRDb250ZW50ID0gY29udGVudC5zdWJzdHIocmlnaHQpLFxyXG4gICAgICAgICAgbGVmdFNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnNGcm9tQ29udGVudChsZWZ0Q29udGVudCwgbGluZSwgcnVsZXMsIG5leHREZXB0aCksXHJcbiAgICAgICAgICByaWdodFNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnNGcm9tQ29udGVudChyaWdodENvbnRlbnQsIGxpbmUsIHJ1bGVzLCBkZXB0aCk7XHJcblxyXG4gICAgICBzaWduaWZpY2FudFRva2VucyA9IFtdLmNvbmNhdChsZWZ0U2lnbmlmaWNhbnRUb2tlbnMpLmNvbmNhdChzaWduaWZpY2FudFRva2VuKS5jb25jYXQocmlnaHRTaWduaWZpY2FudFRva2Vucyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2lnbmlmaWNhbnRUb2tlbnM7XHJcbn1cclxuIl19