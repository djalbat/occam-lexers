'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ErrorToken = require('../common/token/error');

var MAXIMUM_DEPTH = 10;

var SignificantTokens = function () {
  function SignificantTokens() {
    _classCallCheck(this, SignificantTokens);
  }

  _createClass(SignificantTokens, null, [{
    key: 'pass',
    value: function pass(nonSignificantTokenOrSignificantContents, line, rules) {
      var tokens = nonSignificantTokenOrSignificantContents.reduce(function (tokens, nonSignificantTokenOrSignificantContent) {
        if (typeof nonSignificantTokenOrSignificantContent === 'string') {
          var significantContent = nonSignificantTokenOrSignificantContent,
              ///
          content = significantContent,
              ///
          depth = 0,
              significantTokens = significantTokensFromContent(content, line, rules, depth);

          tokens = tokens.concat(significantTokens);
        } else {
          var nonSignificantToken = nonSignificantTokenOrSignificantContent; ///

          tokens.push(nonSignificantToken);
        }

        return tokens;
      }, []);

      return tokens;
    }
  }]);

  return SignificantTokens;
}();

module.exports = SignificantTokens;

function significantTokensFromContent(content, line, rules, depth) {
  var significantTokens,
      rule = rules.getRule(depth),
      tooDeep = depth > MAXIMUM_DEPTH,
      ruleIsUndefined = rule === undefined;

  if (content === '') {
    significantTokens = [];
  } else if (tooDeep || ruleIsUndefined) {
    var errorToken = ErrorToken.fromContent(content);

    significantTokens = [errorToken]; ///
  } else {
    var nextDepth = depth + 1,
        significantTokenPosition = rule.significantTokenPosition(content);

    if (significantTokenPosition === -1) {
      significantTokens = significantTokensFromContent(content, line, rules, nextDepth);
    } else {
      var significantToken = rule.significantTokenFromContent(content, line),
          significantTokenLength = significantToken.getLength(),
          left = significantTokenPosition,
          ///
      right = significantTokenPosition + significantTokenLength,
          ///
      leftContent = content.substr(0, left),
          rightContent = content.substr(right),
          leftSignificantTokens = significantTokensFromContent(leftContent, line, rules, nextDepth),
          rightSignificantTokens = significantTokensFromContent(rightContent, line, rules, depth);

      significantTokens = [].concat(leftSignificantTokens).concat(significantToken).concat(rightSignificantTokens);
    }
  }

  return significantTokens;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9jb21tb24vc2lnbmlmaWNhbnRUb2tlbnMuanMiXSwibmFtZXMiOlsiRXJyb3JUb2tlbiIsInJlcXVpcmUiLCJNQVhJTVVNX0RFUFRIIiwiU2lnbmlmaWNhbnRUb2tlbnMiLCJub25TaWduaWZpY2FudFRva2VuT3JTaWduaWZpY2FudENvbnRlbnRzIiwibGluZSIsInJ1bGVzIiwidG9rZW5zIiwicmVkdWNlIiwibm9uU2lnbmlmaWNhbnRUb2tlbk9yU2lnbmlmaWNhbnRDb250ZW50Iiwic2lnbmlmaWNhbnRDb250ZW50IiwiY29udGVudCIsImRlcHRoIiwic2lnbmlmaWNhbnRUb2tlbnMiLCJzaWduaWZpY2FudFRva2Vuc0Zyb21Db250ZW50IiwiY29uY2F0Iiwibm9uU2lnbmlmaWNhbnRUb2tlbiIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIiwicnVsZSIsImdldFJ1bGUiLCJ0b29EZWVwIiwicnVsZUlzVW5kZWZpbmVkIiwidW5kZWZpbmVkIiwiZXJyb3JUb2tlbiIsImZyb21Db250ZW50IiwibmV4dERlcHRoIiwic2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uIiwic2lnbmlmaWNhbnRUb2tlbiIsInNpZ25pZmljYW50VG9rZW5Gcm9tQ29udGVudCIsInNpZ25pZmljYW50VG9rZW5MZW5ndGgiLCJnZXRMZW5ndGgiLCJsZWZ0IiwicmlnaHQiLCJsZWZ0Q29udGVudCIsInN1YnN0ciIsInJpZ2h0Q29udGVudCIsImxlZnRTaWduaWZpY2FudFRva2VucyIsInJpZ2h0U2lnbmlmaWNhbnRUb2tlbnMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQSxJQUFJQSxhQUFhQyxRQUFRLHVCQUFSLENBQWpCOztBQUVBLElBQU1DLGdCQUFnQixFQUF0Qjs7SUFFTUMsaUI7Ozs7Ozs7eUJBQ1FDLHdDLEVBQTBDQyxJLEVBQU1DLEssRUFBTztBQUNqRSxVQUFJQyxTQUFTSCx5Q0FBeUNJLE1BQXpDLENBQWdELFVBQVNELE1BQVQsRUFBaUJFLHVDQUFqQixFQUEwRDtBQUNySCxZQUFJLE9BQU9BLHVDQUFQLEtBQW1ELFFBQXZELEVBQWlFO0FBQy9ELGNBQUlDLHFCQUFxQkQsdUNBQXpCO0FBQUEsY0FBbUU7QUFDL0RFLG9CQUFVRCxrQkFEZDtBQUFBLGNBQ2tDO0FBQzlCRSxrQkFBUSxDQUZaO0FBQUEsY0FHSUMsb0JBQW9CQyw2QkFBNkJILE9BQTdCLEVBQXNDTixJQUF0QyxFQUE0Q0MsS0FBNUMsRUFBbURNLEtBQW5ELENBSHhCOztBQUtBTCxtQkFBU0EsT0FBT1EsTUFBUCxDQUFjRixpQkFBZCxDQUFUO0FBQ0QsU0FQRCxNQU9PO0FBQ0wsY0FBSUcsc0JBQXNCUCx1Q0FBMUIsQ0FESyxDQUMrRDs7QUFFcEVGLGlCQUFPVSxJQUFQLENBQVlELG1CQUFaO0FBQ0Q7O0FBRUQsZUFBT1QsTUFBUDtBQUNELE9BZlksRUFlVixFQWZVLENBQWI7O0FBaUJBLGFBQU9BLE1BQVA7QUFDRDs7Ozs7O0FBR0hXLE9BQU9DLE9BQVAsR0FBaUJoQixpQkFBakI7O0FBRUEsU0FBU1csNEJBQVQsQ0FBc0NILE9BQXRDLEVBQStDTixJQUEvQyxFQUFxREMsS0FBckQsRUFBNERNLEtBQTVELEVBQW1FO0FBQ2pFLE1BQUlDLGlCQUFKO0FBQUEsTUFDSU8sT0FBT2QsTUFBTWUsT0FBTixDQUFjVCxLQUFkLENBRFg7QUFBQSxNQUVJVSxVQUFXVixRQUFRVixhQUZ2QjtBQUFBLE1BR0lxQixrQkFBbUJILFNBQVNJLFNBSGhDOztBQUtBLE1BQUliLFlBQVksRUFBaEIsRUFBb0I7QUFDbEJFLHdCQUFvQixFQUFwQjtBQUNELEdBRkQsTUFFTyxJQUFJUyxXQUFXQyxlQUFmLEVBQWdDO0FBQ3JDLFFBQUlFLGFBQWF6QixXQUFXMEIsV0FBWCxDQUF1QmYsT0FBdkIsQ0FBakI7O0FBRUFFLHdCQUFvQixDQUFDWSxVQUFELENBQXBCLENBSHFDLENBR0g7QUFDbkMsR0FKTSxNQUlBO0FBQ0wsUUFBSUUsWUFBWWYsUUFBUSxDQUF4QjtBQUFBLFFBQ0lnQiwyQkFBMkJSLEtBQUtRLHdCQUFMLENBQThCakIsT0FBOUIsQ0FEL0I7O0FBR0EsUUFBSWlCLDZCQUE2QixDQUFDLENBQWxDLEVBQXFDO0FBQ25DZiwwQkFBb0JDLDZCQUE2QkgsT0FBN0IsRUFBc0NOLElBQXRDLEVBQTRDQyxLQUE1QyxFQUFtRHFCLFNBQW5ELENBQXBCO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsVUFBSUUsbUJBQW1CVCxLQUFLVSwyQkFBTCxDQUFpQ25CLE9BQWpDLEVBQTBDTixJQUExQyxDQUF2QjtBQUFBLFVBQ0kwQix5QkFBeUJGLGlCQUFpQkcsU0FBakIsRUFEN0I7QUFBQSxVQUVJQyxPQUFPTCx3QkFGWDtBQUFBLFVBRXNDO0FBQ2xDTSxjQUFRTiwyQkFBMkJHLHNCQUh2QztBQUFBLFVBR2dFO0FBQzVESSxvQkFBY3hCLFFBQVF5QixNQUFSLENBQWUsQ0FBZixFQUFrQkgsSUFBbEIsQ0FKbEI7QUFBQSxVQUtJSSxlQUFlMUIsUUFBUXlCLE1BQVIsQ0FBZUYsS0FBZixDQUxuQjtBQUFBLFVBTUlJLHdCQUF3QnhCLDZCQUE2QnFCLFdBQTdCLEVBQTBDOUIsSUFBMUMsRUFBZ0RDLEtBQWhELEVBQXVEcUIsU0FBdkQsQ0FONUI7QUFBQSxVQU9JWSx5QkFBeUJ6Qiw2QkFBNkJ1QixZQUE3QixFQUEyQ2hDLElBQTNDLEVBQWlEQyxLQUFqRCxFQUF3RE0sS0FBeEQsQ0FQN0I7O0FBU0FDLDBCQUFvQixHQUFHRSxNQUFILENBQVV1QixxQkFBVixFQUFpQ3ZCLE1BQWpDLENBQXdDYyxnQkFBeEMsRUFBMERkLE1BQTFELENBQWlFd0Isc0JBQWpFLENBQXBCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPMUIsaUJBQVA7QUFDRCIsImZpbGUiOiJzaWduaWZpY2FudFRva2Vucy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBFcnJvclRva2VuID0gcmVxdWlyZSgnLi4vY29tbW9uL3Rva2VuL2Vycm9yJyk7XHJcblxyXG5jb25zdCBNQVhJTVVNX0RFUFRIID0gMTA7XHJcblxyXG5jbGFzcyBTaWduaWZpY2FudFRva2VucyB7XHJcbiAgc3RhdGljIHBhc3Mobm9uU2lnbmlmaWNhbnRUb2tlbk9yU2lnbmlmaWNhbnRDb250ZW50cywgbGluZSwgcnVsZXMpIHtcclxuICAgIHZhciB0b2tlbnMgPSBub25TaWduaWZpY2FudFRva2VuT3JTaWduaWZpY2FudENvbnRlbnRzLnJlZHVjZShmdW5jdGlvbih0b2tlbnMsIG5vblNpZ25pZmljYW50VG9rZW5PclNpZ25pZmljYW50Q29udGVudCkge1xyXG4gICAgICBpZiAodHlwZW9mIG5vblNpZ25pZmljYW50VG9rZW5PclNpZ25pZmljYW50Q29udGVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICB2YXIgc2lnbmlmaWNhbnRDb250ZW50ID0gbm9uU2lnbmlmaWNhbnRUb2tlbk9yU2lnbmlmaWNhbnRDb250ZW50LCAgLy8vXHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSBzaWduaWZpY2FudENvbnRlbnQsIC8vL1xyXG4gICAgICAgICAgICBkZXB0aCA9IDAsXHJcbiAgICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnNGcm9tQ29udGVudChjb250ZW50LCBsaW5lLCBydWxlcywgZGVwdGgpO1xyXG5cclxuICAgICAgICB0b2tlbnMgPSB0b2tlbnMuY29uY2F0KHNpZ25pZmljYW50VG9rZW5zKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgbm9uU2lnbmlmaWNhbnRUb2tlbiA9IG5vblNpZ25pZmljYW50VG9rZW5PclNpZ25pZmljYW50Q29udGVudDsgIC8vL1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRva2Vucy5wdXNoKG5vblNpZ25pZmljYW50VG9rZW4pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdG9rZW5zO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIHJldHVybiB0b2tlbnM7XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFNpZ25pZmljYW50VG9rZW5zO1xyXG5cclxuZnVuY3Rpb24gc2lnbmlmaWNhbnRUb2tlbnNGcm9tQ29udGVudChjb250ZW50LCBsaW5lLCBydWxlcywgZGVwdGgpIHtcclxuICB2YXIgc2lnbmlmaWNhbnRUb2tlbnMsXHJcbiAgICAgIHJ1bGUgPSBydWxlcy5nZXRSdWxlKGRlcHRoKSxcclxuICAgICAgdG9vRGVlcCA9IChkZXB0aCA+IE1BWElNVU1fREVQVEgpLFxyXG4gICAgICBydWxlSXNVbmRlZmluZWQgPSAocnVsZSA9PT0gdW5kZWZpbmVkKTtcclxuXHJcbiAgaWYgKGNvbnRlbnQgPT09ICcnKSB7XHJcbiAgICBzaWduaWZpY2FudFRva2VucyA9IFtdO1xyXG4gIH0gZWxzZSBpZiAodG9vRGVlcCB8fCBydWxlSXNVbmRlZmluZWQpIHtcclxuICAgIHZhciBlcnJvclRva2VuID0gRXJyb3JUb2tlbi5mcm9tQ29udGVudChjb250ZW50KTtcclxuXHJcbiAgICBzaWduaWZpY2FudFRva2VucyA9IFtlcnJvclRva2VuXTsgLy8vXHJcbiAgfSBlbHNlIHtcclxuICAgIHZhciBuZXh0RGVwdGggPSBkZXB0aCArIDEsXHJcbiAgICAgICAgc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uID0gcnVsZS5zaWduaWZpY2FudFRva2VuUG9zaXRpb24oY29udGVudCk7XHJcblxyXG4gICAgaWYgKHNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbiA9PT0gLTEpIHtcclxuICAgICAgc2lnbmlmaWNhbnRUb2tlbnMgPSBzaWduaWZpY2FudFRva2Vuc0Zyb21Db250ZW50KGNvbnRlbnQsIGxpbmUsIHJ1bGVzLCBuZXh0RGVwdGgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIHNpZ25pZmljYW50VG9rZW4gPSBydWxlLnNpZ25pZmljYW50VG9rZW5Gcm9tQ29udGVudChjb250ZW50LCBsaW5lKSxcclxuICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5MZW5ndGggPSBzaWduaWZpY2FudFRva2VuLmdldExlbmd0aCgpLFxyXG4gICAgICAgICAgbGVmdCA9IHNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbiwgIC8vL1xyXG4gICAgICAgICAgcmlnaHQgPSBzaWduaWZpY2FudFRva2VuUG9zaXRpb24gKyBzaWduaWZpY2FudFRva2VuTGVuZ3RoLCAgLy8vXHJcbiAgICAgICAgICBsZWZ0Q29udGVudCA9IGNvbnRlbnQuc3Vic3RyKDAsIGxlZnQpLFxyXG4gICAgICAgICAgcmlnaHRDb250ZW50ID0gY29udGVudC5zdWJzdHIocmlnaHQpLFxyXG4gICAgICAgICAgbGVmdFNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnNGcm9tQ29udGVudChsZWZ0Q29udGVudCwgbGluZSwgcnVsZXMsIG5leHREZXB0aCksXHJcbiAgICAgICAgICByaWdodFNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnNGcm9tQ29udGVudChyaWdodENvbnRlbnQsIGxpbmUsIHJ1bGVzLCBkZXB0aCk7XHJcblxyXG4gICAgICBzaWduaWZpY2FudFRva2VucyA9IFtdLmNvbmNhdChsZWZ0U2lnbmlmaWNhbnRUb2tlbnMpLmNvbmNhdChzaWduaWZpY2FudFRva2VuKS5jb25jYXQocmlnaHRTaWduaWZpY2FudFRva2Vucyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2lnbmlmaWNhbnRUb2tlbnM7XHJcbn1cclxuIl19