'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ErrorToken = require('../common/token/error');

var SignificantTokens = function () {
  function SignificantTokens() {
    _classCallCheck(this, SignificantTokens);
  }

  _createClass(SignificantTokens, null, [{
    key: 'pass',
    value: function pass(tokensOrContents, line, rules) {
      var tokens = tokensOrContents.reduce(function (tokens, tokenOrRemainingContent) {
        if (typeof tokenOrRemainingContent === 'string') {
          var content = tokenOrRemainingContent,
              ///
          depth = 0,
              significantTokens = significantTokensFromContentAndLine(content, line, rules, depth);

          tokens = tokens.concat(significantTokens);
        } else {
          var nonSignificantToken = tokenOrRemainingContent; ///

          tokens.push(nonSignificantToken);
        }

        return tokens;
      }, []);

      return tokens;
    }
  }]);

  return SignificantTokens;
}();

module.exports = SignificantTokens;

function significantTokensFromContentAndLine(content, line, rules, depth) {
  var significantTokens,
      rule = rules.getRule(depth),
      ruleIsUndefined = rule === undefined;

  if (content === '') {
    significantTokens = [];
  } else if (ruleIsUndefined) {
    var errorToken = ErrorToken.fromContentAndLine(content, line),
        errorTokens = [errorToken];

    significantTokens = errorTokens; ///
  } else {
    var nextDepth = depth + 1,
        significantTokenPosition = rule.significantTokenPosition(content);

    if (significantTokenPosition === -1) {
      significantTokens = significantTokensFromContentAndLine(content, line, rules, nextDepth);
    } else {
      var significantToken = rule.significantTokenFromContentAndLine(content, line),
          significantTokenLength = significantToken.getLength(),
          left = significantTokenPosition,
          ///
      right = significantTokenPosition + significantTokenLength,
          ///
      leftContent = content.substr(0, left),
          rightContent = content.substr(right),
          leftSignificantTokens = significantTokensFromContentAndLine(leftContent, line, rules, nextDepth),
          rightSignificantTokens = significantTokensFromContentAndLine(rightContent, line, rules, depth);

      significantTokens = [].concat(leftSignificantTokens).concat(significantToken).concat(rightSignificantTokens);
    }
  }

  return significantTokens;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9jb21tb24vc2lnbmlmaWNhbnRUb2tlbnMuanMiXSwibmFtZXMiOlsiRXJyb3JUb2tlbiIsInJlcXVpcmUiLCJTaWduaWZpY2FudFRva2VucyIsInRva2Vuc09yQ29udGVudHMiLCJsaW5lIiwicnVsZXMiLCJ0b2tlbnMiLCJyZWR1Y2UiLCJ0b2tlbk9yUmVtYWluaW5nQ29udGVudCIsImNvbnRlbnQiLCJkZXB0aCIsInNpZ25pZmljYW50VG9rZW5zIiwic2lnbmlmaWNhbnRUb2tlbnNGcm9tQ29udGVudEFuZExpbmUiLCJjb25jYXQiLCJub25TaWduaWZpY2FudFRva2VuIiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiLCJydWxlIiwiZ2V0UnVsZSIsInJ1bGVJc1VuZGVmaW5lZCIsInVuZGVmaW5lZCIsImVycm9yVG9rZW4iLCJmcm9tQ29udGVudEFuZExpbmUiLCJlcnJvclRva2VucyIsIm5leHREZXB0aCIsInNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbiIsInNpZ25pZmljYW50VG9rZW4iLCJzaWduaWZpY2FudFRva2VuRnJvbUNvbnRlbnRBbmRMaW5lIiwic2lnbmlmaWNhbnRUb2tlbkxlbmd0aCIsImdldExlbmd0aCIsImxlZnQiLCJyaWdodCIsImxlZnRDb250ZW50Iiwic3Vic3RyIiwicmlnaHRDb250ZW50IiwibGVmdFNpZ25pZmljYW50VG9rZW5zIiwicmlnaHRTaWduaWZpY2FudFRva2VucyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQUlBLGFBQWFDLFFBQVEsdUJBQVIsQ0FBakI7O0lBRU1DLGlCOzs7Ozs7O3lCQUNRQyxnQixFQUFrQkMsSSxFQUFNQyxLLEVBQU87QUFDekMsVUFBSUMsU0FBU0gsaUJBQWlCSSxNQUFqQixDQUF3QixVQUFTRCxNQUFULEVBQWlCRSx1QkFBakIsRUFBMEM7QUFDN0UsWUFBSSxPQUFPQSx1QkFBUCxLQUFtQyxRQUF2QyxFQUFpRDtBQUMvQyxjQUFJQyxVQUFVRCx1QkFBZDtBQUFBLGNBQXdDO0FBQ3BDRSxrQkFBUSxDQURaO0FBQUEsY0FFSUMsb0JBQW9CQyxvQ0FBb0NILE9BQXBDLEVBQTZDTCxJQUE3QyxFQUFtREMsS0FBbkQsRUFBMERLLEtBQTFELENBRnhCOztBQUlBSixtQkFBU0EsT0FBT08sTUFBUCxDQUFjRixpQkFBZCxDQUFUO0FBQ0QsU0FORCxNQU1PO0FBQ0wsY0FBSUcsc0JBQXNCTix1QkFBMUIsQ0FESyxDQUMrQzs7QUFFcERGLGlCQUFPUyxJQUFQLENBQVlELG1CQUFaO0FBQ0Q7O0FBRUQsZUFBT1IsTUFBUDtBQUNELE9BZFksRUFjVixFQWRVLENBQWI7O0FBZ0JBLGFBQU9BLE1BQVA7QUFDRDs7Ozs7O0FBR0hVLE9BQU9DLE9BQVAsR0FBaUJmLGlCQUFqQjs7QUFFQSxTQUFTVSxtQ0FBVCxDQUE2Q0gsT0FBN0MsRUFBc0RMLElBQXRELEVBQTREQyxLQUE1RCxFQUFtRUssS0FBbkUsRUFBMEU7QUFDeEUsTUFBSUMsaUJBQUo7QUFBQSxNQUNJTyxPQUFPYixNQUFNYyxPQUFOLENBQWNULEtBQWQsQ0FEWDtBQUFBLE1BRUlVLGtCQUFtQkYsU0FBU0csU0FGaEM7O0FBSUEsTUFBSVosWUFBWSxFQUFoQixFQUFvQjtBQUNsQkUsd0JBQW9CLEVBQXBCO0FBQ0QsR0FGRCxNQUVPLElBQUlTLGVBQUosRUFBcUI7QUFDMUIsUUFBSUUsYUFBYXRCLFdBQVd1QixrQkFBWCxDQUE4QmQsT0FBOUIsRUFBdUNMLElBQXZDLENBQWpCO0FBQUEsUUFDSW9CLGNBQWMsQ0FBQ0YsVUFBRCxDQURsQjs7QUFHQVgsd0JBQW9CYSxXQUFwQixDQUowQixDQUlRO0FBQ25DLEdBTE0sTUFLQTtBQUNMLFFBQUlDLFlBQVlmLFFBQVEsQ0FBeEI7QUFBQSxRQUNJZ0IsMkJBQTJCUixLQUFLUSx3QkFBTCxDQUE4QmpCLE9BQTlCLENBRC9COztBQUdBLFFBQUlpQiw2QkFBNkIsQ0FBQyxDQUFsQyxFQUFxQztBQUNuQ2YsMEJBQW9CQyxvQ0FBb0NILE9BQXBDLEVBQTZDTCxJQUE3QyxFQUFtREMsS0FBbkQsRUFBMERvQixTQUExRCxDQUFwQjtBQUNELEtBRkQsTUFFTztBQUNMLFVBQUlFLG1CQUFtQlQsS0FBS1Usa0NBQUwsQ0FBd0NuQixPQUF4QyxFQUFpREwsSUFBakQsQ0FBdkI7QUFBQSxVQUNJeUIseUJBQXlCRixpQkFBaUJHLFNBQWpCLEVBRDdCO0FBQUEsVUFFSUMsT0FBT0wsd0JBRlg7QUFBQSxVQUVzQztBQUNsQ00sY0FBUU4sMkJBQTJCRyxzQkFIdkM7QUFBQSxVQUdnRTtBQUM1REksb0JBQWN4QixRQUFReUIsTUFBUixDQUFlLENBQWYsRUFBa0JILElBQWxCLENBSmxCO0FBQUEsVUFLSUksZUFBZTFCLFFBQVF5QixNQUFSLENBQWVGLEtBQWYsQ0FMbkI7QUFBQSxVQU1JSSx3QkFBd0J4QixvQ0FBb0NxQixXQUFwQyxFQUFpRDdCLElBQWpELEVBQXVEQyxLQUF2RCxFQUE4RG9CLFNBQTlELENBTjVCO0FBQUEsVUFPSVkseUJBQXlCekIsb0NBQW9DdUIsWUFBcEMsRUFBa0QvQixJQUFsRCxFQUF3REMsS0FBeEQsRUFBK0RLLEtBQS9ELENBUDdCOztBQVNBQywwQkFBb0IsR0FBR0UsTUFBSCxDQUFVdUIscUJBQVYsRUFBaUN2QixNQUFqQyxDQUF3Q2MsZ0JBQXhDLEVBQTBEZCxNQUExRCxDQUFpRXdCLHNCQUFqRSxDQUFwQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBTzFCLGlCQUFQO0FBQ0QiLCJmaWxlIjoic2lnbmlmaWNhbnRUb2tlbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgRXJyb3JUb2tlbiA9IHJlcXVpcmUoJy4uL2NvbW1vbi90b2tlbi9lcnJvcicpO1xyXG5cclxuY2xhc3MgU2lnbmlmaWNhbnRUb2tlbnMge1xyXG4gIHN0YXRpYyBwYXNzKHRva2Vuc09yQ29udGVudHMsIGxpbmUsIHJ1bGVzKSB7XHJcbiAgICB2YXIgdG9rZW5zID0gdG9rZW5zT3JDb250ZW50cy5yZWR1Y2UoZnVuY3Rpb24odG9rZW5zLCB0b2tlbk9yUmVtYWluaW5nQ29udGVudCkge1xyXG4gICAgICBpZiAodHlwZW9mIHRva2VuT3JSZW1haW5pbmdDb250ZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gdG9rZW5PclJlbWFpbmluZ0NvbnRlbnQsICAvLy9cclxuICAgICAgICAgICAgZGVwdGggPSAwLFxyXG4gICAgICAgICAgICBzaWduaWZpY2FudFRva2VucyA9IHNpZ25pZmljYW50VG9rZW5zRnJvbUNvbnRlbnRBbmRMaW5lKGNvbnRlbnQsIGxpbmUsIHJ1bGVzLCBkZXB0aCk7XHJcblxyXG4gICAgICAgIHRva2VucyA9IHRva2Vucy5jb25jYXQoc2lnbmlmaWNhbnRUb2tlbnMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBub25TaWduaWZpY2FudFRva2VuID0gdG9rZW5PclJlbWFpbmluZ0NvbnRlbnQ7ICAvLy9cclxuICAgICAgICBcclxuICAgICAgICB0b2tlbnMucHVzaChub25TaWduaWZpY2FudFRva2VuKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRva2VucztcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICByZXR1cm4gdG9rZW5zO1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTaWduaWZpY2FudFRva2VucztcclxuXHJcbmZ1bmN0aW9uIHNpZ25pZmljYW50VG9rZW5zRnJvbUNvbnRlbnRBbmRMaW5lKGNvbnRlbnQsIGxpbmUsIHJ1bGVzLCBkZXB0aCkge1xyXG4gIHZhciBzaWduaWZpY2FudFRva2VucyxcclxuICAgICAgcnVsZSA9IHJ1bGVzLmdldFJ1bGUoZGVwdGgpLFxyXG4gICAgICBydWxlSXNVbmRlZmluZWQgPSAocnVsZSA9PT0gdW5kZWZpbmVkKTtcclxuXHJcbiAgaWYgKGNvbnRlbnQgPT09ICcnKSB7XHJcbiAgICBzaWduaWZpY2FudFRva2VucyA9IFtdO1xyXG4gIH0gZWxzZSBpZiAocnVsZUlzVW5kZWZpbmVkKSB7XHJcbiAgICB2YXIgZXJyb3JUb2tlbiA9IEVycm9yVG9rZW4uZnJvbUNvbnRlbnRBbmRMaW5lKGNvbnRlbnQsIGxpbmUpLFxyXG4gICAgICAgIGVycm9yVG9rZW5zID0gW2Vycm9yVG9rZW5dO1xyXG5cclxuICAgIHNpZ25pZmljYW50VG9rZW5zID0gZXJyb3JUb2tlbnM7ICAvLy9cclxuICB9IGVsc2Uge1xyXG4gICAgdmFyIG5leHREZXB0aCA9IGRlcHRoICsgMSxcclxuICAgICAgICBzaWduaWZpY2FudFRva2VuUG9zaXRpb24gPSBydWxlLnNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbihjb250ZW50KTtcclxuXHJcbiAgICBpZiAoc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uID09PSAtMSkge1xyXG4gICAgICBzaWduaWZpY2FudFRva2VucyA9IHNpZ25pZmljYW50VG9rZW5zRnJvbUNvbnRlbnRBbmRMaW5lKGNvbnRlbnQsIGxpbmUsIHJ1bGVzLCBuZXh0RGVwdGgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIHNpZ25pZmljYW50VG9rZW4gPSBydWxlLnNpZ25pZmljYW50VG9rZW5Gcm9tQ29udGVudEFuZExpbmUoY29udGVudCwgbGluZSksXHJcbiAgICAgICAgICBzaWduaWZpY2FudFRva2VuTGVuZ3RoID0gc2lnbmlmaWNhbnRUb2tlbi5nZXRMZW5ndGgoKSxcclxuICAgICAgICAgIGxlZnQgPSBzaWduaWZpY2FudFRva2VuUG9zaXRpb24sICAvLy9cclxuICAgICAgICAgIHJpZ2h0ID0gc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uICsgc2lnbmlmaWNhbnRUb2tlbkxlbmd0aCwgIC8vL1xyXG4gICAgICAgICAgbGVmdENvbnRlbnQgPSBjb250ZW50LnN1YnN0cigwLCBsZWZ0KSxcclxuICAgICAgICAgIHJpZ2h0Q29udGVudCA9IGNvbnRlbnQuc3Vic3RyKHJpZ2h0KSxcclxuICAgICAgICAgIGxlZnRTaWduaWZpY2FudFRva2VucyA9IHNpZ25pZmljYW50VG9rZW5zRnJvbUNvbnRlbnRBbmRMaW5lKGxlZnRDb250ZW50LCBsaW5lLCBydWxlcywgbmV4dERlcHRoKSxcclxuICAgICAgICAgIHJpZ2h0U2lnbmlmaWNhbnRUb2tlbnMgPSBzaWduaWZpY2FudFRva2Vuc0Zyb21Db250ZW50QW5kTGluZShyaWdodENvbnRlbnQsIGxpbmUsIHJ1bGVzLCBkZXB0aCk7XHJcblxyXG4gICAgICBzaWduaWZpY2FudFRva2VucyA9IFtdLmNvbmNhdChsZWZ0U2lnbmlmaWNhbnRUb2tlbnMpLmNvbmNhdChzaWduaWZpY2FudFRva2VuKS5jb25jYXQocmlnaHRTaWduaWZpY2FudFRva2Vucyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2lnbmlmaWNhbnRUb2tlbnM7XHJcbn1cclxuIl19