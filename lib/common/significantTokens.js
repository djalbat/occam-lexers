'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ErrorToken = require('../common/token/error');

var SignificantTokens = function () {
  function SignificantTokens() {
    _classCallCheck(this, SignificantTokens);
  }

  _createClass(SignificantTokens, null, [{
    key: 'pass',
    value: function pass(nonSignificantTokenOrSignificantContents, line, rules) {
      var tokens = nonSignificantTokenOrSignificantContents.reduce(function (tokens, nonSignificantTokenOrSignificantContent) {
        if (typeof nonSignificantTokenOrSignificantContent === 'string') {
          var significantContent = nonSignificantTokenOrSignificantContent,
              ///
          content = significantContent,
              ///
          depth = 0,
              significantOrErrorTokens = significantOrErrorTokensFromContent(content, line, rules, depth);

          tokens = tokens.concat(significantOrErrorTokens);
        } else {
          var nonSignificantToken = nonSignificantTokenOrSignificantContent; ///

          tokens.push(nonSignificantToken);
        }

        return tokens;
      }, []);

      return tokens;
    }
  }]);

  return SignificantTokens;
}();

module.exports = SignificantTokens;

var RULE_IS_UNDEFINED_MESSAGE = 'There are no rules to parse this content.';

function significantOrErrorTokensFromContent(content, line, rules, depth) {
  var significantOrErrorTokens,
      rule = rules.getRule(depth),
      ruleIsUndefined = rule === undefined;

  if (content === '') {
    significantOrErrorTokens = [];
  } else if (ruleIsUndefined) {
    var errorToken = new ErrorToken(content, line, RULE_IS_UNDEFINED_MESSAGE),
        errorTokens = [errorToken];

    significantOrErrorTokens = errorTokens;
  } else {
    var nextDepth = depth + 1,
        significantTokenPosition = rule.significantTokenPosition(content);

    if (significantTokenPosition === -1) {
      significantOrErrorTokens = significantOrErrorTokensFromContent(content, line, rules, nextDepth);
    } else {
      var significantToken = rule.significantTokenFromContent(content, line),
          significantTokenLength = significantToken.getLength(),
          left = significantTokenPosition,
          ///
      right = significantTokenPosition + significantTokenLength,
          ///
      leftContent = content.substr(0, left),
          rightContent = content.substr(right),
          leftSignificantTokens = significantOrErrorTokensFromContent(leftContent, line, rules, nextDepth),
          rightSignificantTokens = significantOrErrorTokensFromContent(rightContent, line, rules, depth),
          significantTokens = [].concat(leftSignificantTokens).concat(significantToken).concat(rightSignificantTokens);

      significantOrErrorTokens = significantTokens;
    }
  }

  return significantOrErrorTokens;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9jb21tb24vc2lnbmlmaWNhbnRUb2tlbnMuanMiXSwibmFtZXMiOlsiRXJyb3JUb2tlbiIsInJlcXVpcmUiLCJTaWduaWZpY2FudFRva2VucyIsIm5vblNpZ25pZmljYW50VG9rZW5PclNpZ25pZmljYW50Q29udGVudHMiLCJsaW5lIiwicnVsZXMiLCJ0b2tlbnMiLCJyZWR1Y2UiLCJub25TaWduaWZpY2FudFRva2VuT3JTaWduaWZpY2FudENvbnRlbnQiLCJzaWduaWZpY2FudENvbnRlbnQiLCJjb250ZW50IiwiZGVwdGgiLCJzaWduaWZpY2FudE9yRXJyb3JUb2tlbnMiLCJzaWduaWZpY2FudE9yRXJyb3JUb2tlbnNGcm9tQ29udGVudCIsImNvbmNhdCIsIm5vblNpZ25pZmljYW50VG9rZW4iLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyIsIlJVTEVfSVNfVU5ERUZJTkVEX01FU1NBR0UiLCJydWxlIiwiZ2V0UnVsZSIsInJ1bGVJc1VuZGVmaW5lZCIsInVuZGVmaW5lZCIsImVycm9yVG9rZW4iLCJlcnJvclRva2VucyIsIm5leHREZXB0aCIsInNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbiIsInNpZ25pZmljYW50VG9rZW4iLCJzaWduaWZpY2FudFRva2VuRnJvbUNvbnRlbnQiLCJzaWduaWZpY2FudFRva2VuTGVuZ3RoIiwiZ2V0TGVuZ3RoIiwibGVmdCIsInJpZ2h0IiwibGVmdENvbnRlbnQiLCJzdWJzdHIiLCJyaWdodENvbnRlbnQiLCJsZWZ0U2lnbmlmaWNhbnRUb2tlbnMiLCJyaWdodFNpZ25pZmljYW50VG9rZW5zIiwic2lnbmlmaWNhbnRUb2tlbnMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQSxJQUFJQSxhQUFhQyxRQUFRLHVCQUFSLENBQWpCOztJQUVNQyxpQjs7Ozs7Ozt5QkFDUUMsd0MsRUFBMENDLEksRUFBTUMsSyxFQUFPO0FBQ2pFLFVBQUlDLFNBQVNILHlDQUF5Q0ksTUFBekMsQ0FBZ0QsVUFBU0QsTUFBVCxFQUFpQkUsdUNBQWpCLEVBQTBEO0FBQ3JILFlBQUksT0FBT0EsdUNBQVAsS0FBbUQsUUFBdkQsRUFBaUU7QUFDL0QsY0FBSUMscUJBQXFCRCx1Q0FBekI7QUFBQSxjQUFtRTtBQUMvREUsb0JBQVVELGtCQURkO0FBQUEsY0FDa0M7QUFDOUJFLGtCQUFRLENBRlo7QUFBQSxjQUdJQywyQkFBMkJDLG9DQUFvQ0gsT0FBcEMsRUFBNkNOLElBQTdDLEVBQW1EQyxLQUFuRCxFQUEwRE0sS0FBMUQsQ0FIL0I7O0FBS0FMLG1CQUFTQSxPQUFPUSxNQUFQLENBQWNGLHdCQUFkLENBQVQ7QUFDRCxTQVBELE1BT087QUFDTCxjQUFJRyxzQkFBc0JQLHVDQUExQixDQURLLENBQytEOztBQUVwRUYsaUJBQU9VLElBQVAsQ0FBWUQsbUJBQVo7QUFDRDs7QUFFRCxlQUFPVCxNQUFQO0FBQ0QsT0FmWSxFQWVWLEVBZlUsQ0FBYjs7QUFpQkEsYUFBT0EsTUFBUDtBQUNEOzs7Ozs7QUFHSFcsT0FBT0MsT0FBUCxHQUFpQmhCLGlCQUFqQjs7QUFFQSxJQUFNaUIsNEJBQTRCLDJDQUFsQzs7QUFFQSxTQUFTTixtQ0FBVCxDQUE2Q0gsT0FBN0MsRUFBc0ROLElBQXRELEVBQTREQyxLQUE1RCxFQUFtRU0sS0FBbkUsRUFBMEU7QUFDeEUsTUFBSUMsd0JBQUo7QUFBQSxNQUNJUSxPQUFPZixNQUFNZ0IsT0FBTixDQUFjVixLQUFkLENBRFg7QUFBQSxNQUVJVyxrQkFBbUJGLFNBQVNHLFNBRmhDOztBQUlBLE1BQUliLFlBQVksRUFBaEIsRUFBb0I7QUFDbEJFLCtCQUEyQixFQUEzQjtBQUNELEdBRkQsTUFFTyxJQUFJVSxlQUFKLEVBQXFCO0FBQzFCLFFBQUlFLGFBQWEsSUFBSXhCLFVBQUosQ0FBZVUsT0FBZixFQUF3Qk4sSUFBeEIsRUFBOEJlLHlCQUE5QixDQUFqQjtBQUFBLFFBQ0lNLGNBQWMsQ0FBQ0QsVUFBRCxDQURsQjs7QUFHQVosK0JBQTJCYSxXQUEzQjtBQUNELEdBTE0sTUFLQTtBQUNMLFFBQUlDLFlBQVlmLFFBQVEsQ0FBeEI7QUFBQSxRQUNJZ0IsMkJBQTJCUCxLQUFLTyx3QkFBTCxDQUE4QmpCLE9BQTlCLENBRC9COztBQUdBLFFBQUlpQiw2QkFBNkIsQ0FBQyxDQUFsQyxFQUFxQztBQUNuQ2YsaUNBQTJCQyxvQ0FBb0NILE9BQXBDLEVBQTZDTixJQUE3QyxFQUFtREMsS0FBbkQsRUFBMERxQixTQUExRCxDQUEzQjtBQUNELEtBRkQsTUFFTztBQUNMLFVBQUlFLG1CQUFtQlIsS0FBS1MsMkJBQUwsQ0FBaUNuQixPQUFqQyxFQUEwQ04sSUFBMUMsQ0FBdkI7QUFBQSxVQUNJMEIseUJBQXlCRixpQkFBaUJHLFNBQWpCLEVBRDdCO0FBQUEsVUFFSUMsT0FBT0wsd0JBRlg7QUFBQSxVQUVzQztBQUNsQ00sY0FBUU4sMkJBQTJCRyxzQkFIdkM7QUFBQSxVQUdnRTtBQUM1REksb0JBQWN4QixRQUFReUIsTUFBUixDQUFlLENBQWYsRUFBa0JILElBQWxCLENBSmxCO0FBQUEsVUFLSUksZUFBZTFCLFFBQVF5QixNQUFSLENBQWVGLEtBQWYsQ0FMbkI7QUFBQSxVQU1JSSx3QkFBd0J4QixvQ0FBb0NxQixXQUFwQyxFQUFpRDlCLElBQWpELEVBQXVEQyxLQUF2RCxFQUE4RHFCLFNBQTlELENBTjVCO0FBQUEsVUFPSVkseUJBQXlCekIsb0NBQW9DdUIsWUFBcEMsRUFBa0RoQyxJQUFsRCxFQUF3REMsS0FBeEQsRUFBK0RNLEtBQS9ELENBUDdCO0FBQUEsVUFRSTRCLG9CQUFvQixHQUFHekIsTUFBSCxDQUFVdUIscUJBQVYsRUFBaUN2QixNQUFqQyxDQUF3Q2MsZ0JBQXhDLEVBQTBEZCxNQUExRCxDQUFpRXdCLHNCQUFqRSxDQVJ4Qjs7QUFVQTFCLGlDQUEyQjJCLGlCQUEzQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBTzNCLHdCQUFQO0FBQ0QiLCJmaWxlIjoic2lnbmlmaWNhbnRUb2tlbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgRXJyb3JUb2tlbiA9IHJlcXVpcmUoJy4uL2NvbW1vbi90b2tlbi9lcnJvcicpO1xyXG5cclxuY2xhc3MgU2lnbmlmaWNhbnRUb2tlbnMge1xyXG4gIHN0YXRpYyBwYXNzKG5vblNpZ25pZmljYW50VG9rZW5PclNpZ25pZmljYW50Q29udGVudHMsIGxpbmUsIHJ1bGVzKSB7XHJcbiAgICB2YXIgdG9rZW5zID0gbm9uU2lnbmlmaWNhbnRUb2tlbk9yU2lnbmlmaWNhbnRDb250ZW50cy5yZWR1Y2UoZnVuY3Rpb24odG9rZW5zLCBub25TaWduaWZpY2FudFRva2VuT3JTaWduaWZpY2FudENvbnRlbnQpIHtcclxuICAgICAgaWYgKHR5cGVvZiBub25TaWduaWZpY2FudFRva2VuT3JTaWduaWZpY2FudENvbnRlbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgdmFyIHNpZ25pZmljYW50Q29udGVudCA9IG5vblNpZ25pZmljYW50VG9rZW5PclNpZ25pZmljYW50Q29udGVudCwgIC8vL1xyXG4gICAgICAgICAgICBjb250ZW50ID0gc2lnbmlmaWNhbnRDb250ZW50LCAvLy9cclxuICAgICAgICAgICAgZGVwdGggPSAwLFxyXG4gICAgICAgICAgICBzaWduaWZpY2FudE9yRXJyb3JUb2tlbnMgPSBzaWduaWZpY2FudE9yRXJyb3JUb2tlbnNGcm9tQ29udGVudChjb250ZW50LCBsaW5lLCBydWxlcywgZGVwdGgpO1xyXG5cclxuICAgICAgICB0b2tlbnMgPSB0b2tlbnMuY29uY2F0KHNpZ25pZmljYW50T3JFcnJvclRva2Vucyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIG5vblNpZ25pZmljYW50VG9rZW4gPSBub25TaWduaWZpY2FudFRva2VuT3JTaWduaWZpY2FudENvbnRlbnQ7ICAvLy9cclxuICAgICAgICBcclxuICAgICAgICB0b2tlbnMucHVzaChub25TaWduaWZpY2FudFRva2VuKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRva2VucztcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICByZXR1cm4gdG9rZW5zO1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBTaWduaWZpY2FudFRva2VucztcclxuXHJcbmNvbnN0IFJVTEVfSVNfVU5ERUZJTkVEX01FU1NBR0UgPSAnVGhlcmUgYXJlIG5vIHJ1bGVzIHRvIHBhcnNlIHRoaXMgY29udGVudC4nO1xyXG5cclxuZnVuY3Rpb24gc2lnbmlmaWNhbnRPckVycm9yVG9rZW5zRnJvbUNvbnRlbnQoY29udGVudCwgbGluZSwgcnVsZXMsIGRlcHRoKSB7XHJcbiAgdmFyIHNpZ25pZmljYW50T3JFcnJvclRva2VucyxcclxuICAgICAgcnVsZSA9IHJ1bGVzLmdldFJ1bGUoZGVwdGgpLFxyXG4gICAgICBydWxlSXNVbmRlZmluZWQgPSAocnVsZSA9PT0gdW5kZWZpbmVkKTtcclxuXHJcbiAgaWYgKGNvbnRlbnQgPT09ICcnKSB7XHJcbiAgICBzaWduaWZpY2FudE9yRXJyb3JUb2tlbnMgPSBbXTtcclxuICB9IGVsc2UgaWYgKHJ1bGVJc1VuZGVmaW5lZCkge1xyXG4gICAgdmFyIGVycm9yVG9rZW4gPSBuZXcgRXJyb3JUb2tlbihjb250ZW50LCBsaW5lLCBSVUxFX0lTX1VOREVGSU5FRF9NRVNTQUdFKSxcclxuICAgICAgICBlcnJvclRva2VucyA9IFtlcnJvclRva2VuXTtcclxuXHJcbiAgICBzaWduaWZpY2FudE9yRXJyb3JUb2tlbnMgPSBlcnJvclRva2VucztcclxuICB9IGVsc2Uge1xyXG4gICAgdmFyIG5leHREZXB0aCA9IGRlcHRoICsgMSxcclxuICAgICAgICBzaWduaWZpY2FudFRva2VuUG9zaXRpb24gPSBydWxlLnNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbihjb250ZW50KTtcclxuXHJcbiAgICBpZiAoc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uID09PSAtMSkge1xyXG4gICAgICBzaWduaWZpY2FudE9yRXJyb3JUb2tlbnMgPSBzaWduaWZpY2FudE9yRXJyb3JUb2tlbnNGcm9tQ29udGVudChjb250ZW50LCBsaW5lLCBydWxlcywgbmV4dERlcHRoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciBzaWduaWZpY2FudFRva2VuID0gcnVsZS5zaWduaWZpY2FudFRva2VuRnJvbUNvbnRlbnQoY29udGVudCwgbGluZSksXHJcbiAgICAgICAgICBzaWduaWZpY2FudFRva2VuTGVuZ3RoID0gc2lnbmlmaWNhbnRUb2tlbi5nZXRMZW5ndGgoKSxcclxuICAgICAgICAgIGxlZnQgPSBzaWduaWZpY2FudFRva2VuUG9zaXRpb24sICAvLy9cclxuICAgICAgICAgIHJpZ2h0ID0gc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uICsgc2lnbmlmaWNhbnRUb2tlbkxlbmd0aCwgIC8vL1xyXG4gICAgICAgICAgbGVmdENvbnRlbnQgPSBjb250ZW50LnN1YnN0cigwLCBsZWZ0KSxcclxuICAgICAgICAgIHJpZ2h0Q29udGVudCA9IGNvbnRlbnQuc3Vic3RyKHJpZ2h0KSxcclxuICAgICAgICAgIGxlZnRTaWduaWZpY2FudFRva2VucyA9IHNpZ25pZmljYW50T3JFcnJvclRva2Vuc0Zyb21Db250ZW50KGxlZnRDb250ZW50LCBsaW5lLCBydWxlcywgbmV4dERlcHRoKSxcclxuICAgICAgICAgIHJpZ2h0U2lnbmlmaWNhbnRUb2tlbnMgPSBzaWduaWZpY2FudE9yRXJyb3JUb2tlbnNGcm9tQ29udGVudChyaWdodENvbnRlbnQsIGxpbmUsIHJ1bGVzLCBkZXB0aCksXHJcbiAgICAgICAgICBzaWduaWZpY2FudFRva2VucyA9IFtdLmNvbmNhdChsZWZ0U2lnbmlmaWNhbnRUb2tlbnMpLmNvbmNhdChzaWduaWZpY2FudFRva2VuKS5jb25jYXQocmlnaHRTaWduaWZpY2FudFRva2Vucyk7XHJcblxyXG4gICAgICBzaWduaWZpY2FudE9yRXJyb3JUb2tlbnMgPSBzaWduaWZpY2FudFRva2VucztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBzaWduaWZpY2FudE9yRXJyb3JUb2tlbnM7XHJcbn1cclxuIl19