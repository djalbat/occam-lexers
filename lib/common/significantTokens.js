'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ErrorToken = require('../common/token/error');

var SignificantTokens = function () {
  function SignificantTokens() {
    _classCallCheck(this, SignificantTokens);
  }

  _createClass(SignificantTokens, null, [{
    key: 'pass',
    value: function pass(nonSignificantTokenOrSignificantContents, line, rules) {
      var tokens = nonSignificantTokenOrSignificantContents.reduce(function (tokens, nonSignificantTokenOrSignificantContent) {
        if (typeof nonSignificantTokenOrSignificantContent === 'string') {
          var significantContent = nonSignificantTokenOrSignificantContent,
              ///
          content = significantContent,
              ///
          depth = 0,
              significantOrErrorTokens = significantOrErrorTokensFromContent(content, line, rules, depth);

          tokens = tokens.concat(significantOrErrorTokens);
        } else {
          var nonSignificantToken = nonSignificantTokenOrSignificantContent; ///

          tokens.push(nonSignificantToken);
        }

        return tokens;
      }, []);

      return tokens;
    }
  }]);

  return SignificantTokens;
}();

module.exports = SignificantTokens;

var RULE_IS_UNDEFINED_MESSAGE = 'There are no rules to parse this content.';

function significantOrErrorTokensFromContent(content, line, rules, depth) {
  var significantOrErrorTokens,
      rule = rules.getRule(depth),
      ruleIsUndefined = rule === undefined;

  if (content === '') {
    significantOrErrorTokens = [];
  } else if (ruleIsUndefined) {
    var errorToken = ErrorToken.fromContent(content, line, RULE_IS_UNDEFINED_MESSAGE),
        errorTokens = [errorToken];

    significantOrErrorTokens = errorTokens;
  } else {
    var nextDepth = depth + 1,
        significantTokenPosition = rule.significantTokenPosition(content);

    if (significantTokenPosition === -1) {
      significantOrErrorTokens = significantOrErrorTokensFromContent(content, line, rules, nextDepth);
    } else {
      var significantToken = rule.significantTokenFromContent(content, line),
          significantTokenLength = significantToken.getLength(),
          left = significantTokenPosition,
          ///
      right = significantTokenPosition + significantTokenLength,
          ///
      leftContent = content.substr(0, left),
          rightContent = content.substr(right),
          leftSignificantTokens = significantOrErrorTokensFromContent(leftContent, line, rules, nextDepth),
          rightSignificantTokens = significantOrErrorTokensFromContent(rightContent, line, rules, depth),
          significantTokens = [].concat(leftSignificantTokens).concat(significantToken).concat(rightSignificantTokens);

      significantOrErrorTokens = significantTokens;
    }
  }

  return significantOrErrorTokens;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9jb21tb24vc2lnbmlmaWNhbnRUb2tlbnMuanMiXSwibmFtZXMiOlsiRXJyb3JUb2tlbiIsInJlcXVpcmUiLCJTaWduaWZpY2FudFRva2VucyIsIm5vblNpZ25pZmljYW50VG9rZW5PclNpZ25pZmljYW50Q29udGVudHMiLCJsaW5lIiwicnVsZXMiLCJ0b2tlbnMiLCJyZWR1Y2UiLCJub25TaWduaWZpY2FudFRva2VuT3JTaWduaWZpY2FudENvbnRlbnQiLCJzaWduaWZpY2FudENvbnRlbnQiLCJjb250ZW50IiwiZGVwdGgiLCJzaWduaWZpY2FudE9yRXJyb3JUb2tlbnMiLCJzaWduaWZpY2FudE9yRXJyb3JUb2tlbnNGcm9tQ29udGVudCIsImNvbmNhdCIsIm5vblNpZ25pZmljYW50VG9rZW4iLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyIsIlJVTEVfSVNfVU5ERUZJTkVEX01FU1NBR0UiLCJydWxlIiwiZ2V0UnVsZSIsInJ1bGVJc1VuZGVmaW5lZCIsInVuZGVmaW5lZCIsImVycm9yVG9rZW4iLCJmcm9tQ29udGVudCIsImVycm9yVG9rZW5zIiwibmV4dERlcHRoIiwic2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uIiwic2lnbmlmaWNhbnRUb2tlbiIsInNpZ25pZmljYW50VG9rZW5Gcm9tQ29udGVudCIsInNpZ25pZmljYW50VG9rZW5MZW5ndGgiLCJnZXRMZW5ndGgiLCJsZWZ0IiwicmlnaHQiLCJsZWZ0Q29udGVudCIsInN1YnN0ciIsInJpZ2h0Q29udGVudCIsImxlZnRTaWduaWZpY2FudFRva2VucyIsInJpZ2h0U2lnbmlmaWNhbnRUb2tlbnMiLCJzaWduaWZpY2FudFRva2VucyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQUlBLGFBQWFDLFFBQVEsdUJBQVIsQ0FBakI7O0lBRU1DLGlCOzs7Ozs7O3lCQUNRQyx3QyxFQUEwQ0MsSSxFQUFNQyxLLEVBQU87QUFDakUsVUFBSUMsU0FBU0gseUNBQXlDSSxNQUF6QyxDQUFnRCxVQUFTRCxNQUFULEVBQWlCRSx1Q0FBakIsRUFBMEQ7QUFDckgsWUFBSSxPQUFPQSx1Q0FBUCxLQUFtRCxRQUF2RCxFQUFpRTtBQUMvRCxjQUFJQyxxQkFBcUJELHVDQUF6QjtBQUFBLGNBQW1FO0FBQy9ERSxvQkFBVUQsa0JBRGQ7QUFBQSxjQUNrQztBQUM5QkUsa0JBQVEsQ0FGWjtBQUFBLGNBR0lDLDJCQUEyQkMsb0NBQW9DSCxPQUFwQyxFQUE2Q04sSUFBN0MsRUFBbURDLEtBQW5ELEVBQTBETSxLQUExRCxDQUgvQjs7QUFLQUwsbUJBQVNBLE9BQU9RLE1BQVAsQ0FBY0Ysd0JBQWQsQ0FBVDtBQUNELFNBUEQsTUFPTztBQUNMLGNBQUlHLHNCQUFzQlAsdUNBQTFCLENBREssQ0FDK0Q7O0FBRXBFRixpQkFBT1UsSUFBUCxDQUFZRCxtQkFBWjtBQUNEOztBQUVELGVBQU9ULE1BQVA7QUFDRCxPQWZZLEVBZVYsRUFmVSxDQUFiOztBQWlCQSxhQUFPQSxNQUFQO0FBQ0Q7Ozs7OztBQUdIVyxPQUFPQyxPQUFQLEdBQWlCaEIsaUJBQWpCOztBQUVBLElBQU1pQiw0QkFBNEIsMkNBQWxDOztBQUVBLFNBQVNOLG1DQUFULENBQTZDSCxPQUE3QyxFQUFzRE4sSUFBdEQsRUFBNERDLEtBQTVELEVBQW1FTSxLQUFuRSxFQUEwRTtBQUN4RSxNQUFJQyx3QkFBSjtBQUFBLE1BQ0lRLE9BQU9mLE1BQU1nQixPQUFOLENBQWNWLEtBQWQsQ0FEWDtBQUFBLE1BRUlXLGtCQUFtQkYsU0FBU0csU0FGaEM7O0FBSUEsTUFBSWIsWUFBWSxFQUFoQixFQUFvQjtBQUNsQkUsK0JBQTJCLEVBQTNCO0FBQ0QsR0FGRCxNQUVPLElBQUlVLGVBQUosRUFBcUI7QUFDMUIsUUFBSUUsYUFBYXhCLFdBQVd5QixXQUFYLENBQXVCZixPQUF2QixFQUFnQ04sSUFBaEMsRUFBc0NlLHlCQUF0QyxDQUFqQjtBQUFBLFFBQ0lPLGNBQWMsQ0FBQ0YsVUFBRCxDQURsQjs7QUFHQVosK0JBQTJCYyxXQUEzQjtBQUNELEdBTE0sTUFLQTtBQUNMLFFBQUlDLFlBQVloQixRQUFRLENBQXhCO0FBQUEsUUFDSWlCLDJCQUEyQlIsS0FBS1Esd0JBQUwsQ0FBOEJsQixPQUE5QixDQUQvQjs7QUFHQSxRQUFJa0IsNkJBQTZCLENBQUMsQ0FBbEMsRUFBcUM7QUFDbkNoQixpQ0FBMkJDLG9DQUFvQ0gsT0FBcEMsRUFBNkNOLElBQTdDLEVBQW1EQyxLQUFuRCxFQUEwRHNCLFNBQTFELENBQTNCO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsVUFBSUUsbUJBQW1CVCxLQUFLVSwyQkFBTCxDQUFpQ3BCLE9BQWpDLEVBQTBDTixJQUExQyxDQUF2QjtBQUFBLFVBQ0kyQix5QkFBeUJGLGlCQUFpQkcsU0FBakIsRUFEN0I7QUFBQSxVQUVJQyxPQUFPTCx3QkFGWDtBQUFBLFVBRXNDO0FBQ2xDTSxjQUFRTiwyQkFBMkJHLHNCQUh2QztBQUFBLFVBR2dFO0FBQzVESSxvQkFBY3pCLFFBQVEwQixNQUFSLENBQWUsQ0FBZixFQUFrQkgsSUFBbEIsQ0FKbEI7QUFBQSxVQUtJSSxlQUFlM0IsUUFBUTBCLE1BQVIsQ0FBZUYsS0FBZixDQUxuQjtBQUFBLFVBTUlJLHdCQUF3QnpCLG9DQUFvQ3NCLFdBQXBDLEVBQWlEL0IsSUFBakQsRUFBdURDLEtBQXZELEVBQThEc0IsU0FBOUQsQ0FONUI7QUFBQSxVQU9JWSx5QkFBeUIxQixvQ0FBb0N3QixZQUFwQyxFQUFrRGpDLElBQWxELEVBQXdEQyxLQUF4RCxFQUErRE0sS0FBL0QsQ0FQN0I7QUFBQSxVQVFJNkIsb0JBQW9CLEdBQUcxQixNQUFILENBQVV3QixxQkFBVixFQUFpQ3hCLE1BQWpDLENBQXdDZSxnQkFBeEMsRUFBMERmLE1BQTFELENBQWlFeUIsc0JBQWpFLENBUnhCOztBQVVBM0IsaUNBQTJCNEIsaUJBQTNCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPNUIsd0JBQVA7QUFDRCIsImZpbGUiOiJzaWduaWZpY2FudFRva2Vucy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBFcnJvclRva2VuID0gcmVxdWlyZSgnLi4vY29tbW9uL3Rva2VuL2Vycm9yJyk7XHJcblxyXG5jbGFzcyBTaWduaWZpY2FudFRva2VucyB7XHJcbiAgc3RhdGljIHBhc3Mobm9uU2lnbmlmaWNhbnRUb2tlbk9yU2lnbmlmaWNhbnRDb250ZW50cywgbGluZSwgcnVsZXMpIHtcclxuICAgIHZhciB0b2tlbnMgPSBub25TaWduaWZpY2FudFRva2VuT3JTaWduaWZpY2FudENvbnRlbnRzLnJlZHVjZShmdW5jdGlvbih0b2tlbnMsIG5vblNpZ25pZmljYW50VG9rZW5PclNpZ25pZmljYW50Q29udGVudCkge1xyXG4gICAgICBpZiAodHlwZW9mIG5vblNpZ25pZmljYW50VG9rZW5PclNpZ25pZmljYW50Q29udGVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICB2YXIgc2lnbmlmaWNhbnRDb250ZW50ID0gbm9uU2lnbmlmaWNhbnRUb2tlbk9yU2lnbmlmaWNhbnRDb250ZW50LCAgLy8vXHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSBzaWduaWZpY2FudENvbnRlbnQsIC8vL1xyXG4gICAgICAgICAgICBkZXB0aCA9IDAsXHJcbiAgICAgICAgICAgIHNpZ25pZmljYW50T3JFcnJvclRva2VucyA9IHNpZ25pZmljYW50T3JFcnJvclRva2Vuc0Zyb21Db250ZW50KGNvbnRlbnQsIGxpbmUsIHJ1bGVzLCBkZXB0aCk7XHJcblxyXG4gICAgICAgIHRva2VucyA9IHRva2Vucy5jb25jYXQoc2lnbmlmaWNhbnRPckVycm9yVG9rZW5zKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgbm9uU2lnbmlmaWNhbnRUb2tlbiA9IG5vblNpZ25pZmljYW50VG9rZW5PclNpZ25pZmljYW50Q29udGVudDsgIC8vL1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRva2Vucy5wdXNoKG5vblNpZ25pZmljYW50VG9rZW4pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdG9rZW5zO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIHJldHVybiB0b2tlbnM7XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFNpZ25pZmljYW50VG9rZW5zO1xyXG5cclxuY29uc3QgUlVMRV9JU19VTkRFRklORURfTUVTU0FHRSA9ICdUaGVyZSBhcmUgbm8gcnVsZXMgdG8gcGFyc2UgdGhpcyBjb250ZW50Lic7XHJcblxyXG5mdW5jdGlvbiBzaWduaWZpY2FudE9yRXJyb3JUb2tlbnNGcm9tQ29udGVudChjb250ZW50LCBsaW5lLCBydWxlcywgZGVwdGgpIHtcclxuICB2YXIgc2lnbmlmaWNhbnRPckVycm9yVG9rZW5zLFxyXG4gICAgICBydWxlID0gcnVsZXMuZ2V0UnVsZShkZXB0aCksXHJcbiAgICAgIHJ1bGVJc1VuZGVmaW5lZCA9IChydWxlID09PSB1bmRlZmluZWQpO1xyXG5cclxuICBpZiAoY29udGVudCA9PT0gJycpIHtcclxuICAgIHNpZ25pZmljYW50T3JFcnJvclRva2VucyA9IFtdO1xyXG4gIH0gZWxzZSBpZiAocnVsZUlzVW5kZWZpbmVkKSB7XHJcbiAgICB2YXIgZXJyb3JUb2tlbiA9IEVycm9yVG9rZW4uZnJvbUNvbnRlbnQoY29udGVudCwgbGluZSwgUlVMRV9JU19VTkRFRklORURfTUVTU0FHRSksXHJcbiAgICAgICAgZXJyb3JUb2tlbnMgPSBbZXJyb3JUb2tlbl07XHJcblxyXG4gICAgc2lnbmlmaWNhbnRPckVycm9yVG9rZW5zID0gZXJyb3JUb2tlbnM7XHJcbiAgfSBlbHNlIHtcclxuICAgIHZhciBuZXh0RGVwdGggPSBkZXB0aCArIDEsXHJcbiAgICAgICAgc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uID0gcnVsZS5zaWduaWZpY2FudFRva2VuUG9zaXRpb24oY29udGVudCk7XHJcblxyXG4gICAgaWYgKHNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbiA9PT0gLTEpIHtcclxuICAgICAgc2lnbmlmaWNhbnRPckVycm9yVG9rZW5zID0gc2lnbmlmaWNhbnRPckVycm9yVG9rZW5zRnJvbUNvbnRlbnQoY29udGVudCwgbGluZSwgcnVsZXMsIG5leHREZXB0aCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgc2lnbmlmaWNhbnRUb2tlbiA9IHJ1bGUuc2lnbmlmaWNhbnRUb2tlbkZyb21Db250ZW50KGNvbnRlbnQsIGxpbmUpLFxyXG4gICAgICAgICAgc2lnbmlmaWNhbnRUb2tlbkxlbmd0aCA9IHNpZ25pZmljYW50VG9rZW4uZ2V0TGVuZ3RoKCksXHJcbiAgICAgICAgICBsZWZ0ID0gc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uLCAgLy8vXHJcbiAgICAgICAgICByaWdodCA9IHNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbiArIHNpZ25pZmljYW50VG9rZW5MZW5ndGgsICAvLy9cclxuICAgICAgICAgIGxlZnRDb250ZW50ID0gY29udGVudC5zdWJzdHIoMCwgbGVmdCksXHJcbiAgICAgICAgICByaWdodENvbnRlbnQgPSBjb250ZW50LnN1YnN0cihyaWdodCksXHJcbiAgICAgICAgICBsZWZ0U2lnbmlmaWNhbnRUb2tlbnMgPSBzaWduaWZpY2FudE9yRXJyb3JUb2tlbnNGcm9tQ29udGVudChsZWZ0Q29udGVudCwgbGluZSwgcnVsZXMsIG5leHREZXB0aCksXHJcbiAgICAgICAgICByaWdodFNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRPckVycm9yVG9rZW5zRnJvbUNvbnRlbnQocmlnaHRDb250ZW50LCBsaW5lLCBydWxlcywgZGVwdGgpLFxyXG4gICAgICAgICAgc2lnbmlmaWNhbnRUb2tlbnMgPSBbXS5jb25jYXQobGVmdFNpZ25pZmljYW50VG9rZW5zKS5jb25jYXQoc2lnbmlmaWNhbnRUb2tlbikuY29uY2F0KHJpZ2h0U2lnbmlmaWNhbnRUb2tlbnMpO1xyXG5cclxuICAgICAgc2lnbmlmaWNhbnRPckVycm9yVG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnM7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2lnbmlmaWNhbnRPckVycm9yVG9rZW5zO1xyXG59XHJcbiJdfQ==