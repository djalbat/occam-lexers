'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ErrorToken = require('../common/token/error');

var SignificantTokens = function () {
  function SignificantTokens() {
    _classCallCheck(this, SignificantTokens);
  }

  _createClass(SignificantTokens, null, [{
    key: 'pass',
    value: function pass(tokensOrContents, line, rules) {
      var tokens = tokensOrContents.reduce(function (tokens, tokenOrRemainingContent) {
        if (typeof tokenOrRemainingContent === 'string') {
          var content = tokenOrRemainingContent,
              ///
          depth = 0,
              significantTokens = significantTokensFromWithinContentAndLine(content, line, rules, depth);

          tokens = tokens.concat(significantTokens);
        } else {
          var nonSignificantToken = tokenOrRemainingContent; ///

          tokens.push(nonSignificantToken);
        }

        return tokens;
      }, []);

      return tokens;
    }
  }]);

  return SignificantTokens;
}();

module.exports = SignificantTokens;

function significantTokensFromWithinContentAndLine(content, line, rules, depth) {
  var significantTokens,
      rule = rules.getRule(depth),
      ruleIsUndefined = rule === undefined;

  if (content === '') {
    significantTokens = [];
  } else if (ruleIsUndefined) {
    var errorToken = ErrorToken.fromContentAndLine(content, line),
        errorTokens = [errorToken];

    significantTokens = errorTokens; ///
  } else {
    var nextDepth = depth + 1,
        significantTokenPositionWithinContent = rule.significantTokenPositionWithinContent(content);

    if (significantTokenPositionWithinContent === -1) {
      significantTokens = significantTokensFromWithinContentAndLine(content, line, rules, nextDepth);
    } else {
      var significantToken = rule.significantTokenFromWithinContentAndLine(content, line),
          significantTokenLength = significantToken.getLength(),
          left = significantTokenPositionWithinContent,
          ///
      right = significantTokenPositionWithinContent + significantTokenLength,
          ///
      leftContent = content.substring(0, left),
          rightContent = content.substring(right),
          leftSignificantTokens = significantTokensFromWithinContentAndLine(leftContent, line, rules, nextDepth),
          rightSignificantTokens = significantTokensFromWithinContentAndLine(rightContent, line, rules, depth);

      significantTokens = [].concat(leftSignificantTokens).concat(significantToken).concat(rightSignificantTokens);
    }
  }

  return significantTokens;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9jb21tb24vc2lnbmlmaWNhbnRUb2tlbnMuanMiXSwibmFtZXMiOlsiRXJyb3JUb2tlbiIsInJlcXVpcmUiLCJTaWduaWZpY2FudFRva2VucyIsInRva2Vuc09yQ29udGVudHMiLCJsaW5lIiwicnVsZXMiLCJ0b2tlbnMiLCJyZWR1Y2UiLCJ0b2tlbk9yUmVtYWluaW5nQ29udGVudCIsImNvbnRlbnQiLCJkZXB0aCIsInNpZ25pZmljYW50VG9rZW5zIiwic2lnbmlmaWNhbnRUb2tlbnNGcm9tV2l0aGluQ29udGVudEFuZExpbmUiLCJjb25jYXQiLCJub25TaWduaWZpY2FudFRva2VuIiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiLCJydWxlIiwiZ2V0UnVsZSIsInJ1bGVJc1VuZGVmaW5lZCIsInVuZGVmaW5lZCIsImVycm9yVG9rZW4iLCJmcm9tQ29udGVudEFuZExpbmUiLCJlcnJvclRva2VucyIsIm5leHREZXB0aCIsInNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQiLCJzaWduaWZpY2FudFRva2VuIiwic2lnbmlmaWNhbnRUb2tlbkZyb21XaXRoaW5Db250ZW50QW5kTGluZSIsInNpZ25pZmljYW50VG9rZW5MZW5ndGgiLCJnZXRMZW5ndGgiLCJsZWZ0IiwicmlnaHQiLCJsZWZ0Q29udGVudCIsInN1YnN0cmluZyIsInJpZ2h0Q29udGVudCIsImxlZnRTaWduaWZpY2FudFRva2VucyIsInJpZ2h0U2lnbmlmaWNhbnRUb2tlbnMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQSxJQUFJQSxhQUFhQyxRQUFRLHVCQUFSLENBQWpCOztJQUVNQyxpQjs7Ozs7Ozt5QkFDUUMsZ0IsRUFBa0JDLEksRUFBTUMsSyxFQUFPO0FBQ3pDLFVBQUlDLFNBQVNILGlCQUFpQkksTUFBakIsQ0FBd0IsVUFBU0QsTUFBVCxFQUFpQkUsdUJBQWpCLEVBQTBDO0FBQzdFLFlBQUksT0FBT0EsdUJBQVAsS0FBbUMsUUFBdkMsRUFBaUQ7QUFDL0MsY0FBSUMsVUFBVUQsdUJBQWQ7QUFBQSxjQUF3QztBQUNwQ0Usa0JBQVEsQ0FEWjtBQUFBLGNBRUlDLG9CQUFvQkMsMENBQTBDSCxPQUExQyxFQUFtREwsSUFBbkQsRUFBeURDLEtBQXpELEVBQWdFSyxLQUFoRSxDQUZ4Qjs7QUFJQUosbUJBQVNBLE9BQU9PLE1BQVAsQ0FBY0YsaUJBQWQsQ0FBVDtBQUNELFNBTkQsTUFNTztBQUNMLGNBQUlHLHNCQUFzQk4sdUJBQTFCLENBREssQ0FDK0M7O0FBRXBERixpQkFBT1MsSUFBUCxDQUFZRCxtQkFBWjtBQUNEOztBQUVELGVBQU9SLE1BQVA7QUFDRCxPQWRZLEVBY1YsRUFkVSxDQUFiOztBQWdCQSxhQUFPQSxNQUFQO0FBQ0Q7Ozs7OztBQUdIVSxPQUFPQyxPQUFQLEdBQWlCZixpQkFBakI7O0FBRUEsU0FBU1UseUNBQVQsQ0FBbURILE9BQW5ELEVBQTRETCxJQUE1RCxFQUFrRUMsS0FBbEUsRUFBeUVLLEtBQXpFLEVBQWdGO0FBQzlFLE1BQUlDLGlCQUFKO0FBQUEsTUFDSU8sT0FBT2IsTUFBTWMsT0FBTixDQUFjVCxLQUFkLENBRFg7QUFBQSxNQUVJVSxrQkFBbUJGLFNBQVNHLFNBRmhDOztBQUlBLE1BQUlaLFlBQVksRUFBaEIsRUFBb0I7QUFDbEJFLHdCQUFvQixFQUFwQjtBQUNELEdBRkQsTUFFTyxJQUFJUyxlQUFKLEVBQXFCO0FBQzFCLFFBQUlFLGFBQWF0QixXQUFXdUIsa0JBQVgsQ0FBOEJkLE9BQTlCLEVBQXVDTCxJQUF2QyxDQUFqQjtBQUFBLFFBQ0lvQixjQUFjLENBQUNGLFVBQUQsQ0FEbEI7O0FBR0FYLHdCQUFvQmEsV0FBcEIsQ0FKMEIsQ0FJUTtBQUNuQyxHQUxNLE1BS0E7QUFDTCxRQUFJQyxZQUFZZixRQUFRLENBQXhCO0FBQUEsUUFDSWdCLHdDQUF3Q1IsS0FBS1EscUNBQUwsQ0FBMkNqQixPQUEzQyxDQUQ1Qzs7QUFHQSxRQUFJaUIsMENBQTBDLENBQUMsQ0FBL0MsRUFBa0Q7QUFDaERmLDBCQUFvQkMsMENBQTBDSCxPQUExQyxFQUFtREwsSUFBbkQsRUFBeURDLEtBQXpELEVBQWdFb0IsU0FBaEUsQ0FBcEI7QUFDRCxLQUZELE1BRU87QUFDTCxVQUFJRSxtQkFBbUJULEtBQUtVLHdDQUFMLENBQThDbkIsT0FBOUMsRUFBdURMLElBQXZELENBQXZCO0FBQUEsVUFDSXlCLHlCQUF5QkYsaUJBQWlCRyxTQUFqQixFQUQ3QjtBQUFBLFVBRUlDLE9BQU9MLHFDQUZYO0FBQUEsVUFFbUQ7QUFDL0NNLGNBQVFOLHdDQUF3Q0csc0JBSHBEO0FBQUEsVUFHNkU7QUFDekVJLG9CQUFjeEIsUUFBUXlCLFNBQVIsQ0FBa0IsQ0FBbEIsRUFBcUJILElBQXJCLENBSmxCO0FBQUEsVUFLSUksZUFBZTFCLFFBQVF5QixTQUFSLENBQWtCRixLQUFsQixDQUxuQjtBQUFBLFVBTUlJLHdCQUF3QnhCLDBDQUEwQ3FCLFdBQTFDLEVBQXVEN0IsSUFBdkQsRUFBNkRDLEtBQTdELEVBQW9Fb0IsU0FBcEUsQ0FONUI7QUFBQSxVQU9JWSx5QkFBeUJ6QiwwQ0FBMEN1QixZQUExQyxFQUF3RC9CLElBQXhELEVBQThEQyxLQUE5RCxFQUFxRUssS0FBckUsQ0FQN0I7O0FBU0FDLDBCQUFvQixHQUFHRSxNQUFILENBQVV1QixxQkFBVixFQUFpQ3ZCLE1BQWpDLENBQXdDYyxnQkFBeEMsRUFBMERkLE1BQTFELENBQWlFd0Isc0JBQWpFLENBQXBCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPMUIsaUJBQVA7QUFDRCIsImZpbGUiOiJzaWduaWZpY2FudFRva2Vucy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBFcnJvclRva2VuID0gcmVxdWlyZSgnLi4vY29tbW9uL3Rva2VuL2Vycm9yJyk7XHJcblxyXG5jbGFzcyBTaWduaWZpY2FudFRva2VucyB7XHJcbiAgc3RhdGljIHBhc3ModG9rZW5zT3JDb250ZW50cywgbGluZSwgcnVsZXMpIHtcclxuICAgIHZhciB0b2tlbnMgPSB0b2tlbnNPckNvbnRlbnRzLnJlZHVjZShmdW5jdGlvbih0b2tlbnMsIHRva2VuT3JSZW1haW5pbmdDb250ZW50KSB7XHJcbiAgICAgIGlmICh0eXBlb2YgdG9rZW5PclJlbWFpbmluZ0NvbnRlbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgdmFyIGNvbnRlbnQgPSB0b2tlbk9yUmVtYWluaW5nQ29udGVudCwgIC8vL1xyXG4gICAgICAgICAgICBkZXB0aCA9IDAsXHJcbiAgICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnNGcm9tV2l0aGluQ29udGVudEFuZExpbmUoY29udGVudCwgbGluZSwgcnVsZXMsIGRlcHRoKTtcclxuXHJcbiAgICAgICAgdG9rZW5zID0gdG9rZW5zLmNvbmNhdChzaWduaWZpY2FudFRva2Vucyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIG5vblNpZ25pZmljYW50VG9rZW4gPSB0b2tlbk9yUmVtYWluaW5nQ29udGVudDsgIC8vL1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRva2Vucy5wdXNoKG5vblNpZ25pZmljYW50VG9rZW4pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdG9rZW5zO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIHJldHVybiB0b2tlbnM7XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFNpZ25pZmljYW50VG9rZW5zO1xyXG5cclxuZnVuY3Rpb24gc2lnbmlmaWNhbnRUb2tlbnNGcm9tV2l0aGluQ29udGVudEFuZExpbmUoY29udGVudCwgbGluZSwgcnVsZXMsIGRlcHRoKSB7XHJcbiAgdmFyIHNpZ25pZmljYW50VG9rZW5zLFxyXG4gICAgICBydWxlID0gcnVsZXMuZ2V0UnVsZShkZXB0aCksXHJcbiAgICAgIHJ1bGVJc1VuZGVmaW5lZCA9IChydWxlID09PSB1bmRlZmluZWQpO1xyXG5cclxuICBpZiAoY29udGVudCA9PT0gJycpIHtcclxuICAgIHNpZ25pZmljYW50VG9rZW5zID0gW107XHJcbiAgfSBlbHNlIGlmIChydWxlSXNVbmRlZmluZWQpIHtcclxuICAgIHZhciBlcnJvclRva2VuID0gRXJyb3JUb2tlbi5mcm9tQ29udGVudEFuZExpbmUoY29udGVudCwgbGluZSksXHJcbiAgICAgICAgZXJyb3JUb2tlbnMgPSBbZXJyb3JUb2tlbl07XHJcblxyXG4gICAgc2lnbmlmaWNhbnRUb2tlbnMgPSBlcnJvclRva2VuczsgIC8vL1xyXG4gIH0gZWxzZSB7XHJcbiAgICB2YXIgbmV4dERlcHRoID0gZGVwdGggKyAxLFxyXG4gICAgICAgIHNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQgPSBydWxlLnNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQoY29udGVudCk7XHJcblxyXG4gICAgaWYgKHNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQgPT09IC0xKSB7XHJcbiAgICAgIHNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnNGcm9tV2l0aGluQ29udGVudEFuZExpbmUoY29udGVudCwgbGluZSwgcnVsZXMsIG5leHREZXB0aCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgc2lnbmlmaWNhbnRUb2tlbiA9IHJ1bGUuc2lnbmlmaWNhbnRUb2tlbkZyb21XaXRoaW5Db250ZW50QW5kTGluZShjb250ZW50LCBsaW5lKSxcclxuICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5MZW5ndGggPSBzaWduaWZpY2FudFRva2VuLmdldExlbmd0aCgpLFxyXG4gICAgICAgICAgbGVmdCA9IHNpZ25pZmljYW50VG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQsICAvLy9cclxuICAgICAgICAgIHJpZ2h0ID0gc2lnbmlmaWNhbnRUb2tlblBvc2l0aW9uV2l0aGluQ29udGVudCArIHNpZ25pZmljYW50VG9rZW5MZW5ndGgsICAvLy9cclxuICAgICAgICAgIGxlZnRDb250ZW50ID0gY29udGVudC5zdWJzdHJpbmcoMCwgbGVmdCksXHJcbiAgICAgICAgICByaWdodENvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZyhyaWdodCksXHJcbiAgICAgICAgICBsZWZ0U2lnbmlmaWNhbnRUb2tlbnMgPSBzaWduaWZpY2FudFRva2Vuc0Zyb21XaXRoaW5Db250ZW50QW5kTGluZShsZWZ0Q29udGVudCwgbGluZSwgcnVsZXMsIG5leHREZXB0aCksXHJcbiAgICAgICAgICByaWdodFNpZ25pZmljYW50VG9rZW5zID0gc2lnbmlmaWNhbnRUb2tlbnNGcm9tV2l0aGluQ29udGVudEFuZExpbmUocmlnaHRDb250ZW50LCBsaW5lLCBydWxlcywgZGVwdGgpO1xyXG5cclxuICAgICAgc2lnbmlmaWNhbnRUb2tlbnMgPSBbXS5jb25jYXQobGVmdFNpZ25pZmljYW50VG9rZW5zKS5jb25jYXQoc2lnbmlmaWNhbnRUb2tlbikuY29uY2F0KHJpZ2h0U2lnbmlmaWNhbnRUb2tlbnMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHNpZ25pZmljYW50VG9rZW5zO1xyXG59XHJcbiJdfQ==