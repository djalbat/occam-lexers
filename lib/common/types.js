"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.typeType = exports.startOfMultiLineCommentType = exports.regularExpressionType = exports.endOfMultiLineCommentType = exports.brokenStringLiteralType = exports.stringLiteralType = exports.nameType = exports.whitespaceType = exports.endOfLineType = exports.singleLineCommentType = exports.default = exports.commentType = exports.brokenCommentType = exports.middleOfMultiLineCommentType = void 0;
var typeType = "type";
exports.typeType = typeType;
var nameType = "name";
exports.nameType = nameType;
var commentType = "comment";
exports.commentType = commentType;
var endOfLineType = "end-of-line";
exports.endOfLineType = endOfLineType;
var whitespaceType = "whitespace";
exports.whitespaceType = whitespaceType;
var stringLiteralType = "string-literal";
exports.stringLiteralType = stringLiteralType;
var brokenCommentType = "broken-c0mment"; ///
exports.brokenCommentType = brokenCommentType;
var regularExpressionType = "regular-expression";
exports.regularExpressionType = regularExpressionType;
var brokenStringLiteralType = "broken-string-literal";
exports.brokenStringLiteralType = brokenStringLiteralType;
var singleLineCommentType = "single-line ".concat(commentType);
exports.singleLineCommentType = singleLineCommentType;
var endOfMultiLineCommentType = "end-of-multi-line ".concat(commentType);
exports.endOfMultiLineCommentType = endOfMultiLineCommentType;
var startOfMultiLineCommentType = "start-of-multi-line ".concat(commentType);
exports.startOfMultiLineCommentType = startOfMultiLineCommentType;
var middleOfMultiLineCommentType = "middle-of-multi-line ".concat(commentType);
exports.middleOfMultiLineCommentType = middleOfMultiLineCommentType;
var _default = {
    typeType: typeType,
    nameType: nameType,
    commentType: commentType,
    endOfLineType: endOfLineType,
    whitespaceType: whitespaceType,
    stringLiteralType: stringLiteralType,
    brokenCommentType: brokenCommentType,
    regularExpressionType: regularExpressionType,
    brokenStringLiteralType: brokenStringLiteralType,
    singleLineCommentType: singleLineCommentType,
    endOfMultiLineCommentType: endOfMultiLineCommentType,
    startOfMultiLineCommentType: startOfMultiLineCommentType,
    middleOfMultiLineCommentType: middleOfMultiLineCommentType
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tb24vdHlwZXMuanMiXSwibmFtZXMiOlsidHlwZVR5cGUiLCJuYW1lVHlwZSIsImNvbW1lbnRUeXBlIiwiZW5kT2ZMaW5lVHlwZSIsIndoaXRlc3BhY2VUeXBlIiwic3RyaW5nTGl0ZXJhbFR5cGUiLCJicm9rZW5Db21tZW50VHlwZSIsInJlZ3VsYXJFeHByZXNzaW9uVHlwZSIsImJyb2tlblN0cmluZ0xpdGVyYWxUeXBlIiwic2luZ2xlTGluZUNvbW1lbnRUeXBlIiwiZW5kT2ZNdWx0aUxpbmVDb21tZW50VHlwZSIsInN0YXJ0T2ZNdWx0aUxpbmVDb21tZW50VHlwZSIsIm1pZGRsZU9mTXVsdGlMaW5lQ29tbWVudFR5cGUiXSwibWFwcGluZ3MiOiJDQUFBLFVBQVk7Ozs7O0FBRUwsR0FBSyxDQUFDLFFBQVEsSUFBRyxJQUFNO1FBQWpCLFFBQVEsR0FBUixRQUFRO0FBQ2QsR0FBSyxDQUFDLFFBQVEsSUFBRyxJQUFNO1FBQWpCLFFBQVEsR0FBUixRQUFRO0FBQ2QsR0FBSyxDQUFDLFdBQVcsSUFBRyxPQUFTO1FBQXZCLFdBQVcsR0FBWCxXQUFXO0FBQ2pCLEdBQUssQ0FBQyxhQUFhLElBQUcsV0FBYTtRQUE3QixhQUFhLEdBQWIsYUFBYTtBQUNuQixHQUFLLENBQUMsY0FBYyxJQUFHLFVBQVk7UUFBN0IsY0FBYyxHQUFkLGNBQWM7QUFDcEIsR0FBSyxDQUFDLGlCQUFpQixJQUFHLGNBQWdCO1FBQXBDLGlCQUFpQixHQUFqQixpQkFBaUI7QUFDdkIsR0FBSyxDQUFDLGlCQUFpQixJQUFHLGNBQWdCLEVBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1FBQTFDLGlCQUFpQixHQUFqQixpQkFBaUI7QUFDdkIsR0FBSyxDQUFDLHFCQUFxQixJQUFHLGtCQUFvQjtRQUE1QyxxQkFBcUIsR0FBckIscUJBQXFCO0FBQzNCLEdBQUssQ0FBQyx1QkFBdUIsSUFBRyxxQkFBdUI7UUFBakQsdUJBQXVCLEdBQXZCLHVCQUF1QjtBQUM3QixHQUFLLENBQUMscUJBQXFCLElBQUksWUFBWSxFQUFjLE1BQUEsQ0FBWixXQUFXO1FBQWxELHFCQUFxQixHQUFyQixxQkFBcUI7QUFDM0IsR0FBSyxDQUFDLHlCQUF5QixJQUFJLGtCQUFrQixFQUFjLE1BQUEsQ0FBWixXQUFXO1FBQTVELHlCQUF5QixHQUF6Qix5QkFBeUI7QUFDL0IsR0FBSyxDQUFDLDJCQUEyQixJQUFJLG9CQUFvQixFQUFjLE1BQUEsQ0FBWixXQUFXO1FBQWhFLDJCQUEyQixHQUEzQiwyQkFBMkI7QUFDakMsR0FBSyxDQUFDLDRCQUE0QixJQUFJLHFCQUFxQixFQUFjLE1BQUEsQ0FBWixXQUFXO1FBQWxFLDRCQUE0QixHQUE1Qiw0QkFBNEI7ZUFFMUIsQ0FBQztJQUNkLFFBQVEsRUFBUixRQUFRO0lBQ1IsUUFBUSxFQUFSLFFBQVE7SUFDUixXQUFXLEVBQVgsV0FBVztJQUNYLGFBQWEsRUFBYixhQUFhO0lBQ2IsY0FBYyxFQUFkLGNBQWM7SUFDZCxpQkFBaUIsRUFBakIsaUJBQWlCO0lBQ2pCLGlCQUFpQixFQUFqQixpQkFBaUI7SUFDakIscUJBQXFCLEVBQXJCLHFCQUFxQjtJQUNyQix1QkFBdUIsRUFBdkIsdUJBQXVCO0lBQ3ZCLHFCQUFxQixFQUFyQixxQkFBcUI7SUFDckIseUJBQXlCLEVBQXpCLHlCQUF5QjtJQUN6QiwyQkFBMkIsRUFBM0IsMkJBQTJCO0lBQzNCLDRCQUE0QixFQUE1Qiw0QkFBNEI7QUFDOUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnQgY29uc3QgdHlwZVR5cGUgPSBcInR5cGVcIjtcbmV4cG9ydCBjb25zdCBuYW1lVHlwZSA9IFwibmFtZVwiO1xuZXhwb3J0IGNvbnN0IGNvbW1lbnRUeXBlID0gXCJjb21tZW50XCI7XG5leHBvcnQgY29uc3QgZW5kT2ZMaW5lVHlwZSA9IFwiZW5kLW9mLWxpbmVcIjtcbmV4cG9ydCBjb25zdCB3aGl0ZXNwYWNlVHlwZSA9IFwid2hpdGVzcGFjZVwiO1xuZXhwb3J0IGNvbnN0IHN0cmluZ0xpdGVyYWxUeXBlID0gXCJzdHJpbmctbGl0ZXJhbFwiO1xuZXhwb3J0IGNvbnN0IGJyb2tlbkNvbW1lbnRUeXBlID0gXCJicm9rZW4tYzBtbWVudFwiOyAgLy8vXG5leHBvcnQgY29uc3QgcmVndWxhckV4cHJlc3Npb25UeXBlID0gXCJyZWd1bGFyLWV4cHJlc3Npb25cIjtcbmV4cG9ydCBjb25zdCBicm9rZW5TdHJpbmdMaXRlcmFsVHlwZSA9IFwiYnJva2VuLXN0cmluZy1saXRlcmFsXCI7XG5leHBvcnQgY29uc3Qgc2luZ2xlTGluZUNvbW1lbnRUeXBlID0gYHNpbmdsZS1saW5lICR7Y29tbWVudFR5cGV9YDtcbmV4cG9ydCBjb25zdCBlbmRPZk11bHRpTGluZUNvbW1lbnRUeXBlID0gYGVuZC1vZi1tdWx0aS1saW5lICR7Y29tbWVudFR5cGV9YDtcbmV4cG9ydCBjb25zdCBzdGFydE9mTXVsdGlMaW5lQ29tbWVudFR5cGUgPSBgc3RhcnQtb2YtbXVsdGktbGluZSAke2NvbW1lbnRUeXBlfWA7XG5leHBvcnQgY29uc3QgbWlkZGxlT2ZNdWx0aUxpbmVDb21tZW50VHlwZSA9IGBtaWRkbGUtb2YtbXVsdGktbGluZSAke2NvbW1lbnRUeXBlfWA7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdHlwZVR5cGUsXG4gIG5hbWVUeXBlLFxuICBjb21tZW50VHlwZSxcbiAgZW5kT2ZMaW5lVHlwZSxcbiAgd2hpdGVzcGFjZVR5cGUsXG4gIHN0cmluZ0xpdGVyYWxUeXBlLFxuICBicm9rZW5Db21tZW50VHlwZSxcbiAgcmVndWxhckV4cHJlc3Npb25UeXBlLFxuICBicm9rZW5TdHJpbmdMaXRlcmFsVHlwZSxcbiAgc2luZ2xlTGluZUNvbW1lbnRUeXBlLFxuICBlbmRPZk11bHRpTGluZUNvbW1lbnRUeXBlLFxuICBzdGFydE9mTXVsdGlMaW5lQ29tbWVudFR5cGUsXG4gIG1pZGRsZU9mTXVsdGlMaW5lQ29tbWVudFR5cGVcbn07XG4iXX0=