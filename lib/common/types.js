"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.middleOfMultiLineCommentType = exports.startOfMultiLineCommentType = exports.endOfMultiLineCommentType = exports.singleLineCommentType = exports.brokenStringLiteralType = exports.regularExpressionType = exports.brokenCommentType = exports.stringLiteralType = exports.whitespaceType = exports.endOfLineType = exports.commentType = exports.nameType = exports.typeType = void 0;
var typeType = "type";
exports.typeType = typeType;
var nameType = "name";
exports.nameType = nameType;
var commentType = "comment";
exports.commentType = commentType;
var endOfLineType = "end-of-line";
exports.endOfLineType = endOfLineType;
var whitespaceType = "whitespace";
exports.whitespaceType = whitespaceType;
var stringLiteralType = "string-literal";
exports.stringLiteralType = stringLiteralType;
var brokenCommentType = "broken-c0mment"; ///

exports.brokenCommentType = brokenCommentType;
var regularExpressionType = "regular-expression";
exports.regularExpressionType = regularExpressionType;
var brokenStringLiteralType = "broken-string-literal";
exports.brokenStringLiteralType = brokenStringLiteralType;
var singleLineCommentType = "single-line ".concat(commentType);
exports.singleLineCommentType = singleLineCommentType;
var endOfMultiLineCommentType = "end-of-multi-line ".concat(commentType);
exports.endOfMultiLineCommentType = endOfMultiLineCommentType;
var startOfMultiLineCommentType = "start-of-multi-line ".concat(commentType);
exports.startOfMultiLineCommentType = startOfMultiLineCommentType;
var middleOfMultiLineCommentType = "middle-of-multi-line ".concat(commentType);
exports.middleOfMultiLineCommentType = middleOfMultiLineCommentType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGVzLmpzIl0sIm5hbWVzIjpbInR5cGVUeXBlIiwibmFtZVR5cGUiLCJjb21tZW50VHlwZSIsImVuZE9mTGluZVR5cGUiLCJ3aGl0ZXNwYWNlVHlwZSIsInN0cmluZ0xpdGVyYWxUeXBlIiwiYnJva2VuQ29tbWVudFR5cGUiLCJyZWd1bGFyRXhwcmVzc2lvblR5cGUiLCJicm9rZW5TdHJpbmdMaXRlcmFsVHlwZSIsInNpbmdsZUxpbmVDb21tZW50VHlwZSIsImVuZE9mTXVsdGlMaW5lQ29tbWVudFR5cGUiLCJzdGFydE9mTXVsdGlMaW5lQ29tbWVudFR5cGUiLCJtaWRkbGVPZk11bHRpTGluZUNvbW1lbnRUeXBlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRU8sSUFBTUEsUUFBUSxHQUFHLE1BQWpCOztBQUNBLElBQU1DLFFBQVEsR0FBRyxNQUFqQjs7QUFDQSxJQUFNQyxXQUFXLEdBQUcsU0FBcEI7O0FBQ0EsSUFBTUMsYUFBYSxHQUFHLGFBQXRCOztBQUNBLElBQU1DLGNBQWMsR0FBRyxZQUF2Qjs7QUFDQSxJQUFNQyxpQkFBaUIsR0FBRyxnQkFBMUI7O0FBQ0EsSUFBTUMsaUJBQWlCLEdBQUcsZ0JBQTFCLEMsQ0FBNkM7OztBQUM3QyxJQUFNQyxxQkFBcUIsR0FBRyxvQkFBOUI7O0FBQ0EsSUFBTUMsdUJBQXVCLEdBQUcsdUJBQWhDOztBQUNBLElBQU1DLHFCQUFxQix5QkFBa0JQLFdBQWxCLENBQTNCOztBQUNBLElBQU1RLHlCQUF5QiwrQkFBd0JSLFdBQXhCLENBQS9COztBQUNBLElBQU1TLDJCQUEyQixpQ0FBMEJULFdBQTFCLENBQWpDOztBQUNBLElBQU1VLDRCQUE0QixrQ0FBMkJWLFdBQTNCLENBQWxDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBjb25zdCB0eXBlVHlwZSA9IFwidHlwZVwiO1xuZXhwb3J0IGNvbnN0IG5hbWVUeXBlID0gXCJuYW1lXCI7XG5leHBvcnQgY29uc3QgY29tbWVudFR5cGUgPSBcImNvbW1lbnRcIjtcbmV4cG9ydCBjb25zdCBlbmRPZkxpbmVUeXBlID0gXCJlbmQtb2YtbGluZVwiO1xuZXhwb3J0IGNvbnN0IHdoaXRlc3BhY2VUeXBlID0gXCJ3aGl0ZXNwYWNlXCI7XG5leHBvcnQgY29uc3Qgc3RyaW5nTGl0ZXJhbFR5cGUgPSBcInN0cmluZy1saXRlcmFsXCI7XG5leHBvcnQgY29uc3QgYnJva2VuQ29tbWVudFR5cGUgPSBcImJyb2tlbi1jMG1tZW50XCI7ICAvLy9cbmV4cG9ydCBjb25zdCByZWd1bGFyRXhwcmVzc2lvblR5cGUgPSBcInJlZ3VsYXItZXhwcmVzc2lvblwiO1xuZXhwb3J0IGNvbnN0IGJyb2tlblN0cmluZ0xpdGVyYWxUeXBlID0gXCJicm9rZW4tc3RyaW5nLWxpdGVyYWxcIjtcbmV4cG9ydCBjb25zdCBzaW5nbGVMaW5lQ29tbWVudFR5cGUgPSBgc2luZ2xlLWxpbmUgJHtjb21tZW50VHlwZX1gO1xuZXhwb3J0IGNvbnN0IGVuZE9mTXVsdGlMaW5lQ29tbWVudFR5cGUgPSBgZW5kLW9mLW11bHRpLWxpbmUgJHtjb21tZW50VHlwZX1gO1xuZXhwb3J0IGNvbnN0IHN0YXJ0T2ZNdWx0aUxpbmVDb21tZW50VHlwZSA9IGBzdGFydC1vZi1tdWx0aS1saW5lICR7Y29tbWVudFR5cGV9YDtcbmV4cG9ydCBjb25zdCBtaWRkbGVPZk11bHRpTGluZUNvbW1lbnRUeXBlID0gYG1pZGRsZS1vZi1tdWx0aS1saW5lICR7Y29tbWVudFR5cGV9YDtcbiJdfQ==