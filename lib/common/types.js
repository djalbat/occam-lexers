"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exports.middleOfMultiLineCommentType = exports.startOfMultiLineCommentType = exports.endOfMultiLineCommentType = exports.singleLineCommentType = exports.brokenStringLiteralType = exports.regularExpressionType = exports.brokenCommentType = exports.stringLiteralType = exports.whitespaceType = exports.endOfLineType = exports.commentType = exports.nameType = exports.typeType = void 0;
var typeType = "type";
exports.typeType = typeType;
var nameType = "name";
exports.nameType = nameType;
var commentType = "comment";
exports.commentType = commentType;
var endOfLineType = "end-of-line";
exports.endOfLineType = endOfLineType;
var whitespaceType = "whitespace";
exports.whitespaceType = whitespaceType;
var stringLiteralType = "string-literal";
exports.stringLiteralType = stringLiteralType;
var brokenCommentType = "broken-c0mment"; ///
exports.brokenCommentType = brokenCommentType;
var regularExpressionType = "regular-expression";
exports.regularExpressionType = regularExpressionType;
var brokenStringLiteralType = "broken-string-literal";
exports.brokenStringLiteralType = brokenStringLiteralType;
var singleLineCommentType = "single-line ".concat(commentType);
exports.singleLineCommentType = singleLineCommentType;
var endOfMultiLineCommentType = "end-of-multi-line ".concat(commentType);
exports.endOfMultiLineCommentType = endOfMultiLineCommentType;
var startOfMultiLineCommentType = "start-of-multi-line ".concat(commentType);
exports.startOfMultiLineCommentType = startOfMultiLineCommentType;
var middleOfMultiLineCommentType = "middle-of-multi-line ".concat(commentType);
exports.middleOfMultiLineCommentType = middleOfMultiLineCommentType;
var _default = {
    typeType: typeType,
    nameType: nameType,
    commentType: commentType,
    endOfLineType: endOfLineType,
    whitespaceType: whitespaceType,
    stringLiteralType: stringLiteralType,
    brokenCommentType: brokenCommentType,
    regularExpressionType: regularExpressionType,
    brokenStringLiteralType: brokenStringLiteralType,
    singleLineCommentType: singleLineCommentType,
    endOfMultiLineCommentType: endOfMultiLineCommentType,
    startOfMultiLineCommentType: startOfMultiLineCommentType,
    middleOfMultiLineCommentType: middleOfMultiLineCommentType
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tb24vdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBjb25zdCB0eXBlVHlwZSA9IFwidHlwZVwiO1xuZXhwb3J0IGNvbnN0IG5hbWVUeXBlID0gXCJuYW1lXCI7XG5leHBvcnQgY29uc3QgY29tbWVudFR5cGUgPSBcImNvbW1lbnRcIjtcbmV4cG9ydCBjb25zdCBlbmRPZkxpbmVUeXBlID0gXCJlbmQtb2YtbGluZVwiO1xuZXhwb3J0IGNvbnN0IHdoaXRlc3BhY2VUeXBlID0gXCJ3aGl0ZXNwYWNlXCI7XG5leHBvcnQgY29uc3Qgc3RyaW5nTGl0ZXJhbFR5cGUgPSBcInN0cmluZy1saXRlcmFsXCI7XG5leHBvcnQgY29uc3QgYnJva2VuQ29tbWVudFR5cGUgPSBcImJyb2tlbi1jMG1tZW50XCI7ICAvLy9cbmV4cG9ydCBjb25zdCByZWd1bGFyRXhwcmVzc2lvblR5cGUgPSBcInJlZ3VsYXItZXhwcmVzc2lvblwiO1xuZXhwb3J0IGNvbnN0IGJyb2tlblN0cmluZ0xpdGVyYWxUeXBlID0gXCJicm9rZW4tc3RyaW5nLWxpdGVyYWxcIjtcbmV4cG9ydCBjb25zdCBzaW5nbGVMaW5lQ29tbWVudFR5cGUgPSBgc2luZ2xlLWxpbmUgJHtjb21tZW50VHlwZX1gO1xuZXhwb3J0IGNvbnN0IGVuZE9mTXVsdGlMaW5lQ29tbWVudFR5cGUgPSBgZW5kLW9mLW11bHRpLWxpbmUgJHtjb21tZW50VHlwZX1gO1xuZXhwb3J0IGNvbnN0IHN0YXJ0T2ZNdWx0aUxpbmVDb21tZW50VHlwZSA9IGBzdGFydC1vZi1tdWx0aS1saW5lICR7Y29tbWVudFR5cGV9YDtcbmV4cG9ydCBjb25zdCBtaWRkbGVPZk11bHRpTGluZUNvbW1lbnRUeXBlID0gYG1pZGRsZS1vZi1tdWx0aS1saW5lICR7Y29tbWVudFR5cGV9YDtcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0eXBlVHlwZSxcbiAgbmFtZVR5cGUsXG4gIGNvbW1lbnRUeXBlLFxuICBlbmRPZkxpbmVUeXBlLFxuICB3aGl0ZXNwYWNlVHlwZSxcbiAgc3RyaW5nTGl0ZXJhbFR5cGUsXG4gIGJyb2tlbkNvbW1lbnRUeXBlLFxuICByZWd1bGFyRXhwcmVzc2lvblR5cGUsXG4gIGJyb2tlblN0cmluZ0xpdGVyYWxUeXBlLFxuICBzaW5nbGVMaW5lQ29tbWVudFR5cGUsXG4gIGVuZE9mTXVsdGlMaW5lQ29tbWVudFR5cGUsXG4gIHN0YXJ0T2ZNdWx0aUxpbmVDb21tZW50VHlwZSxcbiAgbWlkZGxlT2ZNdWx0aUxpbmVDb21tZW50VHlwZVxufTtcbiJdLCJuYW1lcyI6WyJ0eXBlVHlwZSIsIm5hbWVUeXBlIiwiY29tbWVudFR5cGUiLCJlbmRPZkxpbmVUeXBlIiwid2hpdGVzcGFjZVR5cGUiLCJzdHJpbmdMaXRlcmFsVHlwZSIsImJyb2tlbkNvbW1lbnRUeXBlIiwicmVndWxhckV4cHJlc3Npb25UeXBlIiwiYnJva2VuU3RyaW5nTGl0ZXJhbFR5cGUiLCJzaW5nbGVMaW5lQ29tbWVudFR5cGUiLCJlbmRPZk11bHRpTGluZUNvbW1lbnRUeXBlIiwic3RhcnRPZk11bHRpTGluZUNvbW1lbnRUeXBlIiwibWlkZGxlT2ZNdWx0aUxpbmVDb21tZW50VHlwZSJdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBWTs7Ozs7QUFFTCxHQUFLLENBQUNBLFFBQVEsR0FBRyxDQUFNO1FBQWpCQSxRQUFRLEdBQVJBLFFBQVE7QUFDZCxHQUFLLENBQUNDLFFBQVEsR0FBRyxDQUFNO1FBQWpCQSxRQUFRLEdBQVJBLFFBQVE7QUFDZCxHQUFLLENBQUNDLFdBQVcsR0FBRyxDQUFTO1FBQXZCQSxXQUFXLEdBQVhBLFdBQVc7QUFDakIsR0FBSyxDQUFDQyxhQUFhLEdBQUcsQ0FBYTtRQUE3QkEsYUFBYSxHQUFiQSxhQUFhO0FBQ25CLEdBQUssQ0FBQ0MsY0FBYyxHQUFHLENBQVk7UUFBN0JBLGNBQWMsR0FBZEEsY0FBYztBQUNwQixHQUFLLENBQUNDLGlCQUFpQixHQUFHLENBQWdCO1FBQXBDQSxpQkFBaUIsR0FBakJBLGlCQUFpQjtBQUN2QixHQUFLLENBQUNDLGlCQUFpQixHQUFHLENBQWdCLGdCQUFHLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztRQUExQ0EsaUJBQWlCLEdBQWpCQSxpQkFBaUI7QUFDdkIsR0FBSyxDQUFDQyxxQkFBcUIsR0FBRyxDQUFvQjtRQUE1Q0EscUJBQXFCLEdBQXJCQSxxQkFBcUI7QUFDM0IsR0FBSyxDQUFDQyx1QkFBdUIsR0FBRyxDQUF1QjtRQUFqREEsdUJBQXVCLEdBQXZCQSx1QkFBdUI7QUFDN0IsR0FBSyxDQUFDQyxxQkFBcUIsR0FBSSxDQUFZLGNBQWMsTUFBQSxDQUFaUCxXQUFXO1FBQWxETyxxQkFBcUIsR0FBckJBLHFCQUFxQjtBQUMzQixHQUFLLENBQUNDLHlCQUF5QixHQUFJLENBQWtCLG9CQUFjLE1BQUEsQ0FBWlIsV0FBVztRQUE1RFEseUJBQXlCLEdBQXpCQSx5QkFBeUI7QUFDL0IsR0FBSyxDQUFDQywyQkFBMkIsR0FBSSxDQUFvQixzQkFBYyxNQUFBLENBQVpULFdBQVc7UUFBaEVTLDJCQUEyQixHQUEzQkEsMkJBQTJCO0FBQ2pDLEdBQUssQ0FBQ0MsNEJBQTRCLEdBQUksQ0FBcUIsdUJBQWMsTUFBQSxDQUFaVixXQUFXO1FBQWxFVSw0QkFBNEIsR0FBNUJBLDRCQUE0QjtlQUUxQixDQUFDO0lBQ2RaLFFBQVEsRUFBUkEsUUFBUTtJQUNSQyxRQUFRLEVBQVJBLFFBQVE7SUFDUkMsV0FBVyxFQUFYQSxXQUFXO0lBQ1hDLGFBQWEsRUFBYkEsYUFBYTtJQUNiQyxjQUFjLEVBQWRBLGNBQWM7SUFDZEMsaUJBQWlCLEVBQWpCQSxpQkFBaUI7SUFDakJDLGlCQUFpQixFQUFqQkEsaUJBQWlCO0lBQ2pCQyxxQkFBcUIsRUFBckJBLHFCQUFxQjtJQUNyQkMsdUJBQXVCLEVBQXZCQSx1QkFBdUI7SUFDdkJDLHFCQUFxQixFQUFyQkEscUJBQXFCO0lBQ3JCQyx5QkFBeUIsRUFBekJBLHlCQUF5QjtJQUN6QkMsMkJBQTJCLEVBQTNCQSwyQkFBMkI7SUFDM0JDLDRCQUE0QixFQUE1QkEsNEJBQTRCO0FBQzlCLENBQUMifQ==