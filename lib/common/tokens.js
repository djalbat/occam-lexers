'use strict';

var necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    splice = arrayUtilities.splice;


function processByToken(tokensOrContents, Token) {
  processByCallback(tokensOrContents, function (tokenOrContent) {
    var tokensOrRemainingContents = void 0;

    var tokenOrContentString = typeof tokenOrContent === 'string',
        tokenOrContentContent = tokenOrContentString; ///

    if (tokenOrContentContent) {
      var content = tokenOrContent,
          ///
      tokenOrRemainingContent = tokenOrRemainingContentFromContentAndToken(content, Token);

      tokensOrRemainingContents = tokenOrRemainingContent; ///
    } else {
      var token = tokenOrContent; ///

      tokensOrRemainingContents = [token];
    }

    return tokensOrRemainingContents;
  });
}

function processByCallback(tokensOrContents, callback) {
  var index = 0,
      tokensOrContentsLength = tokensOrContents.length;

  while (index < tokensOrContentsLength) {
    var tokenOrContent = tokensOrContents[index],
        tokensOrRemainingContents = callback(tokenOrContent),
        tokensOrRemainingContentsLength = tokensOrRemainingContents.length,
        start = index,
        ///
    deleteCount = 1;

    splice(tokensOrContents, start, deleteCount, tokensOrRemainingContents);

    tokensOrContentsLength -= 1;

    tokensOrContentsLength += tokensOrRemainingContentsLength;

    index += tokensOrRemainingContentsLength;
  }
}

module.exports = {
  processByToken: processByToken,
  processByCallback: processByCallback
};

function tokenOrRemainingContentFromContentAndToken(content, Token) {
  var tokenOrRemainingContent = [],
      remainingContent = void 0,
      tokenPositionWithinContent = Token.positionWithinContent(content);

  while (tokenPositionWithinContent !== -1) {
    if (tokenPositionWithinContent > 0) {
      remainingContent = content.substring(0, tokenPositionWithinContent);

      tokenOrRemainingContent.push(remainingContent);
    }

    var token = Token.fromWithinContent(content),
        tokenContentLength = token.getContentLength(),
        tokenOffset = tokenPositionWithinContent + tokenContentLength;

    tokenOrRemainingContent.push(token);

    content = content.substring(tokenOffset);

    tokenPositionWithinContent = Token.positionWithinContent(content);
  }

  if (content !== '') {
    remainingContent = content;

    tokenOrRemainingContent.push(remainingContent);
  }

  return tokenOrRemainingContent;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9jb21tb24vdG9rZW5zLmpzIl0sIm5hbWVzIjpbIm5lY2Vzc2FyeSIsInJlcXVpcmUiLCJhcnJheVV0aWxpdGllcyIsInNwbGljZSIsInByb2Nlc3NCeVRva2VuIiwidG9rZW5zT3JDb250ZW50cyIsIlRva2VuIiwicHJvY2Vzc0J5Q2FsbGJhY2siLCJ0b2tlbk9yQ29udGVudCIsInRva2Vuc09yUmVtYWluaW5nQ29udGVudHMiLCJ0b2tlbk9yQ29udGVudFN0cmluZyIsInRva2VuT3JDb250ZW50Q29udGVudCIsImNvbnRlbnQiLCJ0b2tlbk9yUmVtYWluaW5nQ29udGVudCIsInRva2VuT3JSZW1haW5pbmdDb250ZW50RnJvbUNvbnRlbnRBbmRUb2tlbiIsInRva2VuIiwiY2FsbGJhY2siLCJpbmRleCIsInRva2Vuc09yQ29udGVudHNMZW5ndGgiLCJsZW5ndGgiLCJ0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzTGVuZ3RoIiwic3RhcnQiLCJkZWxldGVDb3VudCIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZW1haW5pbmdDb250ZW50IiwidG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQiLCJwb3NpdGlvbldpdGhpbkNvbnRlbnQiLCJzdWJzdHJpbmciLCJwdXNoIiwiZnJvbVdpdGhpbkNvbnRlbnQiLCJ0b2tlbkNvbnRlbnRMZW5ndGgiLCJnZXRDb250ZW50TGVuZ3RoIiwidG9rZW5PZmZzZXQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFlBQVlDLFFBQVEsV0FBUixDQUFsQjs7QUFFTSxJQUFFQyxjQUFGLEdBQXFCRixTQUFyQixDQUFFRSxjQUFGO0FBQUEsSUFDRUMsTUFERixHQUNhRCxjQURiLENBQ0VDLE1BREY7OztBQUdOLFNBQVNDLGNBQVQsQ0FBd0JDLGdCQUF4QixFQUEwQ0MsS0FBMUMsRUFBaUQ7QUFDL0NDLG9CQUFrQkYsZ0JBQWxCLEVBQW9DLFVBQVNHLGNBQVQsRUFBeUI7QUFDM0QsUUFBSUMsa0NBQUo7O0FBRUEsUUFBTUMsdUJBQXdCLE9BQU9GLGNBQVAsS0FBMEIsUUFBeEQ7QUFBQSxRQUNNRyx3QkFBd0JELG9CQUQ5QixDQUgyRCxDQUlQOztBQUVwRCxRQUFJQyxxQkFBSixFQUEyQjtBQUN6QixVQUFNQyxVQUFVSixjQUFoQjtBQUFBLFVBQWdDO0FBQzFCSyxnQ0FBMEJDLDJDQUEyQ0YsT0FBM0MsRUFBb0ROLEtBQXBELENBRGhDOztBQUdBRyxrQ0FBNEJJLHVCQUE1QixDQUp5QixDQUk2QjtBQUN2RCxLQUxELE1BS087QUFDTCxVQUFNRSxRQUFRUCxjQUFkLENBREssQ0FDMEI7O0FBRS9CQyxrQ0FBNEIsQ0FBQ00sS0FBRCxDQUE1QjtBQUNEOztBQUVELFdBQU9OLHlCQUFQO0FBQ0QsR0FsQkQ7QUFtQkQ7O0FBRUQsU0FBU0YsaUJBQVQsQ0FBMkJGLGdCQUEzQixFQUE2Q1csUUFBN0MsRUFBdUQ7QUFDckQsTUFBSUMsUUFBUSxDQUFaO0FBQUEsTUFDSUMseUJBQXlCYixpQkFBaUJjLE1BRDlDOztBQUdBLFNBQU9GLFFBQVFDLHNCQUFmLEVBQXVDO0FBQ3JDLFFBQU1WLGlCQUFpQkgsaUJBQWlCWSxLQUFqQixDQUF2QjtBQUFBLFFBQ01SLDRCQUE0Qk8sU0FBU1IsY0FBVCxDQURsQztBQUFBLFFBRU1ZLGtDQUFrQ1gsMEJBQTBCVSxNQUZsRTtBQUFBLFFBR01FLFFBQVFKLEtBSGQ7QUFBQSxRQUdzQjtBQUNoQkssa0JBQWMsQ0FKcEI7O0FBTUFuQixXQUFPRSxnQkFBUCxFQUF5QmdCLEtBQXpCLEVBQWdDQyxXQUFoQyxFQUE2Q2IseUJBQTdDOztBQUVBUyw4QkFBMEIsQ0FBMUI7O0FBRUFBLDhCQUEwQkUsK0JBQTFCOztBQUVBSCxhQUFTRywrQkFBVDtBQUNEO0FBQ0Y7O0FBRURHLE9BQU9DLE9BQVAsR0FBaUI7QUFDZnBCLGdDQURlO0FBRWZHO0FBRmUsQ0FBakI7O0FBS0EsU0FBU08sMENBQVQsQ0FBb0RGLE9BQXBELEVBQTZETixLQUE3RCxFQUFvRTtBQUNsRSxNQUFJTywwQkFBMEIsRUFBOUI7QUFBQSxNQUNJWSx5QkFESjtBQUFBLE1BRUlDLDZCQUE2QnBCLE1BQU1xQixxQkFBTixDQUE0QmYsT0FBNUIsQ0FGakM7O0FBSUEsU0FBT2MsK0JBQStCLENBQUMsQ0FBdkMsRUFBMEM7QUFDeEMsUUFBSUEsNkJBQTZCLENBQWpDLEVBQW9DO0FBQ2xDRCx5QkFBbUJiLFFBQVFnQixTQUFSLENBQWtCLENBQWxCLEVBQXFCRiwwQkFBckIsQ0FBbkI7O0FBRUFiLDhCQUF3QmdCLElBQXhCLENBQTZCSixnQkFBN0I7QUFDRDs7QUFFRCxRQUFNVixRQUFRVCxNQUFNd0IsaUJBQU4sQ0FBd0JsQixPQUF4QixDQUFkO0FBQUEsUUFDTW1CLHFCQUFxQmhCLE1BQU1pQixnQkFBTixFQUQzQjtBQUFBLFFBRU1DLGNBQWNQLDZCQUE2Qkssa0JBRmpEOztBQUlBbEIsNEJBQXdCZ0IsSUFBeEIsQ0FBNkJkLEtBQTdCOztBQUVBSCxjQUFVQSxRQUFRZ0IsU0FBUixDQUFrQkssV0FBbEIsQ0FBVjs7QUFFQVAsaUNBQTZCcEIsTUFBTXFCLHFCQUFOLENBQTRCZixPQUE1QixDQUE3QjtBQUNEOztBQUVELE1BQUlBLFlBQVksRUFBaEIsRUFBb0I7QUFDbEJhLHVCQUFtQmIsT0FBbkI7O0FBRUFDLDRCQUF3QmdCLElBQXhCLENBQTZCSixnQkFBN0I7QUFDRDs7QUFFRCxTQUFPWix1QkFBUDtBQUNEIiwiZmlsZSI6InRva2Vucy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xyXG5cclxuY29uc3QgeyBhcnJheVV0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxyXG4gICAgICB7IHNwbGljZSB9ID0gYXJyYXlVdGlsaXRpZXM7XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzQnlUb2tlbih0b2tlbnNPckNvbnRlbnRzLCBUb2tlbikge1xyXG4gIHByb2Nlc3NCeUNhbGxiYWNrKHRva2Vuc09yQ29udGVudHMsIGZ1bmN0aW9uKHRva2VuT3JDb250ZW50KSB7XHJcbiAgICBsZXQgdG9rZW5zT3JSZW1haW5pbmdDb250ZW50cztcclxuXHJcbiAgICBjb25zdCB0b2tlbk9yQ29udGVudFN0cmluZyA9ICh0eXBlb2YgdG9rZW5PckNvbnRlbnQgPT09ICdzdHJpbmcnKSxcclxuICAgICAgICAgIHRva2VuT3JDb250ZW50Q29udGVudCA9IHRva2VuT3JDb250ZW50U3RyaW5nOyAvLy9cclxuXHJcbiAgICBpZiAodG9rZW5PckNvbnRlbnRDb250ZW50KSB7XHJcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSB0b2tlbk9yQ29udGVudCwgLy8vXHJcbiAgICAgICAgICAgIHRva2VuT3JSZW1haW5pbmdDb250ZW50ID0gdG9rZW5PclJlbWFpbmluZ0NvbnRlbnRGcm9tQ29udGVudEFuZFRva2VuKGNvbnRlbnQsIFRva2VuKTtcclxuXHJcbiAgICAgIHRva2Vuc09yUmVtYWluaW5nQ29udGVudHMgPSB0b2tlbk9yUmVtYWluaW5nQ29udGVudDsgIC8vL1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgdG9rZW4gPSB0b2tlbk9yQ29udGVudDsgIC8vL1xyXG5cclxuICAgICAgdG9rZW5zT3JSZW1haW5pbmdDb250ZW50cyA9IFt0b2tlbl07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRva2Vuc09yUmVtYWluaW5nQ29udGVudHM7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb2Nlc3NCeUNhbGxiYWNrKHRva2Vuc09yQ29udGVudHMsIGNhbGxiYWNrKSB7XHJcbiAgbGV0IGluZGV4ID0gMCxcclxuICAgICAgdG9rZW5zT3JDb250ZW50c0xlbmd0aCA9IHRva2Vuc09yQ29udGVudHMubGVuZ3RoO1xyXG5cclxuICB3aGlsZSAoaW5kZXggPCB0b2tlbnNPckNvbnRlbnRzTGVuZ3RoKSB7XHJcbiAgICBjb25zdCB0b2tlbk9yQ29udGVudCA9IHRva2Vuc09yQ29udGVudHNbaW5kZXhdLFxyXG4gICAgICAgICAgdG9rZW5zT3JSZW1haW5pbmdDb250ZW50cyA9IGNhbGxiYWNrKHRva2VuT3JDb250ZW50KSxcclxuICAgICAgICAgIHRva2Vuc09yUmVtYWluaW5nQ29udGVudHNMZW5ndGggPSB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzLmxlbmd0aCxcclxuICAgICAgICAgIHN0YXJ0ID0gaW5kZXgsICAvLy9cclxuICAgICAgICAgIGRlbGV0ZUNvdW50ID0gMTtcclxuXHJcbiAgICBzcGxpY2UodG9rZW5zT3JDb250ZW50cywgc3RhcnQsIGRlbGV0ZUNvdW50LCB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzKTtcclxuXHJcbiAgICB0b2tlbnNPckNvbnRlbnRzTGVuZ3RoIC09IDE7XHJcblxyXG4gICAgdG9rZW5zT3JDb250ZW50c0xlbmd0aCArPSB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzTGVuZ3RoO1xyXG5cclxuICAgIGluZGV4ICs9IHRva2Vuc09yUmVtYWluaW5nQ29udGVudHNMZW5ndGg7XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBwcm9jZXNzQnlUb2tlbixcclxuICBwcm9jZXNzQnlDYWxsYmFja1xyXG59O1xyXG5cclxuZnVuY3Rpb24gdG9rZW5PclJlbWFpbmluZ0NvbnRlbnRGcm9tQ29udGVudEFuZFRva2VuKGNvbnRlbnQsIFRva2VuKSB7XHJcbiAgbGV0IHRva2VuT3JSZW1haW5pbmdDb250ZW50ID0gW10sXHJcbiAgICAgIHJlbWFpbmluZ0NvbnRlbnQsXHJcbiAgICAgIHRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50ID0gVG9rZW4ucG9zaXRpb25XaXRoaW5Db250ZW50KGNvbnRlbnQpO1xyXG4gIFxyXG4gIHdoaWxlICh0b2tlblBvc2l0aW9uV2l0aGluQ29udGVudCAhPT0gLTEpIHtcclxuICAgIGlmICh0b2tlblBvc2l0aW9uV2l0aGluQ29udGVudCA+IDApIHtcclxuICAgICAgcmVtYWluaW5nQ29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKDAsIHRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50KTtcclxuXHJcbiAgICAgIHRva2VuT3JSZW1haW5pbmdDb250ZW50LnB1c2gocmVtYWluaW5nQ29udGVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdG9rZW4gPSBUb2tlbi5mcm9tV2l0aGluQ29udGVudChjb250ZW50KSxcclxuICAgICAgICAgIHRva2VuQ29udGVudExlbmd0aCA9IHRva2VuLmdldENvbnRlbnRMZW5ndGgoKSxcclxuICAgICAgICAgIHRva2VuT2Zmc2V0ID0gdG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQgKyB0b2tlbkNvbnRlbnRMZW5ndGg7XHJcbiAgICBcclxuICAgIHRva2VuT3JSZW1haW5pbmdDb250ZW50LnB1c2godG9rZW4pO1xyXG4gICAgXHJcbiAgICBjb250ZW50ID0gY29udGVudC5zdWJzdHJpbmcodG9rZW5PZmZzZXQpO1xyXG5cclxuICAgIHRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50ID0gVG9rZW4ucG9zaXRpb25XaXRoaW5Db250ZW50KGNvbnRlbnQpO1xyXG4gIH1cclxuICBcclxuICBpZiAoY29udGVudCAhPT0gJycpIHtcclxuICAgIHJlbWFpbmluZ0NvbnRlbnQgPSBjb250ZW50O1xyXG5cclxuICAgIHRva2VuT3JSZW1haW5pbmdDb250ZW50LnB1c2gocmVtYWluaW5nQ29udGVudCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdG9rZW5PclJlbWFpbmluZ0NvbnRlbnQ7XHJcbn1cclxuIl19