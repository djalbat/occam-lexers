'use strict';

var necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    splice = arrayUtilities.splice;


function tokeniseByToken(tokensOrContents, Token) {
  tokeniseByCallback(tokensOrContents, function (tokenOrContent) {
    var tokensOrRemainingContents = void 0;

    var tokenOrContentString = typeof tokenOrContent === 'string',
        tokenOrContentContent = tokenOrContentString; ///

    if (tokenOrContentContent) {
      var content = tokenOrContent,
          ///
      tokenOrRemainingContent = tokenOrRemainingContentFromContentAndToken(content, Token);

      tokensOrRemainingContents = tokenOrRemainingContent; ///
    } else {
      var token = tokenOrContent; ///

      tokensOrRemainingContents = [token];
    }

    return tokensOrRemainingContents;
  });
}

function tokeniseByCallback(tokensOrContents, callback) {
  var index = 0,
      tokensOrContentsLength = tokensOrContents.length;

  while (index < tokensOrContentsLength) {
    var tokenOrContent = tokensOrContents[index],
        tokensOrRemainingContents = callback(tokenOrContent),
        tokensOrRemainingContentsLength = tokensOrRemainingContents.length,
        start = index,
        ///
    deleteCount = 1;

    splice(tokensOrContents, start, deleteCount, tokensOrRemainingContents);

    tokensOrContentsLength -= 1;

    tokensOrContentsLength += tokensOrRemainingContentsLength;

    index += tokensOrRemainingContentsLength;
  }
}

module.exports = {
  tokeniseByToken: tokeniseByToken,
  tokeniseByCallback: tokeniseByCallback
};

function tokenOrRemainingContentFromContentAndToken(content, Token) {
  var tokenOrRemainingContent = [],
      remainingContent = void 0,
      tokenPositionWithinContent = Token.positionWithinContent(content);

  while (tokenPositionWithinContent !== -1) {
    if (tokenPositionWithinContent > 0) {
      remainingContent = content.substring(0, tokenPositionWithinContent);

      tokenOrRemainingContent.push(remainingContent);
    }

    var token = Token.fromWithinContent(content),
        tokenContentLength = token.getContentLength(),
        tokenOffset = tokenPositionWithinContent + tokenContentLength;

    tokenOrRemainingContent.push(token);

    content = content.substring(tokenOffset);

    tokenPositionWithinContent = Token.positionWithinContent(content);
  }

  if (content !== '') {
    remainingContent = content;

    tokenOrRemainingContent.push(remainingContent);
  }

  return tokenOrRemainingContent;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9jb21tb24vdG9rZW5zLmpzIl0sIm5hbWVzIjpbIm5lY2Vzc2FyeSIsInJlcXVpcmUiLCJhcnJheVV0aWxpdGllcyIsInNwbGljZSIsInRva2VuaXNlQnlUb2tlbiIsInRva2Vuc09yQ29udGVudHMiLCJUb2tlbiIsInRva2VuaXNlQnlDYWxsYmFjayIsInRva2VuT3JDb250ZW50IiwidG9rZW5zT3JSZW1haW5pbmdDb250ZW50cyIsInRva2VuT3JDb250ZW50U3RyaW5nIiwidG9rZW5PckNvbnRlbnRDb250ZW50IiwiY29udGVudCIsInRva2VuT3JSZW1haW5pbmdDb250ZW50IiwidG9rZW5PclJlbWFpbmluZ0NvbnRlbnRGcm9tQ29udGVudEFuZFRva2VuIiwidG9rZW4iLCJjYWxsYmFjayIsImluZGV4IiwidG9rZW5zT3JDb250ZW50c0xlbmd0aCIsImxlbmd0aCIsInRva2Vuc09yUmVtYWluaW5nQ29udGVudHNMZW5ndGgiLCJzdGFydCIsImRlbGV0ZUNvdW50IiwibW9kdWxlIiwiZXhwb3J0cyIsInJlbWFpbmluZ0NvbnRlbnQiLCJ0b2tlblBvc2l0aW9uV2l0aGluQ29udGVudCIsInBvc2l0aW9uV2l0aGluQ29udGVudCIsInN1YnN0cmluZyIsInB1c2giLCJmcm9tV2l0aGluQ29udGVudCIsInRva2VuQ29udGVudExlbmd0aCIsImdldENvbnRlbnRMZW5ndGgiLCJ0b2tlbk9mZnNldCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxXQUFSLENBQWxCOztBQUVNLElBQUVDLGNBQUYsR0FBcUJGLFNBQXJCLENBQUVFLGNBQUY7QUFBQSxJQUNFQyxNQURGLEdBQ2FELGNBRGIsQ0FDRUMsTUFERjs7O0FBR04sU0FBU0MsZUFBVCxDQUF5QkMsZ0JBQXpCLEVBQTJDQyxLQUEzQyxFQUFrRDtBQUNoREMscUJBQW1CRixnQkFBbkIsRUFBcUMsVUFBU0csY0FBVCxFQUF5QjtBQUM1RCxRQUFJQyxrQ0FBSjs7QUFFQSxRQUFNQyx1QkFBd0IsT0FBT0YsY0FBUCxLQUEwQixRQUF4RDtBQUFBLFFBQ01HLHdCQUF3QkQsb0JBRDlCLENBSDRELENBSVI7O0FBRXBELFFBQUlDLHFCQUFKLEVBQTJCO0FBQ3pCLFVBQU1DLFVBQVVKLGNBQWhCO0FBQUEsVUFBZ0M7QUFDMUJLLGdDQUEwQkMsMkNBQTJDRixPQUEzQyxFQUFvRE4sS0FBcEQsQ0FEaEM7O0FBR0FHLGtDQUE0QkksdUJBQTVCLENBSnlCLENBSTZCO0FBQ3ZELEtBTEQsTUFLTztBQUNMLFVBQU1FLFFBQVFQLGNBQWQsQ0FESyxDQUMwQjs7QUFFL0JDLGtDQUE0QixDQUFDTSxLQUFELENBQTVCO0FBQ0Q7O0FBRUQsV0FBT04seUJBQVA7QUFDRCxHQWxCRDtBQW1CRDs7QUFFRCxTQUFTRixrQkFBVCxDQUE0QkYsZ0JBQTVCLEVBQThDVyxRQUE5QyxFQUF3RDtBQUN0RCxNQUFJQyxRQUFRLENBQVo7QUFBQSxNQUNJQyx5QkFBeUJiLGlCQUFpQmMsTUFEOUM7O0FBR0EsU0FBT0YsUUFBUUMsc0JBQWYsRUFBdUM7QUFDckMsUUFBTVYsaUJBQWlCSCxpQkFBaUJZLEtBQWpCLENBQXZCO0FBQUEsUUFDTVIsNEJBQTRCTyxTQUFTUixjQUFULENBRGxDO0FBQUEsUUFFTVksa0NBQWtDWCwwQkFBMEJVLE1BRmxFO0FBQUEsUUFHTUUsUUFBUUosS0FIZDtBQUFBLFFBR3NCO0FBQ2hCSyxrQkFBYyxDQUpwQjs7QUFNQW5CLFdBQU9FLGdCQUFQLEVBQXlCZ0IsS0FBekIsRUFBZ0NDLFdBQWhDLEVBQTZDYix5QkFBN0M7O0FBRUFTLDhCQUEwQixDQUExQjs7QUFFQUEsOEJBQTBCRSwrQkFBMUI7O0FBRUFILGFBQVNHLCtCQUFUO0FBQ0Q7QUFDRjs7QUFFREcsT0FBT0MsT0FBUCxHQUFpQjtBQUNmcEIsa0NBRGU7QUFFZkc7QUFGZSxDQUFqQjs7QUFLQSxTQUFTTywwQ0FBVCxDQUFvREYsT0FBcEQsRUFBNkROLEtBQTdELEVBQW9FO0FBQ2xFLE1BQUlPLDBCQUEwQixFQUE5QjtBQUFBLE1BQ0lZLHlCQURKO0FBQUEsTUFFSUMsNkJBQTZCcEIsTUFBTXFCLHFCQUFOLENBQTRCZixPQUE1QixDQUZqQzs7QUFJQSxTQUFPYywrQkFBK0IsQ0FBQyxDQUF2QyxFQUEwQztBQUN4QyxRQUFJQSw2QkFBNkIsQ0FBakMsRUFBb0M7QUFDbENELHlCQUFtQmIsUUFBUWdCLFNBQVIsQ0FBa0IsQ0FBbEIsRUFBcUJGLDBCQUFyQixDQUFuQjs7QUFFQWIsOEJBQXdCZ0IsSUFBeEIsQ0FBNkJKLGdCQUE3QjtBQUNEOztBQUVELFFBQU1WLFFBQVFULE1BQU13QixpQkFBTixDQUF3QmxCLE9BQXhCLENBQWQ7QUFBQSxRQUNNbUIscUJBQXFCaEIsTUFBTWlCLGdCQUFOLEVBRDNCO0FBQUEsUUFFTUMsY0FBY1AsNkJBQTZCSyxrQkFGakQ7O0FBSUFsQiw0QkFBd0JnQixJQUF4QixDQUE2QmQsS0FBN0I7O0FBRUFILGNBQVVBLFFBQVFnQixTQUFSLENBQWtCSyxXQUFsQixDQUFWOztBQUVBUCxpQ0FBNkJwQixNQUFNcUIscUJBQU4sQ0FBNEJmLE9BQTVCLENBQTdCO0FBQ0Q7O0FBRUQsTUFBSUEsWUFBWSxFQUFoQixFQUFvQjtBQUNsQmEsdUJBQW1CYixPQUFuQjs7QUFFQUMsNEJBQXdCZ0IsSUFBeEIsQ0FBNkJKLGdCQUE3QjtBQUNEOztBQUVELFNBQU9aLHVCQUFQO0FBQ0QiLCJmaWxlIjoidG9rZW5zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XHJcblxyXG5jb25zdCB7IGFycmF5VXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXHJcbiAgICAgIHsgc3BsaWNlIH0gPSBhcnJheVV0aWxpdGllcztcclxuXHJcbmZ1bmN0aW9uIHRva2VuaXNlQnlUb2tlbih0b2tlbnNPckNvbnRlbnRzLCBUb2tlbikge1xyXG4gIHRva2VuaXNlQnlDYWxsYmFjayh0b2tlbnNPckNvbnRlbnRzLCBmdW5jdGlvbih0b2tlbk9yQ29udGVudCkge1xyXG4gICAgbGV0IHRva2Vuc09yUmVtYWluaW5nQ29udGVudHM7XHJcblxyXG4gICAgY29uc3QgdG9rZW5PckNvbnRlbnRTdHJpbmcgPSAodHlwZW9mIHRva2VuT3JDb250ZW50ID09PSAnc3RyaW5nJyksXHJcbiAgICAgICAgICB0b2tlbk9yQ29udGVudENvbnRlbnQgPSB0b2tlbk9yQ29udGVudFN0cmluZzsgLy8vXHJcblxyXG4gICAgaWYgKHRva2VuT3JDb250ZW50Q29udGVudCkge1xyXG4gICAgICBjb25zdCBjb250ZW50ID0gdG9rZW5PckNvbnRlbnQsIC8vL1xyXG4gICAgICAgICAgICB0b2tlbk9yUmVtYWluaW5nQ29udGVudCA9IHRva2VuT3JSZW1haW5pbmdDb250ZW50RnJvbUNvbnRlbnRBbmRUb2tlbihjb250ZW50LCBUb2tlbik7XHJcblxyXG4gICAgICB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzID0gdG9rZW5PclJlbWFpbmluZ0NvbnRlbnQ7ICAvLy9cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHRva2VuID0gdG9rZW5PckNvbnRlbnQ7ICAvLy9cclxuXHJcbiAgICAgIHRva2Vuc09yUmVtYWluaW5nQ29udGVudHMgPSBbdG9rZW5dO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0b2tlbmlzZUJ5Q2FsbGJhY2sodG9rZW5zT3JDb250ZW50cywgY2FsbGJhY2spIHtcclxuICBsZXQgaW5kZXggPSAwLFxyXG4gICAgICB0b2tlbnNPckNvbnRlbnRzTGVuZ3RoID0gdG9rZW5zT3JDb250ZW50cy5sZW5ndGg7XHJcblxyXG4gIHdoaWxlIChpbmRleCA8IHRva2Vuc09yQ29udGVudHNMZW5ndGgpIHtcclxuICAgIGNvbnN0IHRva2VuT3JDb250ZW50ID0gdG9rZW5zT3JDb250ZW50c1tpbmRleF0sXHJcbiAgICAgICAgICB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzID0gY2FsbGJhY2sodG9rZW5PckNvbnRlbnQpLFxyXG4gICAgICAgICAgdG9rZW5zT3JSZW1haW5pbmdDb250ZW50c0xlbmd0aCA9IHRva2Vuc09yUmVtYWluaW5nQ29udGVudHMubGVuZ3RoLFxyXG4gICAgICAgICAgc3RhcnQgPSBpbmRleCwgIC8vL1xyXG4gICAgICAgICAgZGVsZXRlQ291bnQgPSAxO1xyXG5cclxuICAgIHNwbGljZSh0b2tlbnNPckNvbnRlbnRzLCBzdGFydCwgZGVsZXRlQ291bnQsIHRva2Vuc09yUmVtYWluaW5nQ29udGVudHMpO1xyXG5cclxuICAgIHRva2Vuc09yQ29udGVudHNMZW5ndGggLT0gMTtcclxuXHJcbiAgICB0b2tlbnNPckNvbnRlbnRzTGVuZ3RoICs9IHRva2Vuc09yUmVtYWluaW5nQ29udGVudHNMZW5ndGg7XHJcblxyXG4gICAgaW5kZXggKz0gdG9rZW5zT3JSZW1haW5pbmdDb250ZW50c0xlbmd0aDtcclxuICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIHRva2VuaXNlQnlUb2tlbixcclxuICB0b2tlbmlzZUJ5Q2FsbGJhY2tcclxufTtcclxuXHJcbmZ1bmN0aW9uIHRva2VuT3JSZW1haW5pbmdDb250ZW50RnJvbUNvbnRlbnRBbmRUb2tlbihjb250ZW50LCBUb2tlbikge1xyXG4gIGxldCB0b2tlbk9yUmVtYWluaW5nQ29udGVudCA9IFtdLFxyXG4gICAgICByZW1haW5pbmdDb250ZW50LFxyXG4gICAgICB0b2tlblBvc2l0aW9uV2l0aGluQ29udGVudCA9IFRva2VuLnBvc2l0aW9uV2l0aGluQ29udGVudChjb250ZW50KTtcclxuICBcclxuICB3aGlsZSAodG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQgIT09IC0xKSB7XHJcbiAgICBpZiAodG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQgPiAwKSB7XHJcbiAgICAgIHJlbWFpbmluZ0NvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZygwLCB0b2tlblBvc2l0aW9uV2l0aGluQ29udGVudCk7XHJcblxyXG4gICAgICB0b2tlbk9yUmVtYWluaW5nQ29udGVudC5wdXNoKHJlbWFpbmluZ0NvbnRlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRva2VuID0gVG9rZW4uZnJvbVdpdGhpbkNvbnRlbnQoY29udGVudCksXHJcbiAgICAgICAgICB0b2tlbkNvbnRlbnRMZW5ndGggPSB0b2tlbi5nZXRDb250ZW50TGVuZ3RoKCksXHJcbiAgICAgICAgICB0b2tlbk9mZnNldCA9IHRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50ICsgdG9rZW5Db250ZW50TGVuZ3RoO1xyXG4gICAgXHJcbiAgICB0b2tlbk9yUmVtYWluaW5nQ29udGVudC5wdXNoKHRva2VuKTtcclxuICAgIFxyXG4gICAgY29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKHRva2VuT2Zmc2V0KTtcclxuXHJcbiAgICB0b2tlblBvc2l0aW9uV2l0aGluQ29udGVudCA9IFRva2VuLnBvc2l0aW9uV2l0aGluQ29udGVudChjb250ZW50KTtcclxuICB9XHJcbiAgXHJcbiAgaWYgKGNvbnRlbnQgIT09ICcnKSB7XHJcbiAgICByZW1haW5pbmdDb250ZW50ID0gY29udGVudDtcclxuXHJcbiAgICB0b2tlbk9yUmVtYWluaW5nQ29udGVudC5wdXNoKHJlbWFpbmluZ0NvbnRlbnQpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRva2VuT3JSZW1haW5pbmdDb250ZW50O1xyXG59XHJcbiJdfQ==