'use strict';

var necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    splice = arrayUtilities.splice;


function passGivenToken(tokensOrContents, Token) {
  passGivenCallback(tokensOrContents, function (content) {
    return tokensOrRemainingContentFromWithinContent(content, Token);
  });
}

function passGivenCallback(tokensOrContents, callback) {
  var index = 0,
      tokensOrContentsLength = tokensOrContents.length;

  while (index < tokensOrContentsLength) {
    var tokenOrContent = tokensOrContents[index],
        tokenOrContentContent = typeof tokenOrContent === 'string';

    if (tokenOrContentContent) {
      var content = tokenOrContent,
          ///
      tokensOrRemainingContent = callback(content),
          tokensOrRemainingContentLength = tokensOrRemainingContent.length,
          start = index,
          ///
      deleteCount = 1;

      splice(tokensOrContents, start, deleteCount, tokensOrRemainingContent);

      tokensOrContentsLength -= 1;

      tokensOrContentsLength += tokensOrRemainingContentLength;

      index += tokensOrRemainingContentLength;
    } else {
      index += 1;
    }
  }
}

module.exports = {
  passGivenToken: passGivenToken,
  passGivenCallback: passGivenCallback
};

function tokensOrRemainingContentFromWithinContent(content, Token) {
  var remainingContent = void 0,
      tokensOrRemainingContent = [],
      tokenPositionWithinContent = Token.positionWithinContent(content);

  while (tokenPositionWithinContent !== -1) {
    if (tokenPositionWithinContent > 0) {
      remainingContent = content.substring(0, tokenPositionWithinContent);

      tokensOrRemainingContent.push(remainingContent);
    }

    var token = Token.fromWithinContent(content),
        tokenContentLength = token.getContentLength(),
        tokenOffset = tokenPositionWithinContent + tokenContentLength;

    tokensOrRemainingContent.push(token);

    content = content.substring(tokenOffset);

    tokenPositionWithinContent = Token.positionWithinContent(content);
  }

  if (content !== '') {
    remainingContent = content;

    tokensOrRemainingContent.push(remainingContent);
  }

  return tokensOrRemainingContent;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9jb21tb24vdG9rZW5zLmpzIl0sIm5hbWVzIjpbIm5lY2Vzc2FyeSIsInJlcXVpcmUiLCJhcnJheVV0aWxpdGllcyIsInNwbGljZSIsInBhc3NHaXZlblRva2VuIiwidG9rZW5zT3JDb250ZW50cyIsIlRva2VuIiwicGFzc0dpdmVuQ2FsbGJhY2siLCJjb250ZW50IiwidG9rZW5zT3JSZW1haW5pbmdDb250ZW50RnJvbVdpdGhpbkNvbnRlbnQiLCJjYWxsYmFjayIsImluZGV4IiwidG9rZW5zT3JDb250ZW50c0xlbmd0aCIsImxlbmd0aCIsInRva2VuT3JDb250ZW50IiwidG9rZW5PckNvbnRlbnRDb250ZW50IiwidG9rZW5zT3JSZW1haW5pbmdDb250ZW50IiwidG9rZW5zT3JSZW1haW5pbmdDb250ZW50TGVuZ3RoIiwic3RhcnQiLCJkZWxldGVDb3VudCIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZW1haW5pbmdDb250ZW50IiwidG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQiLCJwb3NpdGlvbldpdGhpbkNvbnRlbnQiLCJzdWJzdHJpbmciLCJwdXNoIiwidG9rZW4iLCJmcm9tV2l0aGluQ29udGVudCIsInRva2VuQ29udGVudExlbmd0aCIsImdldENvbnRlbnRMZW5ndGgiLCJ0b2tlbk9mZnNldCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxXQUFSLENBQWxCOztBQUVNLElBQUVDLGNBQUYsR0FBcUJGLFNBQXJCLENBQUVFLGNBQUY7QUFBQSxJQUNFQyxNQURGLEdBQ2FELGNBRGIsQ0FDRUMsTUFERjs7O0FBR04sU0FBU0MsY0FBVCxDQUF3QkMsZ0JBQXhCLEVBQTBDQyxLQUExQyxFQUFpRDtBQUMvQ0Msb0JBQWtCRixnQkFBbEIsRUFBb0MsVUFBU0csT0FBVCxFQUFrQjtBQUFFLFdBQU9DLDBDQUEwQ0QsT0FBMUMsRUFBbURGLEtBQW5ELENBQVA7QUFBbUUsR0FBM0g7QUFDRDs7QUFFRCxTQUFTQyxpQkFBVCxDQUEyQkYsZ0JBQTNCLEVBQTZDSyxRQUE3QyxFQUF1RDtBQUNyRCxNQUFJQyxRQUFRLENBQVo7QUFBQSxNQUNJQyx5QkFBeUJQLGlCQUFpQlEsTUFEOUM7O0FBR0EsU0FBT0YsUUFBUUMsc0JBQWYsRUFBdUM7QUFDckMsUUFBTUUsaUJBQWlCVCxpQkFBaUJNLEtBQWpCLENBQXZCO0FBQUEsUUFDTUksd0JBQXlCLE9BQU9ELGNBQVAsS0FBMEIsUUFEekQ7O0FBR0EsUUFBSUMscUJBQUosRUFBMkI7QUFDekIsVUFBTVAsVUFBVU0sY0FBaEI7QUFBQSxVQUFpQztBQUMzQkUsaUNBQTJCTixTQUFTRixPQUFULENBRGpDO0FBQUEsVUFFTVMsaUNBQWlDRCx5QkFBeUJILE1BRmhFO0FBQUEsVUFHTUssUUFBUVAsS0FIZDtBQUFBLFVBR3NCO0FBQ2hCUSxvQkFBYyxDQUpwQjs7QUFNQWhCLGFBQU9FLGdCQUFQLEVBQXlCYSxLQUF6QixFQUFnQ0MsV0FBaEMsRUFBNkNILHdCQUE3Qzs7QUFFQUosZ0NBQTBCLENBQTFCOztBQUVBQSxnQ0FBMEJLLDhCQUExQjs7QUFFQU4sZUFBU00sOEJBQVQ7QUFDRCxLQWRELE1BY087QUFDTE4sZUFBUyxDQUFUO0FBQ0Q7QUFDRjtBQUNGOztBQUVEUyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZqQixrQkFBZ0JBLGNBREQ7QUFFZkcscUJBQW1CQTtBQUZKLENBQWpCOztBQUtBLFNBQVNFLHlDQUFULENBQW1ERCxPQUFuRCxFQUE0REYsS0FBNUQsRUFBbUU7QUFDakUsTUFBSWdCLHlCQUFKO0FBQUEsTUFDSU4sMkJBQTJCLEVBRC9CO0FBQUEsTUFFSU8sNkJBQTZCakIsTUFBTWtCLHFCQUFOLENBQTRCaEIsT0FBNUIsQ0FGakM7O0FBSUEsU0FBT2UsK0JBQStCLENBQUMsQ0FBdkMsRUFBMEM7QUFDeEMsUUFBSUEsNkJBQTZCLENBQWpDLEVBQW9DO0FBQ2xDRCx5QkFBbUJkLFFBQVFpQixTQUFSLENBQWtCLENBQWxCLEVBQXFCRiwwQkFBckIsQ0FBbkI7O0FBRUFQLCtCQUF5QlUsSUFBekIsQ0FBOEJKLGdCQUE5QjtBQUNEOztBQUVELFFBQU1LLFFBQVFyQixNQUFNc0IsaUJBQU4sQ0FBd0JwQixPQUF4QixDQUFkO0FBQUEsUUFDTXFCLHFCQUFxQkYsTUFBTUcsZ0JBQU4sRUFEM0I7QUFBQSxRQUVNQyxjQUFjUiw2QkFBNkJNLGtCQUZqRDs7QUFJQWIsNkJBQXlCVSxJQUF6QixDQUE4QkMsS0FBOUI7O0FBRUFuQixjQUFVQSxRQUFRaUIsU0FBUixDQUFrQk0sV0FBbEIsQ0FBVjs7QUFFQVIsaUNBQTZCakIsTUFBTWtCLHFCQUFOLENBQTRCaEIsT0FBNUIsQ0FBN0I7QUFDRDs7QUFFRCxNQUFJQSxZQUFZLEVBQWhCLEVBQW9CO0FBQ2xCYyx1QkFBbUJkLE9BQW5COztBQUVBUSw2QkFBeUJVLElBQXpCLENBQThCSixnQkFBOUI7QUFDRDs7QUFFRCxTQUFPTix3QkFBUDtBQUNEIiwiZmlsZSI6InRva2Vucy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xyXG5cclxuY29uc3QgeyBhcnJheVV0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxyXG4gICAgICB7IHNwbGljZSB9ID0gYXJyYXlVdGlsaXRpZXM7XHJcblxyXG5mdW5jdGlvbiBwYXNzR2l2ZW5Ub2tlbih0b2tlbnNPckNvbnRlbnRzLCBUb2tlbikge1xyXG4gIHBhc3NHaXZlbkNhbGxiYWNrKHRva2Vuc09yQ29udGVudHMsIGZ1bmN0aW9uKGNvbnRlbnQpIHsgcmV0dXJuIHRva2Vuc09yUmVtYWluaW5nQ29udGVudEZyb21XaXRoaW5Db250ZW50KGNvbnRlbnQsIFRva2VuKTsgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhc3NHaXZlbkNhbGxiYWNrKHRva2Vuc09yQ29udGVudHMsIGNhbGxiYWNrKSB7XHJcbiAgbGV0IGluZGV4ID0gMCxcclxuICAgICAgdG9rZW5zT3JDb250ZW50c0xlbmd0aCA9IHRva2Vuc09yQ29udGVudHMubGVuZ3RoO1xyXG5cclxuICB3aGlsZSAoaW5kZXggPCB0b2tlbnNPckNvbnRlbnRzTGVuZ3RoKSB7XHJcbiAgICBjb25zdCB0b2tlbk9yQ29udGVudCA9IHRva2Vuc09yQ29udGVudHNbaW5kZXhdLFxyXG4gICAgICAgICAgdG9rZW5PckNvbnRlbnRDb250ZW50ID0gKHR5cGVvZiB0b2tlbk9yQ29udGVudCA9PT0gJ3N0cmluZycpO1xyXG5cclxuICAgIGlmICh0b2tlbk9yQ29udGVudENvbnRlbnQpIHtcclxuICAgICAgY29uc3QgY29udGVudCA9IHRva2VuT3JDb250ZW50LCAgLy8vXHJcbiAgICAgICAgICAgIHRva2Vuc09yUmVtYWluaW5nQ29udGVudCA9IGNhbGxiYWNrKGNvbnRlbnQpLFxyXG4gICAgICAgICAgICB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnRMZW5ndGggPSB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnQubGVuZ3RoLFxyXG4gICAgICAgICAgICBzdGFydCA9IGluZGV4LCAgLy8vXHJcbiAgICAgICAgICAgIGRlbGV0ZUNvdW50ID0gMTtcclxuXHJcbiAgICAgIHNwbGljZSh0b2tlbnNPckNvbnRlbnRzLCBzdGFydCwgZGVsZXRlQ291bnQsIHRva2Vuc09yUmVtYWluaW5nQ29udGVudCk7XHJcblxyXG4gICAgICB0b2tlbnNPckNvbnRlbnRzTGVuZ3RoIC09IDE7XHJcblxyXG4gICAgICB0b2tlbnNPckNvbnRlbnRzTGVuZ3RoICs9IHRva2Vuc09yUmVtYWluaW5nQ29udGVudExlbmd0aDtcclxuXHJcbiAgICAgIGluZGV4ICs9IHRva2Vuc09yUmVtYWluaW5nQ29udGVudExlbmd0aDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGluZGV4ICs9IDE7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBwYXNzR2l2ZW5Ub2tlbjogcGFzc0dpdmVuVG9rZW4sXHJcbiAgcGFzc0dpdmVuQ2FsbGJhY2s6IHBhc3NHaXZlbkNhbGxiYWNrXHJcbn07XHJcblxyXG5mdW5jdGlvbiB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnRGcm9tV2l0aGluQ29udGVudChjb250ZW50LCBUb2tlbikge1xyXG4gIGxldCByZW1haW5pbmdDb250ZW50LFxyXG4gICAgICB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnQgPSBbXSwgICAgICAgXHJcbiAgICAgIHRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50ID0gVG9rZW4ucG9zaXRpb25XaXRoaW5Db250ZW50KGNvbnRlbnQpO1xyXG4gIFxyXG4gIHdoaWxlICh0b2tlblBvc2l0aW9uV2l0aGluQ29udGVudCAhPT0gLTEpIHtcclxuICAgIGlmICh0b2tlblBvc2l0aW9uV2l0aGluQ29udGVudCA+IDApIHtcclxuICAgICAgcmVtYWluaW5nQ29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKDAsIHRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50KTtcclxuXHJcbiAgICAgIHRva2Vuc09yUmVtYWluaW5nQ29udGVudC5wdXNoKHJlbWFpbmluZ0NvbnRlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRva2VuID0gVG9rZW4uZnJvbVdpdGhpbkNvbnRlbnQoY29udGVudCksXHJcbiAgICAgICAgICB0b2tlbkNvbnRlbnRMZW5ndGggPSB0b2tlbi5nZXRDb250ZW50TGVuZ3RoKCksXHJcbiAgICAgICAgICB0b2tlbk9mZnNldCA9IHRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50ICsgdG9rZW5Db250ZW50TGVuZ3RoO1xyXG4gICAgXHJcbiAgICB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnQucHVzaCh0b2tlbik7XHJcbiAgICBcclxuICAgIGNvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZyh0b2tlbk9mZnNldCk7XHJcblxyXG4gICAgdG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQgPSBUb2tlbi5wb3NpdGlvbldpdGhpbkNvbnRlbnQoY29udGVudCk7XHJcbiAgfVxyXG4gIFxyXG4gIGlmIChjb250ZW50ICE9PSAnJykge1xyXG4gICAgcmVtYWluaW5nQ29udGVudCA9IGNvbnRlbnQ7XHJcblxyXG4gICAgdG9rZW5zT3JSZW1haW5pbmdDb250ZW50LnB1c2gocmVtYWluaW5nQ29udGVudCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdG9rZW5zT3JSZW1haW5pbmdDb250ZW50O1xyXG59XHJcbiJdfQ==