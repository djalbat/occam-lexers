'use strict';

var necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    splice = arrayUtilities.splice;


function processByToken(tokensOrContents, Token) {
  processByCallback(tokensOrContents, function (tokenOrContent) {
    var tokensOrRemainingContents = void 0;

    var tokenOrContentContent = typeof tokenOrContent === 'string';

    if (tokenOrContentContent) {
      var content = tokenOrContent,
          ///
      tokenOrRemainingContent = tokenOrRemainingContentFromContentAndToken(content, Token);

      tokensOrRemainingContents = tokenOrRemainingContent; ///
    } else {
      var token = tokenOrContent; ///

      tokensOrRemainingContents = [token];
    }

    return tokensOrRemainingContents;
  });
}

function processByCallback(tokensOrContents, callback) {
  var index = 0,
      tokensOrContentsLength = tokensOrContents.length;

  while (index < tokensOrContentsLength) {
    var tokenOrContent = tokensOrContents[index],
        tokensOrRemainingContents = callback(tokenOrContent),
        tokensOrRemainingContentsLength = tokensOrRemainingContents.length,
        start = index,
        ///
    deleteCount = 1;

    splice(tokensOrContents, start, deleteCount, tokensOrRemainingContents);

    tokensOrContentsLength -= 1;

    tokensOrContentsLength += tokensOrRemainingContentsLength;

    index += tokensOrRemainingContentsLength;
  }
}

module.exports = {
  processByToken: processByToken,
  processByCallback: processByCallback
};

function tokenOrRemainingContentFromContentAndToken(content, Token) {
  var tokenOrRemainingContent = [],
      remainingContent = void 0,
      tokenPositionWithinContent = Token.positionWithinContent(content);

  while (tokenPositionWithinContent !== -1) {
    if (tokenPositionWithinContent > 0) {
      remainingContent = content.substring(0, tokenPositionWithinContent);

      tokenOrRemainingContent.push(remainingContent);
    }

    var token = Token.fromWithinContent(content),
        tokenContentLength = token.getContentLength(),
        tokenOffset = tokenPositionWithinContent + tokenContentLength;

    tokenOrRemainingContent.push(token);

    content = content.substring(tokenOffset);

    tokenPositionWithinContent = Token.positionWithinContent(content);
  }

  if (content !== '') {
    remainingContent = content;

    tokenOrRemainingContent.push(remainingContent);
  }

  return tokenOrRemainingContent;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9jb21tb24vdG9rZW5zLmpzIl0sIm5hbWVzIjpbIm5lY2Vzc2FyeSIsInJlcXVpcmUiLCJhcnJheVV0aWxpdGllcyIsInNwbGljZSIsInByb2Nlc3NCeVRva2VuIiwidG9rZW5zT3JDb250ZW50cyIsIlRva2VuIiwicHJvY2Vzc0J5Q2FsbGJhY2siLCJ0b2tlbk9yQ29udGVudCIsInRva2Vuc09yUmVtYWluaW5nQ29udGVudHMiLCJ0b2tlbk9yQ29udGVudENvbnRlbnQiLCJjb250ZW50IiwidG9rZW5PclJlbWFpbmluZ0NvbnRlbnQiLCJ0b2tlbk9yUmVtYWluaW5nQ29udGVudEZyb21Db250ZW50QW5kVG9rZW4iLCJ0b2tlbiIsImNhbGxiYWNrIiwiaW5kZXgiLCJ0b2tlbnNPckNvbnRlbnRzTGVuZ3RoIiwibGVuZ3RoIiwidG9rZW5zT3JSZW1haW5pbmdDb250ZW50c0xlbmd0aCIsInN0YXJ0IiwiZGVsZXRlQ291bnQiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVtYWluaW5nQ29udGVudCIsInRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50IiwicG9zaXRpb25XaXRoaW5Db250ZW50Iiwic3Vic3RyaW5nIiwicHVzaCIsImZyb21XaXRoaW5Db250ZW50IiwidG9rZW5Db250ZW50TGVuZ3RoIiwiZ2V0Q29udGVudExlbmd0aCIsInRva2VuT2Zmc2V0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRU0sSUFBRUMsY0FBRixHQUFxQkYsU0FBckIsQ0FBRUUsY0FBRjtBQUFBLElBQ0VDLE1BREYsR0FDYUQsY0FEYixDQUNFQyxNQURGOzs7QUFHTixTQUFTQyxjQUFULENBQXdCQyxnQkFBeEIsRUFBMENDLEtBQTFDLEVBQWlEO0FBQy9DQyxvQkFBa0JGLGdCQUFsQixFQUFvQyxVQUFTRyxjQUFULEVBQXlCO0FBQzNELFFBQUlDLGtDQUFKOztBQUVBLFFBQU1DLHdCQUF5QixPQUFPRixjQUFQLEtBQTBCLFFBQXpEOztBQUVBLFFBQUlFLHFCQUFKLEVBQTJCO0FBQ3pCLFVBQU1DLFVBQVVILGNBQWhCO0FBQUEsVUFBZ0M7QUFDMUJJLGdDQUEwQkMsMkNBQTJDRixPQUEzQyxFQUFvREwsS0FBcEQsQ0FEaEM7O0FBR0FHLGtDQUE0QkcsdUJBQTVCLENBSnlCLENBSTZCO0FBQ3ZELEtBTEQsTUFLTztBQUNMLFVBQU1FLFFBQVFOLGNBQWQsQ0FESyxDQUMwQjs7QUFFL0JDLGtDQUE0QixDQUFDSyxLQUFELENBQTVCO0FBQ0Q7O0FBRUQsV0FBT0wseUJBQVA7QUFDRCxHQWpCRDtBQWtCRDs7QUFFRCxTQUFTRixpQkFBVCxDQUEyQkYsZ0JBQTNCLEVBQTZDVSxRQUE3QyxFQUF1RDtBQUNyRCxNQUFJQyxRQUFRLENBQVo7QUFBQSxNQUNJQyx5QkFBeUJaLGlCQUFpQmEsTUFEOUM7O0FBR0EsU0FBT0YsUUFBUUMsc0JBQWYsRUFBdUM7QUFDckMsUUFBTVQsaUJBQWlCSCxpQkFBaUJXLEtBQWpCLENBQXZCO0FBQUEsUUFDTVAsNEJBQTRCTSxTQUFTUCxjQUFULENBRGxDO0FBQUEsUUFFTVcsa0NBQWtDViwwQkFBMEJTLE1BRmxFO0FBQUEsUUFHTUUsUUFBUUosS0FIZDtBQUFBLFFBR3NCO0FBQ2hCSyxrQkFBYyxDQUpwQjs7QUFNQWxCLFdBQU9FLGdCQUFQLEVBQXlCZSxLQUF6QixFQUFnQ0MsV0FBaEMsRUFBNkNaLHlCQUE3Qzs7QUFFQVEsOEJBQTBCLENBQTFCOztBQUVBQSw4QkFBMEJFLCtCQUExQjs7QUFFQUgsYUFBU0csK0JBQVQ7QUFDRDtBQUNGOztBQUVERyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZuQixrQkFBZ0JBLGNBREQ7QUFFZkcscUJBQW1CQTtBQUZKLENBQWpCOztBQUtBLFNBQVNNLDBDQUFULENBQW9ERixPQUFwRCxFQUE2REwsS0FBN0QsRUFBb0U7QUFDbEUsTUFBSU0sMEJBQTBCLEVBQTlCO0FBQUEsTUFDSVkseUJBREo7QUFBQSxNQUVJQyw2QkFBNkJuQixNQUFNb0IscUJBQU4sQ0FBNEJmLE9BQTVCLENBRmpDOztBQUlBLFNBQU9jLCtCQUErQixDQUFDLENBQXZDLEVBQTBDO0FBQ3hDLFFBQUlBLDZCQUE2QixDQUFqQyxFQUFvQztBQUNsQ0QseUJBQW1CYixRQUFRZ0IsU0FBUixDQUFrQixDQUFsQixFQUFxQkYsMEJBQXJCLENBQW5COztBQUVBYiw4QkFBd0JnQixJQUF4QixDQUE2QkosZ0JBQTdCO0FBQ0Q7O0FBRUQsUUFBTVYsUUFBUVIsTUFBTXVCLGlCQUFOLENBQXdCbEIsT0FBeEIsQ0FBZDtBQUFBLFFBQ01tQixxQkFBcUJoQixNQUFNaUIsZ0JBQU4sRUFEM0I7QUFBQSxRQUVNQyxjQUFjUCw2QkFBNkJLLGtCQUZqRDs7QUFJQWxCLDRCQUF3QmdCLElBQXhCLENBQTZCZCxLQUE3Qjs7QUFFQUgsY0FBVUEsUUFBUWdCLFNBQVIsQ0FBa0JLLFdBQWxCLENBQVY7O0FBRUFQLGlDQUE2Qm5CLE1BQU1vQixxQkFBTixDQUE0QmYsT0FBNUIsQ0FBN0I7QUFDRDs7QUFFRCxNQUFJQSxZQUFZLEVBQWhCLEVBQW9CO0FBQ2xCYSx1QkFBbUJiLE9BQW5COztBQUVBQyw0QkFBd0JnQixJQUF4QixDQUE2QkosZ0JBQTdCO0FBQ0Q7O0FBRUQsU0FBT1osdUJBQVA7QUFDRCIsImZpbGUiOiJ0b2tlbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5jb25zdCBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcclxuXHJcbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcclxuICAgICAgeyBzcGxpY2UgfSA9IGFycmF5VXRpbGl0aWVzO1xyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc0J5VG9rZW4odG9rZW5zT3JDb250ZW50cywgVG9rZW4pIHtcclxuICBwcm9jZXNzQnlDYWxsYmFjayh0b2tlbnNPckNvbnRlbnRzLCBmdW5jdGlvbih0b2tlbk9yQ29udGVudCkge1xyXG4gICAgbGV0IHRva2Vuc09yUmVtYWluaW5nQ29udGVudHM7XHJcblxyXG4gICAgY29uc3QgdG9rZW5PckNvbnRlbnRDb250ZW50ID0gKHR5cGVvZiB0b2tlbk9yQ29udGVudCA9PT0gJ3N0cmluZycpO1xyXG5cclxuICAgIGlmICh0b2tlbk9yQ29udGVudENvbnRlbnQpIHtcclxuICAgICAgY29uc3QgY29udGVudCA9IHRva2VuT3JDb250ZW50LCAvLy9cclxuICAgICAgICAgICAgdG9rZW5PclJlbWFpbmluZ0NvbnRlbnQgPSB0b2tlbk9yUmVtYWluaW5nQ29udGVudEZyb21Db250ZW50QW5kVG9rZW4oY29udGVudCwgVG9rZW4pO1xyXG5cclxuICAgICAgdG9rZW5zT3JSZW1haW5pbmdDb250ZW50cyA9IHRva2VuT3JSZW1haW5pbmdDb250ZW50OyAgLy8vXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCB0b2tlbiA9IHRva2VuT3JDb250ZW50OyAgLy8vXHJcblxyXG4gICAgICB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzID0gW3Rva2VuXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdG9rZW5zT3JSZW1haW5pbmdDb250ZW50cztcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc0J5Q2FsbGJhY2sodG9rZW5zT3JDb250ZW50cywgY2FsbGJhY2spIHtcclxuICBsZXQgaW5kZXggPSAwLFxyXG4gICAgICB0b2tlbnNPckNvbnRlbnRzTGVuZ3RoID0gdG9rZW5zT3JDb250ZW50cy5sZW5ndGg7XHJcblxyXG4gIHdoaWxlIChpbmRleCA8IHRva2Vuc09yQ29udGVudHNMZW5ndGgpIHtcclxuICAgIGNvbnN0IHRva2VuT3JDb250ZW50ID0gdG9rZW5zT3JDb250ZW50c1tpbmRleF0sXHJcbiAgICAgICAgICB0b2tlbnNPclJlbWFpbmluZ0NvbnRlbnRzID0gY2FsbGJhY2sodG9rZW5PckNvbnRlbnQpLFxyXG4gICAgICAgICAgdG9rZW5zT3JSZW1haW5pbmdDb250ZW50c0xlbmd0aCA9IHRva2Vuc09yUmVtYWluaW5nQ29udGVudHMubGVuZ3RoLFxyXG4gICAgICAgICAgc3RhcnQgPSBpbmRleCwgIC8vL1xyXG4gICAgICAgICAgZGVsZXRlQ291bnQgPSAxO1xyXG5cclxuICAgIHNwbGljZSh0b2tlbnNPckNvbnRlbnRzLCBzdGFydCwgZGVsZXRlQ291bnQsIHRva2Vuc09yUmVtYWluaW5nQ29udGVudHMpO1xyXG5cclxuICAgIHRva2Vuc09yQ29udGVudHNMZW5ndGggLT0gMTtcclxuXHJcbiAgICB0b2tlbnNPckNvbnRlbnRzTGVuZ3RoICs9IHRva2Vuc09yUmVtYWluaW5nQ29udGVudHNMZW5ndGg7XHJcblxyXG4gICAgaW5kZXggKz0gdG9rZW5zT3JSZW1haW5pbmdDb250ZW50c0xlbmd0aDtcclxuICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIHByb2Nlc3NCeVRva2VuOiBwcm9jZXNzQnlUb2tlbixcclxuICBwcm9jZXNzQnlDYWxsYmFjazogcHJvY2Vzc0J5Q2FsbGJhY2tcclxufTtcclxuXHJcbmZ1bmN0aW9uIHRva2VuT3JSZW1haW5pbmdDb250ZW50RnJvbUNvbnRlbnRBbmRUb2tlbihjb250ZW50LCBUb2tlbikge1xyXG4gIGxldCB0b2tlbk9yUmVtYWluaW5nQ29udGVudCA9IFtdLFxyXG4gICAgICByZW1haW5pbmdDb250ZW50LFxyXG4gICAgICB0b2tlblBvc2l0aW9uV2l0aGluQ29udGVudCA9IFRva2VuLnBvc2l0aW9uV2l0aGluQ29udGVudChjb250ZW50KTtcclxuICBcclxuICB3aGlsZSAodG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQgIT09IC0xKSB7XHJcbiAgICBpZiAodG9rZW5Qb3NpdGlvbldpdGhpbkNvbnRlbnQgPiAwKSB7XHJcbiAgICAgIHJlbWFpbmluZ0NvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZygwLCB0b2tlblBvc2l0aW9uV2l0aGluQ29udGVudCk7XHJcblxyXG4gICAgICB0b2tlbk9yUmVtYWluaW5nQ29udGVudC5wdXNoKHJlbWFpbmluZ0NvbnRlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRva2VuID0gVG9rZW4uZnJvbVdpdGhpbkNvbnRlbnQoY29udGVudCksXHJcbiAgICAgICAgICB0b2tlbkNvbnRlbnRMZW5ndGggPSB0b2tlbi5nZXRDb250ZW50TGVuZ3RoKCksXHJcbiAgICAgICAgICB0b2tlbk9mZnNldCA9IHRva2VuUG9zaXRpb25XaXRoaW5Db250ZW50ICsgdG9rZW5Db250ZW50TGVuZ3RoO1xyXG4gICAgXHJcbiAgICB0b2tlbk9yUmVtYWluaW5nQ29udGVudC5wdXNoKHRva2VuKTtcclxuICAgIFxyXG4gICAgY29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKHRva2VuT2Zmc2V0KTtcclxuXHJcbiAgICB0b2tlblBvc2l0aW9uV2l0aGluQ29udGVudCA9IFRva2VuLnBvc2l0aW9uV2l0aGluQ29udGVudChjb250ZW50KTtcclxuICB9XHJcbiAgXHJcbiAgaWYgKGNvbnRlbnQgIT09ICcnKSB7XHJcbiAgICByZW1haW5pbmdDb250ZW50ID0gY29udGVudDtcclxuXHJcbiAgICB0b2tlbk9yUmVtYWluaW5nQ29udGVudC5wdXNoKHJlbWFpbmluZ0NvbnRlbnQpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRva2VuT3JSZW1haW5pbmdDb250ZW50O1xyXG59XHJcbiJdfQ==