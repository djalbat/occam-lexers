"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exports.middleOfMultiLineCommentType = exports.startOfMultiLineCommentType = exports.endOfMultiLineCommentType = exports.singleLineCommentType = exports.brokenStringLiteralType = exports.regularExpressionType = exports.brokenCommentType = exports.stringLiteralType = exports.whitespaceType = exports.endOfLineType = exports.commentType = exports.nameType = exports.typeType = void 0;
var typeType = "type";
exports.typeType = typeType;
var nameType = "name";
exports.nameType = nameType;
var commentType = "comment";
exports.commentType = commentType;
var endOfLineType = "end-of-line";
exports.endOfLineType = endOfLineType;
var whitespaceType = "whitespace";
exports.whitespaceType = whitespaceType;
var stringLiteralType = "string-literal";
exports.stringLiteralType = stringLiteralType;
var brokenCommentType = "broken-c0mment"; ///
exports.brokenCommentType = brokenCommentType;
var regularExpressionType = "regular-expression";
exports.regularExpressionType = regularExpressionType;
var brokenStringLiteralType = "broken-string-literal";
exports.brokenStringLiteralType = brokenStringLiteralType;
var singleLineCommentType = "single-line ".concat(commentType);
exports.singleLineCommentType = singleLineCommentType;
var endOfMultiLineCommentType = "end-of-multi-line ".concat(commentType);
exports.endOfMultiLineCommentType = endOfMultiLineCommentType;
var startOfMultiLineCommentType = "start-of-multi-line ".concat(commentType);
exports.startOfMultiLineCommentType = startOfMultiLineCommentType;
var middleOfMultiLineCommentType = "middle-of-multi-line ".concat(commentType);
exports.middleOfMultiLineCommentType = middleOfMultiLineCommentType;
var _default = {
    typeType: typeType,
    nameType: nameType,
    commentType: commentType,
    endOfLineType: endOfLineType,
    whitespaceType: whitespaceType,
    stringLiteralType: stringLiteralType,
    brokenCommentType: brokenCommentType,
    regularExpressionType: regularExpressionType,
    brokenStringLiteralType: brokenStringLiteralType,
    singleLineCommentType: singleLineCommentType,
    endOfMultiLineCommentType: endOfMultiLineCommentType,
    startOfMultiLineCommentType: startOfMultiLineCommentType,
    middleOfMultiLineCommentType: middleOfMultiLineCommentType
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGNvbnN0IHR5cGVUeXBlID0gXCJ0eXBlXCI7XG5leHBvcnQgY29uc3QgbmFtZVR5cGUgPSBcIm5hbWVcIjtcbmV4cG9ydCBjb25zdCBjb21tZW50VHlwZSA9IFwiY29tbWVudFwiO1xuZXhwb3J0IGNvbnN0IGVuZE9mTGluZVR5cGUgPSBcImVuZC1vZi1saW5lXCI7XG5leHBvcnQgY29uc3Qgd2hpdGVzcGFjZVR5cGUgPSBcIndoaXRlc3BhY2VcIjtcbmV4cG9ydCBjb25zdCBzdHJpbmdMaXRlcmFsVHlwZSA9IFwic3RyaW5nLWxpdGVyYWxcIjtcbmV4cG9ydCBjb25zdCBicm9rZW5Db21tZW50VHlwZSA9IFwiYnJva2VuLWMwbW1lbnRcIjsgIC8vL1xuZXhwb3J0IGNvbnN0IHJlZ3VsYXJFeHByZXNzaW9uVHlwZSA9IFwicmVndWxhci1leHByZXNzaW9uXCI7XG5leHBvcnQgY29uc3QgYnJva2VuU3RyaW5nTGl0ZXJhbFR5cGUgPSBcImJyb2tlbi1zdHJpbmctbGl0ZXJhbFwiO1xuZXhwb3J0IGNvbnN0IHNpbmdsZUxpbmVDb21tZW50VHlwZSA9IGBzaW5nbGUtbGluZSAke2NvbW1lbnRUeXBlfWA7XG5leHBvcnQgY29uc3QgZW5kT2ZNdWx0aUxpbmVDb21tZW50VHlwZSA9IGBlbmQtb2YtbXVsdGktbGluZSAke2NvbW1lbnRUeXBlfWA7XG5leHBvcnQgY29uc3Qgc3RhcnRPZk11bHRpTGluZUNvbW1lbnRUeXBlID0gYHN0YXJ0LW9mLW11bHRpLWxpbmUgJHtjb21tZW50VHlwZX1gO1xuZXhwb3J0IGNvbnN0IG1pZGRsZU9mTXVsdGlMaW5lQ29tbWVudFR5cGUgPSBgbWlkZGxlLW9mLW11bHRpLWxpbmUgJHtjb21tZW50VHlwZX1gO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHR5cGVUeXBlLFxuICBuYW1lVHlwZSxcbiAgY29tbWVudFR5cGUsXG4gIGVuZE9mTGluZVR5cGUsXG4gIHdoaXRlc3BhY2VUeXBlLFxuICBzdHJpbmdMaXRlcmFsVHlwZSxcbiAgYnJva2VuQ29tbWVudFR5cGUsXG4gIHJlZ3VsYXJFeHByZXNzaW9uVHlwZSxcbiAgYnJva2VuU3RyaW5nTGl0ZXJhbFR5cGUsXG4gIHNpbmdsZUxpbmVDb21tZW50VHlwZSxcbiAgZW5kT2ZNdWx0aUxpbmVDb21tZW50VHlwZSxcbiAgc3RhcnRPZk11bHRpTGluZUNvbW1lbnRUeXBlLFxuICBtaWRkbGVPZk11bHRpTGluZUNvbW1lbnRUeXBlXG59O1xuIl0sIm5hbWVzIjpbInR5cGVUeXBlIiwibmFtZVR5cGUiLCJjb21tZW50VHlwZSIsImVuZE9mTGluZVR5cGUiLCJ3aGl0ZXNwYWNlVHlwZSIsInN0cmluZ0xpdGVyYWxUeXBlIiwiYnJva2VuQ29tbWVudFR5cGUiLCJyZWd1bGFyRXhwcmVzc2lvblR5cGUiLCJicm9rZW5TdHJpbmdMaXRlcmFsVHlwZSIsInNpbmdsZUxpbmVDb21tZW50VHlwZSIsImVuZE9mTXVsdGlMaW5lQ29tbWVudFR5cGUiLCJzdGFydE9mTXVsdGlMaW5lQ29tbWVudFR5cGUiLCJtaWRkbGVPZk11bHRpTGluZUNvbW1lbnRUeXBlIl0sIm1hcHBpbmdzIjoiQUFBQSxDQUFZOzs7OztBQUVMLEdBQUssQ0FBQ0EsUUFBUSxHQUFHLENBQU07UUFBakJBLFFBQVEsR0FBUkEsUUFBUTtBQUNkLEdBQUssQ0FBQ0MsUUFBUSxHQUFHLENBQU07UUFBakJBLFFBQVEsR0FBUkEsUUFBUTtBQUNkLEdBQUssQ0FBQ0MsV0FBVyxHQUFHLENBQVM7UUFBdkJBLFdBQVcsR0FBWEEsV0FBVztBQUNqQixHQUFLLENBQUNDLGFBQWEsR0FBRyxDQUFhO1FBQTdCQSxhQUFhLEdBQWJBLGFBQWE7QUFDbkIsR0FBSyxDQUFDQyxjQUFjLEdBQUcsQ0FBWTtRQUE3QkEsY0FBYyxHQUFkQSxjQUFjO0FBQ3BCLEdBQUssQ0FBQ0MsaUJBQWlCLEdBQUcsQ0FBZ0I7UUFBcENBLGlCQUFpQixHQUFqQkEsaUJBQWlCO0FBQ3ZCLEdBQUssQ0FBQ0MsaUJBQWlCLEdBQUcsQ0FBZ0IsZ0JBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1FBQTFDQSxpQkFBaUIsR0FBakJBLGlCQUFpQjtBQUN2QixHQUFLLENBQUNDLHFCQUFxQixHQUFHLENBQW9CO1FBQTVDQSxxQkFBcUIsR0FBckJBLHFCQUFxQjtBQUMzQixHQUFLLENBQUNDLHVCQUF1QixHQUFHLENBQXVCO1FBQWpEQSx1QkFBdUIsR0FBdkJBLHVCQUF1QjtBQUM3QixHQUFLLENBQUNDLHFCQUFxQixHQUFJLENBQVksY0FBYyxNQUFBLENBQVpQLFdBQVc7UUFBbERPLHFCQUFxQixHQUFyQkEscUJBQXFCO0FBQzNCLEdBQUssQ0FBQ0MseUJBQXlCLEdBQUksQ0FBa0Isb0JBQWMsTUFBQSxDQUFaUixXQUFXO1FBQTVEUSx5QkFBeUIsR0FBekJBLHlCQUF5QjtBQUMvQixHQUFLLENBQUNDLDJCQUEyQixHQUFJLENBQW9CLHNCQUFjLE1BQUEsQ0FBWlQsV0FBVztRQUFoRVMsMkJBQTJCLEdBQTNCQSwyQkFBMkI7QUFDakMsR0FBSyxDQUFDQyw0QkFBNEIsR0FBSSxDQUFxQix1QkFBYyxNQUFBLENBQVpWLFdBQVc7UUFBbEVVLDRCQUE0QixHQUE1QkEsNEJBQTRCO2VBRTFCLENBQUM7SUFDZFosUUFBUSxFQUFSQSxRQUFRO0lBQ1JDLFFBQVEsRUFBUkEsUUFBUTtJQUNSQyxXQUFXLEVBQVhBLFdBQVc7SUFDWEMsYUFBYSxFQUFiQSxhQUFhO0lBQ2JDLGNBQWMsRUFBZEEsY0FBYztJQUNkQyxpQkFBaUIsRUFBakJBLGlCQUFpQjtJQUNqQkMsaUJBQWlCLEVBQWpCQSxpQkFBaUI7SUFDakJDLHFCQUFxQixFQUFyQkEscUJBQXFCO0lBQ3JCQyx1QkFBdUIsRUFBdkJBLHVCQUF1QjtJQUN2QkMscUJBQXFCLEVBQXJCQSxxQkFBcUI7SUFDckJDLHlCQUF5QixFQUF6QkEseUJBQXlCO0lBQ3pCQywyQkFBMkIsRUFBM0JBLDJCQUEyQjtJQUMzQkMsNEJBQTRCLEVBQTVCQSw0QkFBNEI7QUFDOUIsQ0FBQyJ9