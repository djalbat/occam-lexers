"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exports.middleOfMultiLineCommentType = exports.startOfMultiLineCommentType = exports.endOfMultiLineCommentType = exports.regularExpressionType = exports.singleLineCommentType = exports.endOfLineCommentType = exports.stringLiteralType = exports.whitespaceType = exports.endOfLineType = exports.commentType = exports.nameType = exports.typeType = void 0;
var typeType = "type";
exports.typeType = typeType;
var nameType = "name";
exports.nameType = nameType;
var commentType = "comment";
exports.commentType = commentType;
var endOfLineType = "end-of-line";
exports.endOfLineType = endOfLineType;
var whitespaceType = "whitespace";
exports.whitespaceType = whitespaceType;
var stringLiteralType = "string-literal";
exports.stringLiteralType = stringLiteralType;
var endOfLineCommentType = "".concat(endOfLineType, " ").concat(commentType);
exports.endOfLineCommentType = endOfLineCommentType;
var singleLineCommentType = "single-line ".concat(commentType);
exports.singleLineCommentType = singleLineCommentType;
var regularExpressionType = "regular-expression";
exports.regularExpressionType = regularExpressionType;
var endOfMultiLineCommentType = "end-of-multi-line ".concat(commentType);
exports.endOfMultiLineCommentType = endOfMultiLineCommentType;
var startOfMultiLineCommentType = "start-of-multi-line ".concat(commentType);
exports.startOfMultiLineCommentType = startOfMultiLineCommentType;
var middleOfMultiLineCommentType = "middle-of-multi-line ".concat(commentType);
exports.middleOfMultiLineCommentType = middleOfMultiLineCommentType;
var _default = {
    typeType: typeType,
    nameType: nameType,
    commentType: commentType,
    endOfLineType: endOfLineType,
    whitespaceType: whitespaceType,
    stringLiteralType: stringLiteralType,
    endOfLineCommentType: endOfLineCommentType,
    singleLineCommentType: singleLineCommentType,
    regularExpressionType: regularExpressionType,
    endOfMultiLineCommentType: endOfMultiLineCommentType,
    startOfMultiLineCommentType: startOfMultiLineCommentType,
    middleOfMultiLineCommentType: middleOfMultiLineCommentType
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGNvbnN0IHR5cGVUeXBlID0gXCJ0eXBlXCI7XG5leHBvcnQgY29uc3QgbmFtZVR5cGUgPSBcIm5hbWVcIjtcbmV4cG9ydCBjb25zdCBjb21tZW50VHlwZSA9IFwiY29tbWVudFwiO1xuZXhwb3J0IGNvbnN0IGVuZE9mTGluZVR5cGUgPSBcImVuZC1vZi1saW5lXCI7XG5leHBvcnQgY29uc3Qgd2hpdGVzcGFjZVR5cGUgPSBcIndoaXRlc3BhY2VcIjtcbmV4cG9ydCBjb25zdCBzdHJpbmdMaXRlcmFsVHlwZSA9IFwic3RyaW5nLWxpdGVyYWxcIjtcbmV4cG9ydCBjb25zdCBlbmRPZkxpbmVDb21tZW50VHlwZSA9IGAke2VuZE9mTGluZVR5cGV9ICR7Y29tbWVudFR5cGV9YDtcbmV4cG9ydCBjb25zdCBzaW5nbGVMaW5lQ29tbWVudFR5cGUgPSBgc2luZ2xlLWxpbmUgJHtjb21tZW50VHlwZX1gO1xuZXhwb3J0IGNvbnN0IHJlZ3VsYXJFeHByZXNzaW9uVHlwZSA9IFwicmVndWxhci1leHByZXNzaW9uXCI7XG5leHBvcnQgY29uc3QgZW5kT2ZNdWx0aUxpbmVDb21tZW50VHlwZSA9IGBlbmQtb2YtbXVsdGktbGluZSAke2NvbW1lbnRUeXBlfWA7XG5leHBvcnQgY29uc3Qgc3RhcnRPZk11bHRpTGluZUNvbW1lbnRUeXBlID0gYHN0YXJ0LW9mLW11bHRpLWxpbmUgJHtjb21tZW50VHlwZX1gO1xuZXhwb3J0IGNvbnN0IG1pZGRsZU9mTXVsdGlMaW5lQ29tbWVudFR5cGUgPSBgbWlkZGxlLW9mLW11bHRpLWxpbmUgJHtjb21tZW50VHlwZX1gO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHR5cGVUeXBlLFxuICBuYW1lVHlwZSxcbiAgY29tbWVudFR5cGUsXG4gIGVuZE9mTGluZVR5cGUsXG4gIHdoaXRlc3BhY2VUeXBlLFxuICBzdHJpbmdMaXRlcmFsVHlwZSxcbiAgZW5kT2ZMaW5lQ29tbWVudFR5cGUsXG4gIHNpbmdsZUxpbmVDb21tZW50VHlwZSxcbiAgcmVndWxhckV4cHJlc3Npb25UeXBlLFxuICBlbmRPZk11bHRpTGluZUNvbW1lbnRUeXBlLFxuICBzdGFydE9mTXVsdGlMaW5lQ29tbWVudFR5cGUsXG4gIG1pZGRsZU9mTXVsdGlMaW5lQ29tbWVudFR5cGVcbn07XG4iXSwibmFtZXMiOlsidHlwZVR5cGUiLCJuYW1lVHlwZSIsImNvbW1lbnRUeXBlIiwiZW5kT2ZMaW5lVHlwZSIsIndoaXRlc3BhY2VUeXBlIiwic3RyaW5nTGl0ZXJhbFR5cGUiLCJlbmRPZkxpbmVDb21tZW50VHlwZSIsInNpbmdsZUxpbmVDb21tZW50VHlwZSIsInJlZ3VsYXJFeHByZXNzaW9uVHlwZSIsImVuZE9mTXVsdGlMaW5lQ29tbWVudFR5cGUiLCJzdGFydE9mTXVsdGlMaW5lQ29tbWVudFR5cGUiLCJtaWRkbGVPZk11bHRpTGluZUNvbW1lbnRUeXBlIl0sIm1hcHBpbmdzIjoiQUFBQSxDQUFZLFdBQUEsQ0FBQzs7O0U7aVg7QUFFTixHQUFLLENBQUNBLFFBQVEsR0FBRyxDQUFNO1FBQWpCQSxRQUFRLEdBQVJBLFFBQVEsQTtBQUNkLEdBQUssQ0FBQ0MsUUFBUSxHQUFHLENBQU07UUFBakJBLFFBQVEsR0FBUkEsUUFBUSxBO0FBQ2QsR0FBSyxDQUFDQyxXQUFXLEdBQUcsQ0FBUztRQUF2QkEsV0FBVyxHQUFYQSxXQUFXLEE7QUFDakIsR0FBSyxDQUFDQyxhQUFhLEdBQUcsQ0FBYTtRQUE3QkEsYUFBYSxHQUFiQSxhQUFhLEE7QUFDbkIsR0FBSyxDQUFDQyxjQUFjLEdBQUcsQ0FBWTtRQUE3QkEsY0FBYyxHQUFkQSxjQUFjLEE7QUFDcEIsR0FBSyxDQUFDQyxpQkFBaUIsR0FBRyxDQUFnQjtRQUFwQ0EsaUJBQWlCLEdBQWpCQSxpQkFBaUIsQTtBQUN2QixHQUFLLENBQUNDLG9CQUFvQixHQUFJLENBQUEsRUFBbUJKLE1BQVcsQ0FBNUJDLGFBQWEsRUFBQyxDQUFDLElBQWMsTUFBQSxDQUFaRCxXQUFXO1FBQXRESSxvQkFBb0IsR0FBcEJBLG9CQUFvQixBO0FBQzFCLEdBQUssQ0FBQ0MscUJBQXFCLEdBQUksQ0FBWSxjQUFjLE1BQUEsQ0FBWkwsV0FBVztRQUFsREsscUJBQXFCLEdBQXJCQSxxQkFBcUIsQTtBQUMzQixHQUFLLENBQUNDLHFCQUFxQixHQUFHLENBQW9CO1FBQTVDQSxxQkFBcUIsR0FBckJBLHFCQUFxQixBO0FBQzNCLEdBQUssQ0FBQ0MseUJBQXlCLEdBQUksQ0FBa0Isb0JBQWMsTUFBQSxDQUFaUCxXQUFXO1FBQTVETyx5QkFBeUIsR0FBekJBLHlCQUF5QixBO0FBQy9CLEdBQUssQ0FBQ0MsMkJBQTJCLEdBQUksQ0FBb0Isc0JBQWMsTUFBQSxDQUFaUixXQUFXO1FBQWhFUSwyQkFBMkIsR0FBM0JBLDJCQUEyQixBO0FBQ2pDLEdBQUssQ0FBQ0MsNEJBQTRCLEdBQUksQ0FBcUIsdUJBQWMsTUFBQSxDQUFaVCxXQUFXO1FBQWxFUyw0QkFBNEIsR0FBNUJBLDRCQUE0QixBO2VBRTFCLENBQUM7SUFDZFgsUUFBUSxFQUFSQSxRQUFRO0lBQ1JDLFFBQVEsRUFBUkEsUUFBUTtJQUNSQyxXQUFXLEVBQVhBLFdBQVc7SUFDWEMsYUFBYSxFQUFiQSxhQUFhO0lBQ2JDLGNBQWMsRUFBZEEsY0FBYztJQUNkQyxpQkFBaUIsRUFBakJBLGlCQUFpQjtJQUNqQkMsb0JBQW9CLEVBQXBCQSxvQkFBb0I7SUFDcEJDLHFCQUFxQixFQUFyQkEscUJBQXFCO0lBQ3JCQyxxQkFBcUIsRUFBckJBLHFCQUFxQjtJQUNyQkMseUJBQXlCLEVBQXpCQSx5QkFBeUI7SUFDekJDLDJCQUEyQixFQUEzQkEsMkJBQTJCO0lBQzNCQyw0QkFBNEIsRUFBNUJBLDRCQUE0QjtBQUM5QixDQUFDOzBCIn0=