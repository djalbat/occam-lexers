'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var util = require('../../util'),
    ParseableToken = require('../common/token/parseable'),
    WhitespaceToken = require('../common/token/whitespace'),
    SingleLineCommentToken = require('./token/comment/singleLine'),
    EndOfMultiLineCommentToken = require('./token/comment/endOfMultiLine'),
    StartOfMultiLineCommentToken = require('./token/comment/startOfMultiLine'),
    MiddleOfMultiLineCommentToken = require('./token/comment/middleOfMultiLine');

var NonSignificantTokens = function () {
  function NonSignificantTokens() {
    _classCallCheck(this, NonSignificantTokens);
  }

  _createClass(NonSignificantTokens, null, [{
    key: 'hasEndOfMultiLineCommentToken',
    value: function hasEndOfMultiLineCommentToken(tokens) {
      return tokens.some(function (token) {
        return token instanceof EndOfMultiLineCommentToken;
      });
    }
  }, {
    key: 'hasStartOfMultiLineCommentToken',
    value: function hasStartOfMultiLineCommentToken(tokens) {
      return tokens.some(function (token) {
        return token instanceof StartOfMultiLineCommentToken;
      });
    }
  }, {
    key: 'pass',
    value: function pass(context) {
      var content = context.getContent(),
          inMultiLineComment = context.isInMultiLineComment();

      while (content !== '') {
        if (inMultiLineComment) {
          var endOfMultiLineCommentTokenPosition = endOfMultiLineCommentToken(context);

          if (endOfMultiLineCommentTokenPosition !== 0) {
            middleOfMultiLineCommentToken(context, endOfMultiLineCommentTokenPosition);
          }
        } else {
          var startOfMultiLineCommentTokenPosition = startOfMultiLineCommentToken(context);

          if (startOfMultiLineCommentTokenPosition !== 0) {
            var singleLineCommentTokenPosition = singleLineCommentToken(context);

            if (singleLineCommentTokenPosition !== 0) {
              var whitespaceTokenPosition = whitespaceToken(context);

              if (whitespaceTokenPosition !== 0) {
                parseableToken(context, startOfMultiLineCommentTokenPosition, singleLineCommentTokenPosition, whitespaceTokenPosition);
              }
            }
          }
        }

        content = context.getContent();
        inMultiLineComment = context.isInMultiLineComment();
      }
    }
  }]);

  return NonSignificantTokens;
}();

module.exports = NonSignificantTokens;

function endOfMultiLineCommentToken(context) {
  var content = context.getContent(),
      endOfMultiLineCommentTokenPosition = EndOfMultiLineCommentToken.position(content);

  if (endOfMultiLineCommentTokenPosition === 0) {
    var endOfMultiLineCommentToken = EndOfMultiLineCommentToken.fromContent(content),
        endOfMultiLineCommentTokenLength = endOfMultiLineCommentToken.getLength();

    context.pushToken(endOfMultiLineCommentToken);
    context.chopContent(endOfMultiLineCommentTokenLength);
    context.setInMultiLineComment(false);
  }

  return endOfMultiLineCommentTokenPosition;
}

function middleOfMultiLineCommentToken(context, endOfMultiLineCommentTokenPosition) {
  var content = context.getContent(),
      commentedContent = endOfMultiLineCommentTokenPosition === -1 ? content : content.substring(0, endOfMultiLineCommentTokenPosition);

  var middleOfMultiLineCommentToken = MiddleOfMultiLineCommentToken.fromContent(commentedContent),
      middleOfMultiLineCommentTokenLength = middleOfMultiLineCommentToken.getLength();

  context.pushToken(middleOfMultiLineCommentToken);
  context.chopContent(middleOfMultiLineCommentTokenLength);
}

function startOfMultiLineCommentToken(context) {
  var content = context.getContent(),
      startOfMultiLineCommentTokenPosition = StartOfMultiLineCommentToken.position(content);

  if (startOfMultiLineCommentTokenPosition === 0) {
    var startOfMultiLineCommentToken = StartOfMultiLineCommentToken.fromContent(content),
        startOfMultiLineCommentTokenLength = startOfMultiLineCommentToken.getLength();

    context.pushToken(startOfMultiLineCommentToken);
    context.chopContent(startOfMultiLineCommentTokenLength);
    context.setInMultiLineComment(true);
  }
}

function singleLineCommentToken(context) {
  var content = context.getContent(),
      singleLineCommentTokenPosition = SingleLineCommentToken.position(content);

  if (singleLineCommentTokenPosition === 0) {
    var singleLineCommentToken = SingleLineCommentToken.fromContent(content);

    context.pushToken(singleLineCommentToken);
    context.setContent('');
  }

  return singleLineCommentTokenPosition;
}

function whitespaceToken(context) {
  var content = context.getContent(),
      whitespaceTokenPosition = WhitespaceToken.position(content);

  if (whitespaceTokenPosition === 0) {
    var whitespaceToken = WhitespaceToken.fromContent(content),
        whitespaceTokenLength = whitespaceToken.getLength();

    context.pushToken(whitespaceToken);
    context.chopContent(whitespaceTokenLength);
  }

  return whitespaceTokenPosition;
}

function parseableToken(context, startOfMultiLineCommentTokenPosition, singleLineCommentTokenPosition, whitespaceTokenPosition) {
  var contentLength = context.getContentLength(),
      parseableContentLength = util.minBarMinusOne(startOfMultiLineCommentTokenPosition, singleLineCommentTokenPosition, whitespaceTokenPosition, contentLength),
      parseableContent = context.getContentSubstring(parseableContentLength),
      content = parseableContent,
      ///
  parseableContentToken = new ParseableToken(content);

  context.pushToken(parseableContentToken);
  context.chopContent(parseableContentLength);
}
//# sourceMappingURL=data:application/json;base64,