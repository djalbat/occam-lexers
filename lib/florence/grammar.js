'use strict';

var basic_latin = '\\u{21}-\\u{7E}',
    latin1_supplement = '\\u{A1}-\\u{FF}',
    mathematical_operators = '\\u{2200}-\\u{22FF}',
    supplemental_mathematical_operators = '\\u{2A00}-\\u{2AFF}',
    miscellaneous_technical = '\\u{2300}-\\u{23ff}',
    mathematical_alphanumeric_symbols = '\\u{1D400}-\\u{1D7FF}',
    unicode_character = '\n' + basic_latin + '\n' + latin1_supplement + '\n' + mathematical_operators + '\n' + supplemental_mathematical_operators + '\n' + miscellaneous_technical + '\n' + mathematical_alphanumeric_symbols + '\n',
    unicode_characters = '[' + unicode_character + ']+',
    unassigned = unicode_characters; ///

var grammar = [{ special: /,|;|\{|\}|=|:|\(|\)|\.\.\.|\.\./ }, { include: /^include$/ }, { keyword: /^(?:Rule|Axiom|Theorem|Lemma|Premises|Premise|Conclusion|Proof|Therefore|Suppose|Then|Hence|Variables|Variable|Constructors|Constructor|Type|Object|Definition|from|by|let|is|not|in|free|defined|undefined)$/ }, { unassigned: new RegExp('^' + unassigned + '$', 'u') }];

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9ncmFtbWFyLmpzIl0sIm5hbWVzIjpbImJhc2ljX2xhdGluIiwibGF0aW4xX3N1cHBsZW1lbnQiLCJtYXRoZW1hdGljYWxfb3BlcmF0b3JzIiwic3VwcGxlbWVudGFsX21hdGhlbWF0aWNhbF9vcGVyYXRvcnMiLCJtaXNjZWxsYW5lb3VzX3RlY2huaWNhbCIsIm1hdGhlbWF0aWNhbF9hbHBoYW51bWVyaWNfc3ltYm9scyIsInVuaWNvZGVfY2hhcmFjdGVyIiwidW5pY29kZV9jaGFyYWN0ZXJzIiwidW5hc3NpZ25lZCIsImdyYW1tYXIiLCJzcGVjaWFsIiwiaW5jbHVkZSIsImtleXdvcmQiLCJSZWdFeHAiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSwrQkFBSjtBQUFBLElBQ0lDLHFDQURKO0FBQUEsSUFFSUMsOENBRko7QUFBQSxJQUdJQywyREFISjtBQUFBLElBSUlDLCtDQUpKO0FBQUEsSUFLSUMsMkRBTEo7QUFBQSxJQU1JQywyQkFHRk4sV0FIRSxVQUlGQyxpQkFKRSxVQUtGQyxzQkFMRSxVQU1GQyxtQ0FORSxVQU9GQyx1QkFQRSxVQVFGQyxpQ0FSRSxPQU5KO0FBQUEsSUFpQklFLDJCQUF5QkQsaUJBQXpCLE9BakJKO0FBQUEsSUFrQklFLGFBQWFELGtCQWxCakIsQyxDQWtCc0M7O0FBRXRDLElBQUlFLFVBQVUsQ0FFWixFQUFFQyxTQUFhLGlDQUFmLEVBRlksRUFJWixFQUFFQyxTQUFhLFdBQWYsRUFKWSxFQU1aLEVBQUVDLFNBQWEsK01BQWYsRUFOWSxFQVFaLEVBQUVKLFlBQWEsSUFBSUssTUFBSixPQUFlTCxVQUFmLFFBQThCLEdBQTlCLENBQWYsRUFSWSxDQUFkOztBQVlBTSxPQUFPQyxPQUFQLEdBQWlCTixPQUFqQiIsImZpbGUiOiJncmFtbWFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGJhc2ljX2xhdGluID0gYFxcXFx1ezIxfS1cXFxcdXs3RX1gLFxyXG4gICAgbGF0aW4xX3N1cHBsZW1lbnQgPSBgXFxcXHV7QTF9LVxcXFx1e0ZGfWAsXHJcbiAgICBtYXRoZW1hdGljYWxfb3BlcmF0b3JzID0gYFxcXFx1ezIyMDB9LVxcXFx1ezIyRkZ9YCxcclxuICAgIHN1cHBsZW1lbnRhbF9tYXRoZW1hdGljYWxfb3BlcmF0b3JzID0gYFxcXFx1ezJBMDB9LVxcXFx1ezJBRkZ9YCxcclxuICAgIG1pc2NlbGxhbmVvdXNfdGVjaG5pY2FsID0gYFxcXFx1ezIzMDB9LVxcXFx1ezIzZmZ9YCxcclxuICAgIG1hdGhlbWF0aWNhbF9hbHBoYW51bWVyaWNfc3ltYm9scyA9IGBcXFxcdXsxRDQwMH0tXFxcXHV7MUQ3RkZ9YCxcclxuICAgIHVuaWNvZGVfY2hhcmFjdGVyID1cclxuXHJcbmBcclxuJHtiYXNpY19sYXRpbn1cclxuJHtsYXRpbjFfc3VwcGxlbWVudH1cclxuJHttYXRoZW1hdGljYWxfb3BlcmF0b3JzfVxyXG4ke3N1cHBsZW1lbnRhbF9tYXRoZW1hdGljYWxfb3BlcmF0b3JzfVxyXG4ke21pc2NlbGxhbmVvdXNfdGVjaG5pY2FsfVxyXG4ke21hdGhlbWF0aWNhbF9hbHBoYW51bWVyaWNfc3ltYm9sc31cclxuYCxcclxuXHJcbiAgICB1bmljb2RlX2NoYXJhY3RlcnMgPSBgWyR7dW5pY29kZV9jaGFyYWN0ZXJ9XStgLFxyXG4gICAgdW5hc3NpZ25lZCA9IHVuaWNvZGVfY2hhcmFjdGVyczsgIC8vL1xyXG5cclxudmFyIGdyYW1tYXIgPSBbXHJcblxyXG4gIHsgc3BlY2lhbCAgICA6IC8sfDt8XFx7fFxcfXw9fDp8XFwofFxcKXxcXC5cXC5cXC58XFwuXFwuLyB9LFxyXG5cclxuICB7IGluY2x1ZGUgICAgOiAvXmluY2x1ZGUkLyB9LFxyXG5cclxuICB7IGtleXdvcmQgICAgOiAvXig/OlJ1bGV8QXhpb218VGhlb3JlbXxMZW1tYXxQcmVtaXNlc3xQcmVtaXNlfENvbmNsdXNpb258UHJvb2Z8VGhlcmVmb3JlfFN1cHBvc2V8VGhlbnxIZW5jZXxWYXJpYWJsZXN8VmFyaWFibGV8Q29uc3RydWN0b3JzfENvbnN0cnVjdG9yfFR5cGV8T2JqZWN0fERlZmluaXRpb258ZnJvbXxieXxsZXR8aXN8bm90fGlufGZyZWV8ZGVmaW5lZHx1bmRlZmluZWQpJC8gfSxcclxuXHJcbiAgeyB1bmFzc2lnbmVkIDogbmV3IFJlZ0V4cChgXiR7dW5hc3NpZ25lZH0kYCwgJ3UnKSB9XHJcbiAgICBcclxuXTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZ3JhbW1hcjtcclxuIl19