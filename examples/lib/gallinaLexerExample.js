'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easyUI = require('easyui'),
    easyUILayout = require('easyui-layout'),
    TextArea = easyUI.TextArea,
    SizeableElement = easyUILayout.SizeableElement,
    VerticalSplitter = easyUILayout.VerticalSplitter;

var leftColumnSelector = '#leftColumn',
    contentTextAreaSelector = 'textArea#content',
    tokensTextAreaSelector = 'textArea#tokens',
    contentTextArea = new TextArea(contentTextAreaSelector),
    tokensTextArea = new TextArea(tokensTextAreaSelector),
    leftColumn = new SizeableElement(leftColumnSelector),
    TO_THE_RIGHT_OF = VerticalSplitter.situated.TO_THE_RIGHT_OF;

new VerticalSplitter('.left.vertical.splitter', TO_THE_RIGHT_OF, leftColumn);

var GallinaLexer = require('../../es6/gallinaLexer');

var GallinaLexerExample = function () {
  function GallinaLexerExample() {
    _classCallCheck(this, GallinaLexerExample);
  }

  _createClass(GallinaLexerExample, null, [{
    key: 'run',
    value: function run() {
      contentTextArea.onChange(function () {
        updateTokens();
      });
    }
  }]);

  return GallinaLexerExample;
}();

function updateTokens() {
  var contentTextAreaValue = contentTextArea.getValue(),
      content = contentTextAreaValue,
      ///
  lines = GallinaLexer.linesFromContent(content),
      tokens = lines.reduce(function (tokens, line, index) {
    var lineTokens = line.getTokens();

    tokens = tokens.concat(lineTokens);

    return tokens;
  }, []),
      tokensHTML = tokens.reduce(function (tokensHTML, token) {
    var tokenHTML = token.getHTML();

    tokensHTML += tokenHTML;

    return tokensHTML;
  }, ''),
      tokensTextAreaHTML = tokensHTML; ///

  tokensTextArea.html(tokensTextAreaHTML);
}

module.exports = GallinaLexerExample;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9nYWxsaW5hTGV4ZXJFeGFtcGxlLmpzIl0sIm5hbWVzIjpbImVhc3lVSSIsInJlcXVpcmUiLCJlYXN5VUlMYXlvdXQiLCJUZXh0QXJlYSIsIlNpemVhYmxlRWxlbWVudCIsIlZlcnRpY2FsU3BsaXR0ZXIiLCJsZWZ0Q29sdW1uU2VsZWN0b3IiLCJjb250ZW50VGV4dEFyZWFTZWxlY3RvciIsInRva2Vuc1RleHRBcmVhU2VsZWN0b3IiLCJjb250ZW50VGV4dEFyZWEiLCJ0b2tlbnNUZXh0QXJlYSIsImxlZnRDb2x1bW4iLCJUT19USEVfUklHSFRfT0YiLCJzaXR1YXRlZCIsIkdhbGxpbmFMZXhlciIsIkdhbGxpbmFMZXhlckV4YW1wbGUiLCJvbkNoYW5nZSIsInVwZGF0ZVRva2VucyIsImNvbnRlbnRUZXh0QXJlYVZhbHVlIiwiZ2V0VmFsdWUiLCJjb250ZW50IiwibGluZXMiLCJsaW5lc0Zyb21Db250ZW50IiwidG9rZW5zIiwicmVkdWNlIiwibGluZSIsImluZGV4IiwibGluZVRva2VucyIsImdldFRva2VucyIsImNvbmNhdCIsInRva2Vuc0hUTUwiLCJ0b2tlbiIsInRva2VuSFRNTCIsImdldEhUTUwiLCJ0b2tlbnNUZXh0QXJlYUhUTUwiLCJodG1sIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQUlBLFNBQVNDLFFBQVEsUUFBUixDQUFiO0FBQUEsSUFDSUMsZUFBZUQsUUFBUSxlQUFSLENBRG5CO0FBQUEsSUFFSUUsV0FBV0gsT0FBT0csUUFGdEI7QUFBQSxJQUdJQyxrQkFBa0JGLGFBQWFFLGVBSG5DO0FBQUEsSUFJSUMsbUJBQW1CSCxhQUFhRyxnQkFKcEM7O0FBTUEsSUFBSUMscUJBQXFCLGFBQXpCO0FBQUEsSUFDSUMsMEJBQTBCLGtCQUQ5QjtBQUFBLElBRUlDLHlCQUF5QixpQkFGN0I7QUFBQSxJQUdJQyxrQkFBa0IsSUFBSU4sUUFBSixDQUFhSSx1QkFBYixDQUh0QjtBQUFBLElBSUlHLGlCQUFpQixJQUFJUCxRQUFKLENBQWFLLHNCQUFiLENBSnJCO0FBQUEsSUFLSUcsYUFBYSxJQUFJUCxlQUFKLENBQW9CRSxrQkFBcEIsQ0FMakI7QUFBQSxJQU1JTSxrQkFBa0JQLGlCQUFpQlEsUUFBakIsQ0FBMEJELGVBTmhEOztBQVFBLElBQUlQLGdCQUFKLENBQXFCLHlCQUFyQixFQUFnRE8sZUFBaEQsRUFBaUVELFVBQWpFOztBQUVBLElBQUlHLGVBQWViLFFBQVEsd0JBQVIsQ0FBbkI7O0lBRU1jLG1COzs7Ozs7OzBCQUNTO0FBQ1hOLHNCQUFnQk8sUUFBaEIsQ0FBeUIsWUFBVztBQUNsQ0M7QUFDRCxPQUZEO0FBR0Y7Ozs7OztBQUdGLFNBQVNBLFlBQVQsR0FBd0I7QUFDdEIsTUFBSUMsdUJBQXVCVCxnQkFBZ0JVLFFBQWhCLEVBQTNCO0FBQUEsTUFDSUMsVUFBVUYsb0JBRGQ7QUFBQSxNQUNxQztBQUNqQ0csVUFBUVAsYUFBYVEsZ0JBQWIsQ0FBOEJGLE9BQTlCLENBRlo7QUFBQSxNQUdJRyxTQUFTRixNQUFNRyxNQUFOLENBQWEsVUFBU0QsTUFBVCxFQUFpQkUsSUFBakIsRUFBdUJDLEtBQXZCLEVBQThCO0FBQ2xELFFBQUlDLGFBQWFGLEtBQUtHLFNBQUwsRUFBakI7O0FBRUFMLGFBQVNBLE9BQU9NLE1BQVAsQ0FBY0YsVUFBZCxDQUFUOztBQUVBLFdBQU9KLE1BQVA7QUFDRCxHQU5RLEVBTU4sRUFOTSxDQUhiO0FBQUEsTUFVSU8sYUFBYVAsT0FBT0MsTUFBUCxDQUFjLFVBQVNNLFVBQVQsRUFBcUJDLEtBQXJCLEVBQTRCO0FBQ3JELFFBQUlDLFlBQVlELE1BQU1FLE9BQU4sRUFBaEI7O0FBRUFILGtCQUFjRSxTQUFkOztBQUVBLFdBQU9GLFVBQVA7QUFDRCxHQU5ZLEVBTVYsRUFOVSxDQVZqQjtBQUFBLE1BaUJJSSxxQkFBcUJKLFVBakJ6QixDQURzQixDQWtCZ0I7O0FBRXRDcEIsaUJBQWV5QixJQUFmLENBQW9CRCxrQkFBcEI7QUFDRDs7QUFFREUsT0FBT0MsT0FBUCxHQUFpQnRCLG1CQUFqQiIsImZpbGUiOiJnYWxsaW5hTGV4ZXJFeGFtcGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWFzeVVJID0gcmVxdWlyZSgnZWFzeXVpJyksXG4gICAgZWFzeVVJTGF5b3V0ID0gcmVxdWlyZSgnZWFzeXVpLWxheW91dCcpLFxuICAgIFRleHRBcmVhID0gZWFzeVVJLlRleHRBcmVhLFxuICAgIFNpemVhYmxlRWxlbWVudCA9IGVhc3lVSUxheW91dC5TaXplYWJsZUVsZW1lbnQsXG4gICAgVmVydGljYWxTcGxpdHRlciA9IGVhc3lVSUxheW91dC5WZXJ0aWNhbFNwbGl0dGVyO1xuXG52YXIgbGVmdENvbHVtblNlbGVjdG9yID0gJyNsZWZ0Q29sdW1uJyxcbiAgICBjb250ZW50VGV4dEFyZWFTZWxlY3RvciA9ICd0ZXh0QXJlYSNjb250ZW50JyxcbiAgICB0b2tlbnNUZXh0QXJlYVNlbGVjdG9yID0gJ3RleHRBcmVhI3Rva2VucycsXG4gICAgY29udGVudFRleHRBcmVhID0gbmV3IFRleHRBcmVhKGNvbnRlbnRUZXh0QXJlYVNlbGVjdG9yKSxcbiAgICB0b2tlbnNUZXh0QXJlYSA9IG5ldyBUZXh0QXJlYSh0b2tlbnNUZXh0QXJlYVNlbGVjdG9yKSxcbiAgICBsZWZ0Q29sdW1uID0gbmV3IFNpemVhYmxlRWxlbWVudChsZWZ0Q29sdW1uU2VsZWN0b3IpLFxuICAgIFRPX1RIRV9SSUdIVF9PRiA9IFZlcnRpY2FsU3BsaXR0ZXIuc2l0dWF0ZWQuVE9fVEhFX1JJR0hUX09GO1xuXG5uZXcgVmVydGljYWxTcGxpdHRlcignLmxlZnQudmVydGljYWwuc3BsaXR0ZXInLCBUT19USEVfUklHSFRfT0YsIGxlZnRDb2x1bW4pO1xuXG52YXIgR2FsbGluYUxleGVyID0gcmVxdWlyZSgnLi4vLi4vZXM2L2dhbGxpbmFMZXhlcicpO1xuXG5jbGFzcyBHYWxsaW5hTGV4ZXJFeGFtcGxlIHtcbiAgc3RhdGljIHJ1bigpIHtcbiAgICBjb250ZW50VGV4dEFyZWEub25DaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICB1cGRhdGVUb2tlbnMoKTtcbiAgICB9KTtcbiB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVRva2VucygpIHtcbiAgdmFyIGNvbnRlbnRUZXh0QXJlYVZhbHVlID0gY29udGVudFRleHRBcmVhLmdldFZhbHVlKCksXG4gICAgICBjb250ZW50ID0gY29udGVudFRleHRBcmVhVmFsdWUsICAvLy9cbiAgICAgIGxpbmVzID0gR2FsbGluYUxleGVyLmxpbmVzRnJvbUNvbnRlbnQoY29udGVudCksXG4gICAgICB0b2tlbnMgPSBsaW5lcy5yZWR1Y2UoZnVuY3Rpb24odG9rZW5zLCBsaW5lLCBpbmRleCkge1xuICAgICAgICB2YXIgbGluZVRva2VucyA9IGxpbmUuZ2V0VG9rZW5zKCk7XG5cbiAgICAgICAgdG9rZW5zID0gdG9rZW5zLmNvbmNhdChsaW5lVG9rZW5zKTtcblxuICAgICAgICByZXR1cm4gdG9rZW5zO1xuICAgICAgfSwgW10pLFxuICAgICAgdG9rZW5zSFRNTCA9IHRva2Vucy5yZWR1Y2UoZnVuY3Rpb24odG9rZW5zSFRNTCwgdG9rZW4pIHtcbiAgICAgICAgdmFyIHRva2VuSFRNTCA9IHRva2VuLmdldEhUTUwoKTtcbiAgICAgICAgXG4gICAgICAgIHRva2Vuc0hUTUwgKz0gdG9rZW5IVE1MO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRva2Vuc0hUTUw7XG4gICAgICB9LCAnJyksXG4gICAgICB0b2tlbnNUZXh0QXJlYUhUTUwgPSB0b2tlbnNIVE1MOyAgLy8vXG5cbiAgdG9rZW5zVGV4dEFyZWEuaHRtbCh0b2tlbnNUZXh0QXJlYUhUTUwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEdhbGxpbmFMZXhlckV4YW1wbGU7XG4iXX0=